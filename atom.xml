<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>糯米的博客</title>
  
  <subtitle>这里是糯米的秘密小屋</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-04-25T07:17:01.382Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>幻梦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>传智教育作业（大二下）</title>
    <link href="http://example.com/post/%E4%BC%A0%E6%99%BA%E6%95%99%E8%82%B2%E4%BD%9C%E4%B8%9A%EF%BC%88%E5%A4%A7%E4%BA%8C%E4%B8%8B%EF%BC%89/"/>
    <id>http://example.com/post/%E4%BC%A0%E6%99%BA%E6%95%99%E8%82%B2%E4%BD%9C%E4%B8%9A%EF%BC%88%E5%A4%A7%E4%BA%8C%E4%B8%8B%EF%BC%89/</id>
    <published>2024-09-15T05:59:21.000Z</published>
    <updated>2025-04-25T07:17:01.382Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="索引："><a href="#索引：" class="headerlink" title="索引："></a>索引：</h4><h4 id="1、前端技术"><a href="#1、前端技术" class="headerlink" title="1、前端技术"></a>1、<a href="#jump1">前端技术</a></h4><p>———<a href="#jump11">① 23软工1、2班《前端技术》课后作业01</a></p><p>———<a href="#jump12">② 23软工1、2班《前端技术》课后作业02</a></p><p>———<a href="#jump13">③ 23软工1、2班《前端技术》课后作业03</a></p><p>———<a href="#jump14">④ 23软工1、2班《前端技术》课后作业04</a></p><p>———<a href="#jump15">⑤ 23软工1、2班《前端技术》课后作业05</a></p><p>———<a href="#jump16">⑥ 23软工1、2班《前端技术》课后作业06</a></p><p>———<a href="#jump17">⑦ 23软工1、2班《前端技术》课后作业07</a></p><h4 id="2、JavaWeb"><a href="#2、JavaWeb" class="headerlink" title="2、JavaWeb"></a>2、<a href="#jump2">JavaWeb</a></h4><p>———<a href="#jump21">① 一、B/S系统作业1</a></p><p>———<a href="#jump22">② 二、B/S系统作业2</a></p><p>———<a href="#jump23">③ 三、B/S系统作业3</a></p><p>———<a href="#jump24">④ 四、B/S系统作业4</a></p><p>———<a href="#jump25">⑤ 五、B/S系统作业5</a></p><p>———<a href="#jump26">⑥ 六、B/S系统作业6</a></p><p>———<a href="#jump27">⑦ 六、B/S系统作业7</a></p><p>———<a href="#jump28">⑧ 七、B/S系统作业8</a></p><h4 id="3、Pyhthon"><a href="#3、Pyhthon" class="headerlink" title="3、Pyhthon"></a>3、<a href="#jump3">Pyhthon</a></h4><p>———<a href="#jump31">① 第1章 开启Python学习之旅</a></p><p>———<a href="#jump32">② 第2章 数字类型与字符串</a></p><p>———<a href="#jump33">③ 第4章 列表与元组</a></p><p>———<a href="#jump34">④ 第5章 字典和集合</a></p><p>———<a href="#jump35">⑤ 第6章 函数</a></p><p>———<a href="#jump36">⑥ 第7章 类与面向对象</a></p><p>———<a href="#jump37">⑦ 第9章 文件与文件路径操作</a></p><p>———<a href="#jump38">⑧ 第8章 模块</a></p><p>———<a href="#jump39">⑨ 第10章 错误和异常</a></p><p>———<a href="#jump310">⑩ 第11章 错误和异常</a></p><p>———<a href="#jump311">⑪ 第12章 进程和线程</a></p><h1 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a><span id="jump1">前端技术</span></h1><h2 id="七、23软工1、2班《前端技术》课后作业07"><a href="#七、23软工1、2班《前端技术》课后作业07" class="headerlink" title="七、23软工1、2班《前端技术》课后作业07"></a><span id="jump17">七、23软工1、2班《前端技术》课后作业07</span></h2><details class="folding-tag" ><summary> 7 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 7-1 </summary>              <div class='content'>              <p>1、(C)<br>关于代码alert(‘220’ + ‘230’)的输出结果，下列正确的是（）。<br>A、220 + 230 = 220230<br>B、220 + 230 = 450<br>C、220230<br>D、450</p><hr><p>2、(D)<br>下列字符中，能够用于声明变量的是（）。<br>A、￥<br>B、$<br>C、 int<br>D、var</p><hr><p>3、(A)<br>length属性值会比数组中最大的索引值大多少（）<br>A、1<br>B、2<br>C、3<br>D、4</p><hr><p>4、(C)<br>下列选项中，用于获取标签名称的方法是（）<br>3分<br>A、getElementById()<br>B、getElementsByName()<br>C、getElementsByTagName()<br>D、getElementsByClassName()</p><hr><p>5、(C)<br>下列定义JavaScript 数组的代码，书写正确的是（）<br>A、var txt = new Array=”George”,”John”,”Thomas”<br>B、 var txt = new Array(1:”George”,2:”John”,3:”Thomas”)<br>C、 var txt = new Array(“George”,”John”,”Thomas”)<br>D、 var txt = new Array:1=(“George”)2=(“John”)3=(“Thomas”)</p>              </div>            </details><hr><h3 id="（2）多选题"><a href="#（2）多选题" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 7-2 </summary>              <div class='content'>              <p>6、(A B C D)<br>下面的选项中，属于DOM节点的是（）<br>A、根节点<br>B、父节点<br>C、子节点<br>D、兄弟节点</p><hr><p>7、(A B C)<br>下列选项中，属于JavaScript引入方式的有（）。<br>A、行内式<br>B、嵌入式<br>C、外链式<br>D、嵌套式</p><hr><p>8、(A B C D)<br>下列选项属于JavaScript内置对象的是（ ）<br>A、Date对象<br>B、Math对象<br>C、Object对象<br>D、String对象</p><hr><p>9、(B C)<br>下列选项中，属于JavaScript的语法规则的是（）<br>5分<br>A、JavaScript不区分字母大小写。<br>B、JavaScript严格区分字母大小写。<br>C、JavaScript语言并不要求必须以分号“;”作为语句的结束标签。<br>D、JavaScript语言必须以分号“;”作为语句的结束标签。</p><p>10、(A D)<br>关于if条件语句的描述，下列选项说法正确的是（）。<br>A、通过判断条件表达式的值为true或false来确定是否执行某一条语句。<br>B、多向判断语句不属于if条件语句。<br>C、只能针对某个表达式的值做出判断，从而决定执行哪一段代码。<br>D、if条件语句主要包括单向判断语句、双向判断语句和多向判断语句</p><hr><p>11、(A B C)<br>下面的选项中，属于循环语句的是（）。<br>A、while语句<br>B、do…while语句<br>C、for<br>D、break语句</p><hr><p>12、(A B C)<br>下列选项中，属于表单事件的是（）<br>A、onchange<br>B、onfocus<br>C、onsubmit<br>D、onkeypress</p><hr><p>13、(A C D)<br>关于跳转语句的描述，下列选项说法正确的是（）。<br>A、跳转语句用于实现程序执行过程中的流程跳转<br>B、跳转语句是利用一个条件来控制是否要继续执行该语句<br>C、continue语句的作用是终止本次循环，执行下一次循环<br>D、break语句是结束整个循环过程，不再判断执行循环的条件是否成立</p><hr><p>14、(A C D)<br>下列选项中，属于鼠标事件的是（）<br>A、onclick<br>B、onkeydown<br>C、onmouseout<br>D、ondblclick</p><hr><p>15、(A B C D)<br>下列选项中，属于JavaScript数据类型的是（）<br>A、数值<br>B、 字符串<br>C、 布尔<br>D、 空值</p>              </div>            </details><hr><h3 id="（3）判断题"><a href="#（3）判断题" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 7-3 </summary>              <div class='content'>              <p>16、(F)<br>在HTML中运用<code>&lt;style&gt;</code>标签及其相关属性可以嵌入JavaScript脚本代码。</p><hr><p>17、(T)<br>采用事件驱动是JavaScript语言的一个最基本的特征。</p><hr><p>18、(T)<br>使用“= =”运算符可以比较两个字符串是否相同。</p><hr><p>19、(F)<br>在JavaScript中，数组元素必须是同一类型。</p><hr><p>20、(F)<br><code>&lt;body&gt;</code>标签是整个文档的根节点，有且仅有一个。</p>              </div>            </details><hr><h3 id="（4）填空题"><a href="#（4）填空题" class="headerlink" title="（4）填空题"></a>（4）填空题</h3><details class="folding-tag" ><summary> 7-4 </summary>              <div class='content'>              <p>21、在JavaScript中，使用new关键字，结合构造函数<u>Array()</u>可以创建数组。<br>22、在JavaScript中，根据函数中变量作用域的不同，可以把变量分为全局变量和<u>局部变量</u>。<br>23、<u>onkeypress</u>表示当输入有效的字符按键时触发此事件。<br>24、跳转语句包括break&lt;/u&gt;语句和continue语句。<br>25、在JavaScript中，使用关键字<u>function</u>来定义函数。</p>              </div>            </details>              </div>            </details><hr><h2 id="六、23软工1、2班《前端技术》课后作业06"><a href="#六、23软工1、2班《前端技术》课后作业06" class="headerlink" title="六、23软工1、2班《前端技术》课后作业06"></a><span id="jump16">六、23软工1、2班《前端技术》课后作业06</span></h2><details class="folding-tag" ><summary> 6 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 6-1 </summary>              <div class='content'>              <p>1、(B)<br>下面选项中，用于为页面添加音频的标签是（）<br>A、video<br>B、audio<br>C、image<br>D、以上都不是</p><hr><p>2、(C)<br>在CSS3中，可以实现倾斜效果的属性是（）<br>A、translate()<br>B、scale()<br>C、skew()<br>D、rotate()</p><hr><p>3、(A)<br>当页面载入完成后，可以自动播放视频的属性是（）<br>A、autoplay<br>B、loop<br>C、preload<br>D、poster</p><hr><p>4、(B)<br>下列属性中，用于定义完成过渡效果持续时间的是（）<br>A、transition-property<br>B、transition-duration<br>C、transition-timing-function<br>D、transition-delay</p><hr><p>5、(A)<br>在CSS3中，可以实现平移效果的属性是（）<br>A、translate()<br>B、scale()<br>C、skew()<br>D、rotate()</p><hr><p>6、(D)<br>下列选项中，用于定义整个动画效果完成所需要的时间的属性是（）<br>A、animation-direction<br>B、animation-iteration-count<br>C、animation<br>D、animation-duration</p><hr><p>7、(B)<br>在CSS3中，可以实现缩放效果的属性是（）<br>A、translate()<br>B、scale()<br>C、skew()<br>D、rotate()</p><hr><p>8、(B)<br>下列选项中，用于规定动画速度曲线的属性是（）<br>A、animation-direction<br>B、animation-timing-function<br>C、animation<br>D、animation-duration</p><hr><p>9、(D)<br>在CSS3中，可以实现旋转效果的属性是（）<br>A、translate()<br>B、scale()<br>C、skew()<br>D、rotate()</p><hr><p>10、(B)<br>定义完成过渡效果需要持续5秒，下列代码书写正确的是（）<br>A、transition-property：5s<br>B、transition-duration：5s<br>C、transition-timing-function：5s<br>D、transition-delay：5s</p>              </div>            </details><hr><h3 id="（2）多选题-1"><a href="#（2）多选题-1" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 6-2 </summary>              <div class='content'>              <p>11、(A B)<br>关于transition属性的描述，下列说法正确的是（）<br>A、transition属性是一个复合属性<br>B、设置多个过渡效果时，各个参数必须按照顺序进行定义<br>C、设置多个过渡效果时，各个参数不必按照顺序进行定义<br>D、设置多个过渡效果时，各个参数用逗号进行分隔</p><hr><p>12、(A B C D)<br>下面的选项中，属于video标签的属性是（）<br>A、autoplay<br>B、loop<br>C、src<br>D、controls</p><hr><p>13、(A B D)<br>下面的选项中，属于浏览器支持的音频格式是（）<br>A、ogg<br>B、mpeg3<br>C、webm<br>D、wav</p><hr><p>14、(A B C D)<br>下列选项中，属于transition-timing-function属性值的是（）<br>A、linear<br>B、ease<br>C、ease-in<br>D、cubic-bezier（n,n,n,n）</p><hr><p>15、(A B C D)<br>关于video标签的描述，下面说法正确的是（）<br>A、video是一个视频标签<br>B、video是一个音频标签<br>C、video标签中可以添加autoplay属性<br>D、在<video>和</video>之间可以插入文字</p><hr><p>16、(B C)<br>下面的选项中，属于source标签的属性是（）<br>A、margin<br>B、type<br>C、src<br>D、padding</p><hr><p>17、(A B D)<br>下列选项中，属于transition-property属性值的是（）<br>A、none<br>B、all<br>C、both<br>D、property</p><hr><p>18、(A B)<br>关于浏览器对video的支持情况，下列选项说法正确的是（）<br>A、绝大多数的浏览器已经支持HTML5中的video标签。<br>B、在不同的浏览器上运用video标签时，浏览器显示视频界面样式也不同。<br>C、在不同的浏览器上运用video标签时，浏览器显示视频界面样式相同。<br>D、谷歌浏览器3.0版本不支持。</p><hr><p>19、(A B C D)<br>关于keyframes规则参数的描述，下列说法正确的是（）<br>A、animationname表示当前动画的名称，是引用时的唯一标识<br>B、keyframes-selector指定当前关键帧要应用到整个动画过程中的位置<br>C、keyframes-selector值可以是一个百分比、from或者to<br>D、css-styles定义执行到当前关键帧时对应的动画状态</p><hr><p>20、(B D)<br>关于audio标签的描述，下列说法正确的是（）<br>A、audio是一个视频标签<br>B、audio是一个音频标签<br>C、在<audio>和</audio>之间不能插入文字<br>D、在<audio>和</audio>之间可以插入文字</p>              </div>            </details><hr><h3 id="（3）判断题-1"><a href="#（3）判断题-1" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 6-3 </summary>              <div class='content'>              <p>21、(T)<br>transform属性可以实现网页中元素的变形效果。</p><hr><p>22、(T)<br>perspective属性的透视效应由属性值决定，属性值越小，透视效果越突出。</p><hr><p>23、(T)<br>animation-timing-function用来规定动画的速度曲线。</p><hr><p>24、(T)<br>audio标签用于为页面添加音频。</p><hr><p>25、(T)<br>animation-name属性用于定义要应用的动画名称。</p><hr><p>26、(T)<br>transition-duration属性用于定义完成过渡效果需要花费的时间。</p><hr><p>27、(T)<br>animation-delay属性用于定义执行动画效果延迟的时间。</p><hr><p>28、(T)<br>animation-iteration-count属性用于定义动画的播放次数。</p><hr><p>29、(T)<br>transition-property属性用于指定应用过渡效果的CSS属性的名称。</p><hr><p>30、(T)<br>loop属性用于循环播放视频。</p>              </div>            </details>              </div>            </details><hr><h2 id="五、23软工1、2班《前端技术》课后作业05"><a href="#五、23软工1、2班《前端技术》课后作业05" class="headerlink" title="五、23软工1、2班《前端技术》课后作业05"></a><span id="jump15">五、23软工1、2班《前端技术》课后作业05</span></h2><details class="folding-tag" ><summary> 5 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 5-1 </summary>              <div class='content'>              <p>1、(C)</p><p>下列属性中，用来设置行背景颜色的是（）<br>A、height<br>B、align<br>C、bgcolor<br>D、background</p><hr><p>2、(C)</p><p>下列文本框的控件类型，可用于输入搜索关键词的是（）<br>4分<br>A、email类型<code>&lt;input type=&quot;email&quot; /&gt;</code><br>B、url类型<code>&lt;input type=&quot;url&quot; /&gt;</code><br>C、search 类型<code>&lt;input type=&quot;search&quot; /&gt;</code><br>D、color类型<code>&lt;input type=&quot;color&quot; /&gt;</code></p><hr><p>3、(D)</p><p>下列属性中，用来设置单元格横跨列数的是（）<br>A、width<br>B、bgcolor<br>C、rowspan<br>D、colspan</p><hr><p>4、(A)</p><p>关于代码“table{border:1px solid red;}”的含义，下列说法正确的是（）<br>A、设置table的边框为一像素的红色实线<br>B、设置单元格的边框为一像素的红色实线<br>C、设置table的边框为一像素的红色虚线<br>D、设置单元格的边框为一像素的红色虚线</p><hr><p>5、(A)</p><p>下面的代码中，可以设置单元格宽度的是（）<br>A、td{width:50px;}<br>B、td{height:50px;}<br>C、td{line-height:50px;}<br>D、td{font-size:50px;}</p>              </div>            </details><hr><h3 id="（2）多选题-2"><a href="#（2）多选题-2" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 5-2 </summary>              <div class='content'>              <p>6、(A B C D)</p><p>下列选项中，属于<code>&lt;table&gt;</code>标签属性的是（）<br>A、border<br>B、cellspacing<br>C、cellpadding<br>D、background</p><hr><p>7、(A B D)</p><p>关于单元格边距的描述，下列说法正确的是（）<br>A、cellpadding控制单元格内容与边框之间的距离<br>B、使用padding属性可以拉开单元格内容与边框之间的距离<br>C、设置相邻单元格边框之间的距离使用margin属性<br>D、设置相邻单元格边框之间的距离只能使用cellspacing属性</p><hr><p>8、(B C)</p><p>关于CSS控制单元格边距，下列说法错误的是（）<br>A、单元格设置外边距属性margin不能生效<br>B、单元格设置内边距属性padding不能生效<br>C、table标签可以设置内边距padding和外边距margin属性，并且均能生效<br>D、行标签<tr>无内边距属性padding和外边距属性margin</p><hr><p>9、(A B C D)</p><p>关于input控件类型的描述，下列说法正确的是（）<br>A、email类型的input控件是一种专门用于输入E-mail地址的文本输入框<br>B、url类型的input控件是一种用于输入URL地址的文本框<br>C、tel类型用于提供输入电话号码的文本框<br>D、color类型用于提供设置颜色的文本框</p><hr><p>10、(A B C D)</p><p>下列选项中，属于input控件属性的是（）<br>A、type<br>B、name<br>C、value<br>D、size</p><hr><p>11、(A B C)</p><p>下列选项中，属于<code>&lt;textarea&gt;</code>标签的必须属性的是（）<br>A、cols<br>B、rows<br>C、value<br>D、size</p><hr><p>12、(A B C)</p><p>表单是由以下哪些基本元素构成的（）<br>A、表单控件<br>B、提示信息<br>C、表单域<br>D、文本域</p><hr><p>13、(A B C)</p><p>下列选项中，属于<code>&lt;select&gt;</code>标签属性的是（）<br>A、size<br>B、multiple<br>C、selected<br>D、value</p><hr><p>14、(A B C D)</p><p>关于CSS控制单元格边距技巧，下列说法正确的是（）<br>A、行标签<code>&lt;tr&gt;</code>应用内边距属性padding无效<br>B、<code>&lt;td&gt;</code>标签应用外边距属性margin无效<br>C、要想设置相邻单元格边框之间的距离，只能对<code>&lt;table&gt;</code>标签应用cellspacing属性<br>D、行标签<code>&lt;tr&gt;</code>无内边距属性padding和外边距属性margin</p><hr><p>15、(A C D)</p><p>下列选项中，属于表单标签<code>&lt;form&gt;</code>的属性是（）<br>A、action<br>B、size<br>C、method<br>D、name</p>              </div>            </details><hr><h3 id="（3）判断题-2"><a href="#（3）判断题-2" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 5-3 </summary>              <div class='content'>              <p>16、(F)</p><p>对同一行中的单元格定义不同的高度，最终的高度值将取其中的较小者。</p><hr><p>17、(T)</p><p>action的属性值可以是相对路径或绝对路径。</p><hr><p>18、(T)</p><p>在表格中，cellpadding属性用于设置单元格内容与单元格边框之间的空白间距。</p><hr><p>19、(T)</p><p>在HTML5中，通过form属性可以把表单内的子元素写在页面中的任一位置。</p><hr><p>20、(T)</p><p>当对<code>&lt;table&gt;</code>标签应用align属性时，单元格中的内容不受影响。</p><hr><p>21、(F)</p><p>在表格中，<code>&lt;table&gt;</code>标签应用边框样式属性border，单元格不必再设置边框了。</p><hr><p>22、(T)</p><p>使用cellspacing属性可以设置相邻单元格边框之间的距离。</p><hr><p>23、(T)</p><p>由于form是块元素，重置浏览器的默认样式时，需要清除其内边距padding和外边距margin。</p><hr><p>24、(F)</p><p>使用CSS中margin外边距属性可以设置相邻单元格边框之间的距离。</p><hr><p>25、(T)</p><p>在定义单选按钮时，必须为同一组中的选项指定相同的name值，这样“单选”才会生效。</p>              </div>            </details>              </div>            </details><hr><h2 id="四、23软工1、2班《前端技术》课后作业04"><a href="#四、23软工1、2班《前端技术》课后作业04" class="headerlink" title="四、23软工1、2班《前端技术》课后作业04"></a><span id="jump14">四、23软工1、2班《前端技术》课后作业04</span></h2><details class="folding-tag" ><summary> 4 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 4-1 </summary>              <div class='content'>              <p>1、(B)<br>下列代码中，用于更改元素左内边距的是（）</p><p>A、text-indent</p><p>B、padding-left</p><p>C、margin-left</p><p>D、padding-right</p><hr><p>2、(D)</p><p>下列代码中，用于设置背景图像位置的属性是（）。</p><p>A、background-color</p><p>B、background-image</p><p>C、background-repeat</p><p>D、background-position</p><hr><p>3、(D)</p><p>下列选项中，用于设置边框颜色的属性是（）<br>A、border-style<br>B、border-height<br>C、border-width<br>D、border-color</p><hr><p>4、(A)</p><p>下列选项中，用于设置边框样式的属性是（）<br>A、border-style<br>B、border-height<br>C、border-width<br>D、border-color</p><hr><p>5、(A)</p><p>下列选项中，用于给盒子添加阴影效果的属性是（）<br>A、box-shadow<br>B、box-sizing<br>C、shadow<br>D、sizing</p><hr><p>6、(C)</p><p>关于盒子模型中的宽度属性，下面说法正确的是（）<br>A、盒子模型中的宽度属性适用于所有元素<br>B、盒子模型中的宽度属性仅适用于行内元素<br>C、盒子模型中的宽度属性仅适用于块级元素<br>D、以上说法都正确</p><hr><p>7、(A)</p><p>下列代码中，用于改变盒子模型外边距的是（）<br>A、margin<br>B、padding<br>C、type<br>D、border</p><hr><p>8、(D)</p><p>下列代码中，可清除元素默认外边距的是（）<br>A、font-size:0;<br>B、line-height:0;<br>C、padding:0;<br>D、margin:0;</p>              </div>            </details><hr><h3 id="（2）多选题-3"><a href="#（2）多选题-3" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 4-2 </summary>              <div class='content'>              <p>9、(A C D)</p><p>在CSS中，属于clear属性值的有（）<br>A、left<br>B、center<br>C、right<br>D、both</p><hr><p>10、(A B C D)</p><p>下列选项中，属于display属性值的是（）。<br>A、inline<br>B、block<br>C、inline-block<br>D、none</p><hr><p>11、(A B C D)<br>关于background-repeat属性值的描述，下列说法正确的是（）。<br>A、repeat是沿水平和竖直两个方向平铺（默认值）<br>B、no-repeat背景图像不平铺（图像只显示一个并位于页面的左上角）<br>C、repeat-x只沿水平方向平铺<br>D、repeat-y只沿竖直方向平铺</p><hr><p>12、(A C D)</p><p>下列选项中，属于边框属性的是（）。<br>A、border-style<br>B、border-height<br>C、border-width<br>D、border-color</p><hr><p>13、(A B)</p><p>盒子模型有多个属性，其中元素内容与边框之间的距离通常被称为（）<br>A、内边距<br>B、内填充<br>C、外边距<br>D、外填充</p><hr><p>14、(B C D)</p><p>关于样式代码“padding:20px 30px 10px;”，下列说法正确的是（）。<br>A、该元素上下方向的内边距均为20px<br>B、该元素的上内边距为20px<br>C、该元素左右内边距为30px<br>D、该元素下内边距为10px</p><hr><p>15、(A B C D)<br>下面选项中，属于盒子模型的基本属性是（）<br>A、内边距<br>B、外边距<br>C、边框<br>D、宽和高</p><hr><p>16、(A B C)</p><p>background-repeat的属性值包括以下哪些选项（）。<br>A、repeat<br>B、no-repeat<br>C、repeat-x<br>D、repeat-y</p><hr><p>17、(C D)<br>下列选项中，属于float属性值的有（）<br>A、left<br>B、center<br>C、right<br>D、none</p><hr><p>18、(A B C)</p><p>关于z-index标签层叠的描述，下列说法正确的是（）<br>A、z-index属性取值可为正整数<br>B、z-index属性取值可为负整数<br>C、z-index属性取值可为0<br>D、z-index属性取值不可以为0</p>              </div>            </details><hr><h3 id="（3）判断题-3"><a href="#（3）判断题-3" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 4-3 </summary>              <div class='content'>              <p>19、(F)</p><p>应用了“float:none;”样式的元素将居中浮动。</p><hr><p>20、(T)</p><p>当对元素应用“overflow:hidden;”样式时，溢出内容会被修剪。</p><hr><p>21、(F)</p><p>在CSS中，position属性可以为元素设置浮动。</p><hr><p>22、(T)</p><p>当对元素应用“overflow: auto;”样式时，元素框将自适应其所要显示的内容。</p><hr><p>23、(T)</p><p>只有设置边框样式后，边框宽度属性才会生效。</p><hr><p>24、(F)</p><p>在CSS中，border属性不是一个复合属性。</p><hr><p>25、(F)</p><p>z-index属性取值不能是负整数。</p><hr><p>26、(T)</p><p>应用了“float:right;”样式的元素将向右侧浮动。</p><hr><p>27、(F)</p><p>border-radius属性水平半径参数只能设置1个参数值，用来表示四角圆角半径的大小。</p>              </div>            </details><hr><h3 id="（4）填空题-1"><a href="#（4）填空题-1" class="headerlink" title="（4）填空题"></a>（4）填空题</h3><details class="folding-tag" ><summary> 4-4 </summary>              <div class='content'>              <p>28、在CSS中，通过<u>float</u>属性可以为元素设置浮动。</p><p>29、在CSS中，padding属性用于设置<u>内边距</u>也常常称为内填充。</p><p>30、固定定位是相对于<u>当前浏览器窗口</u>来进行的定位。</p>              </div>            </details><hr><h3 id="（5）简答题"><a href="#（5）简答题" class="headerlink" title="（5）简答题"></a>（5）简答题</h3><details class="folding-tag" ><summary> 4-5 </summary>              <div class='content'>              <p>31、请简要描述什么是外边距塌陷。</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>当上下相邻的两个块元素相遇时,如果上面的标记有下外边距margin-bottom，下面的标记有上外边距margin-top，则它们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为外边距塌陷。</p><hr><p>32、请简要描述重复线性渐变的基本语法格式，并解释说明。</p><h4 id="答案：-1"><a href="#答案：-1" class="headerlink" title="答案："></a>答案：</h4><p>在CSS3中，通过“background-image:repeating-linear-gradient（参数值）;”样式可以实现重复线性渐变的效果，其基本语法格式如下。 background-image:repeating-linear-gradient(渐变角度,颜色值1,颜色值2…,颜色值n); 在上面的语法格式中，“repeating-linear-gradient（参数值）”用于定义渐变方式为重复线性渐变，括号内的参数取值和线性渐变相同，分别用于定义渐变角度和颜色值。颜色值同样可以使用百分比定义位置。</p>              </div>            </details>              </div>            </details><hr><h2 id="三、23软工1、2班《前端技术》课后作业03"><a href="#三、23软工1、2班《前端技术》课后作业03" class="headerlink" title="三、23软工1、2班《前端技术》课后作业03"></a><span id="jump13">三、23软工1、2班《前端技术》课后作业03</span></h2><details class="folding-tag" ><summary> 3 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 3-1 </summary>              <div class='content'>              <p>1、(A)<br>下列选项中，用于设置背景颜色的属性是（）。</p><p>A、background-color</p><p>B、background-image</p><p>C、background-repeat</p><p>D、background-position</p><hr><p>2、(A)</p><p>下列选项中，用来表示通配符选择器的符号是（）</p><p>A、*</p><p>B、#</p><p>C、、</p><p>D、:</p><hr><p>3、(D)</p><p>下列选项中，用于设置字体的属性是（）</p><p>A、font-size</p><p>B、font-style</p><p>C、font-weight</p><p>D、font-family</p><hr><p>4、(B)</p><p>关于CSS注释，下列写法正确的是（）</p><p>A、<code>&lt;!-- 注释语句 --&gt;</code></p><p>B、/<em> 注释语句 </em>/</p><p>C、/ 注释语句 /</p><p>D、”注释语句”</p><hr><p>5、(A)</p><p>下列选项中，关于选择器权重的优先级的说法正确的是（）</p><p>A、标签选择器＜类选择器＜ID选择器</p><p>B、类选择器＜ID选择器＜标签选择器</p><p>C、标签选择器＜ID选择器＜类选择器</p><p>D、ID选择器＜标签选择器＜类选择器</p><hr><p>6、(B)</p><p>下列选项中，用来定义字体风格的属性是（）</p><p>A、font-size</p><p>B、font-style</p><p>C、font-weight</p><p>D、font-family</p><hr><p>7、(C)</p><p>下列选项中，可以为页面中的文本添加阴影效果的属性是（）</p><p>A、text-overflow</p><p>B、white-space</p><p>C、text-shadow</p><p>D、text-indent</p><hr><p>8、(D)</p><p>下列选项中，用于设置首行文本缩进的属性是（）</p><p>A、text-overflow</p><p>B、white-space</p><p>C、text-shadow</p><p>D、text-indent</p>              </div>            </details><hr><h3 id="（2）多选题-4"><a href="#（2）多选题-4" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 3-2 </summary>              <div class='content'>              <p>9、(A D)</p><p>关于行内式的描述，下列说法正确的是（）</p><p>A、行内式通过标签的属性来控制样式</p><p>B、仅设计一个页面时，可以使用行内式</p><p>C、可以将结构和样式完全分离</p><p>D、行内式不能将结构与样式分离</p><hr><p>10、(B C)</p><p>关于CSS样式规则格式的描述，下列说法正确的是（）</p><p>A、花括号内部只能是一条声明</p><p>B、花括号内的声明由一个属性和属性值组成</p><p>C、花括号内的声明以“键值对”的形式出现。</p><p>D、属性和属性值之间用英文分号“;”连接</p><hr><p>11、(A B D)<br>下列选项中，属于CSS文本外观属性的是（）</p><p>A、line-height</p><p>B、text-indent</p><p>C、text-decoration</p><p>D、font-size</p><hr><p>12、(C)</p><p>下面的选项中，属于CSS字体样式属性的是（）</p><p>A、font-size</p><p>B、font-style</p><p>C、line-height</p><p>D、font-family</p><hr><p>13、(ABC)</p><p>下列选项中，属于引入CSS样式表的方式是（）</p><p>A、行内式</p><p>B、内嵌式</p><p>C、外链式</p><p>D、旁引式</p><hr><p>14、(A B)</p><p>关于RGB代码的表示方法，下列选项正确的是（）</p><p>A、rgb(255,0,0)</p><p>B、rgb(100%,0%,0%)</p><p>C、rgb(100%,0,0)</p><p>D、rgb(100 0 0)</p><hr><p>15、(A B)<br>关于内嵌式的描述，下列说法正确的是（）</p><p>A、可以将结构与样式进行半分离</p><p>B、仅设计一个页面时，可以使用内嵌式</p><p>C、可以将结构和样式完全分离</p><p>D、内嵌式不能将结构与样式分离</p><hr><p>16、(A B C)</p><p>下列选项中，属于background-color属性值的有（）</p><p>A、red</p><p>B、#F00</p><p>C、rgb（255,0,0）</p><p>D、（255,0,0）</p><hr><p>17、(A B C D)<br>关于字体样式属性的描述，下列说法正确的是（）</p><p>A、可以设置字体风格</p><p>B、可以设置字体粗细</p><p>C、可以设置字号大小</p><p>D、可以综合设置字体样式</p>              </div>            </details><hr><h3 id="（3）判断题-4"><a href="#（3）判断题-4" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 3-3 </summary>              <div class='content'>              <p>18、(T)</p><p>外链式是将所有的样式放在一个或多个以.css为扩展名的外部样式表文件中。</p><hr><p>19、(T)</p><p>未设置背景颜色的标签，会默认为透明背景。</p><hr><p>20、(T)</p><p>行内式是通过标签的style属性来设置标签的样式</p><hr><p>21、(T)</p><p>继承样式的权重为0时，子标签定义的样式会覆盖继承来的样式。</p><hr><p>22、(T)</p><p>权重相同时，CSS样式遵循就近原则。</p><hr><p>23、(F)</p><p>标签指定式选择器由标签选择器和id选择器两个选择器构成。</p><hr><p>24、(F)</p><p>CSS的层叠性是指书写CSS样式表时，子标签会继承父标签的某些样式。</p><hr><p>25、(T)</p><p>并集选择器是各个选择器通过逗号连接而成的。</p><hr><p>26、(T)</p><p>在HTML标签中，使用!important的标签都具有最大优先级。</p><hr><p>27、(T)</p><p>所有的HTML标签名都可以作为标签选择器。</p>              </div>            </details><hr><h3 id="（4）简答题"><a href="#（4）简答题" class="headerlink" title="（4）简答题"></a>（4）简答题</h3><details class="folding-tag" ><summary> 3-4 </summary>              <div class='content'>              <p>28、请简要说明在使用font-family设置字体时，需要注意哪些问题。</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>1、各种字体之间必须使用英文逗号隔开</p><p>2、中文字体需要加英文引号，但英文字体一般不需要加引号，当需要设置英文字体时，英文字体名必须位于中文字体名之前</p><p>3、如果字体名中包含空格、#、$等符号，则该字体必须加英文引号，如“font-family: “Times New Roman”;”</p><p>4、尽量使用系统默认字体，保证网页中的文字在任何用户的浏览器中都能正确显示</p><hr><p>29、请简要描述word-spacing属性和letter-spacing属性的区别。</p><h4 id="答案：-1"><a href="#答案：-1" class="headerlink" title="答案："></a>答案：</h4><p>letter-spacing 属性用于定义字母之间的间距，而 word-spacing 属性用于定义英文单词之间的间距。</p>              </div>            </details>              </div>            </details><hr><h2 id="二、23软工1、2班《前端技术》课后作业02"><a href="#二、23软工1、2班《前端技术》课后作业02" class="headerlink" title="二、23软工1、2班《前端技术》课后作业02"></a><span id="jump12">二、23软工1、2班《前端技术》课后作业02</span></h2><details class="folding-tag" ><summary> 2 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 2-1 </summary>              <div class='content'>              <p>1、(C)</p><p>当图像不能显示时，可以用下列哪个属性设置替换文本（）</p><p>A、face</p><p>B、head</p><p>C、alt</p><p>D、font</p><hr><p>2、(D)</p><p>下列标签中，用于实现换行功能的是（）</p><p>A、<code>&lt;hr /&gt;</code></p><p>B、<code>&lt;p&gt;</code></p><p>C、<code>&lt;h2/&gt;</code></p><p>D、<code>&lt;br/&gt;</code></p><hr><p>3、(B)</p><p>下列标签中，用于定义HTML文档所要显示内容的是（）</p><p>A、<code>&lt;head&gt;&lt;/head&gt;</code></p><p>B、<code>&lt;body&gt;&lt;/body&gt;</code></p><p>C、<code>&lt;html&gt;&lt;/html&gt;</code></p><p>D、<code>&lt;title&gt;&lt;/title&gt;</code></p><hr><p>4、(A)</p><p>关于单标签的语法格式，下列写法正确的是（）</p><p>A、&lt;标签名/&gt;</p><p>B、&lt;标签名&gt;内容&lt;/标签名&gt;</p><p>C、&lt;/标签名&gt;</p><p>D、&lt;标签名&gt;</p><hr><p>5、(D)</p><p>下列选项中，属于人民币的字符是（）</p><p>A、<code>&amp;nbsp;</code></p><p>B、<code>&amp;lt;</code></p><p>C、<code>&amp;plusmn;</code></p><p>D、<code>&amp;yen;</code></p><hr><p>6、(A)</p><p>下列选项中，用于定义页面元信息的标签是（）</p><p>A、<code>&lt;meta /&gt;</code></p><p>B、<code>&lt;h1&gt;</code></p><p>C、<code>&lt;hr /&gt;</code></p><p>D、<code>&lt;br /&gt;</code></p><hr><p>7、(A)</p><p>下列选项中，用于显示空格的特殊字符是（）</p><p>A、<code>&amp;nbsp;</code></p><p>B、<code>&amp;lt;</code></p><p>C、<code>&amp;plusmn;</code></p><p>D、<code>&amp;amp;</code></p><hr><p>8、(C)<br>下列选项中，用于设置文本斜体的是（）</p><p>A、<code>&lt;b&gt;&lt;/b&gt;</code>和<code>&lt;strong&gt;&lt;/strong&gt;</code></p><p>B、<code>&lt;u&gt;&lt;/u&gt;</code>和<code>&lt;ins&gt;&lt;/ins&gt;</code></p><p>C、<code>&lt;i&gt;&lt;/i&gt;</code>和<code>&lt;em&gt;&lt;/em&gt;</code></p><p>D、<code>&lt;del&gt;&lt;/del&gt;</code>和<code>&lt;s&gt;&lt;/s&gt;</code></p>              </div>            </details><hr><h3 id="（2）多选题-5"><a href="#（2）多选题-5" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 2-2 </summary>              <div class='content'>              <p>9、(A B D)</p><p>下面的选项中，属于网页上常用图片格式的是（）</p><p>A、GIF格式</p><p>B、PSD格式</p><p>C、PNG格式</p><p>D、JPG格式</p><hr><p>10、(A B C D)</p><p>关于图片格式的描述，下列说法正确的是（）</p><p>A、网页中小图片或网页基本元素储存时考虑GIF或PNG-8</p><p>B、网页中半透明图像储存时考虑PNG</p><p>C、网页中类似照片的图像储存时考虑JPG</p><p>D、目前网页上常用的图像格式主要有GIF、JPG和PNG三种</p><hr><p>11、(A C D)<br>关于切图的描述，下列法正确的是（）</p><p>A、切图可以提高浏览器的加载速度</p><p>B、切图的目的是把设计效果图转化成网页代码</p><p>C、切图可以满足一些版面设计的特殊要求</p><p>D、切图可以降低浏览器的加载速度</p><hr><p>12、(A D)<br>下列选项中，属于单标签的是（）</p><p>A、<code>&lt;hr /&gt;</code></p><p>B、<code>&lt;p&gt;</code></p><p>C、<code>&lt;h2 /&gt;</code></p><p>D、<code>&lt;br /&gt;</code></p><hr><p>13、(A B D)</p><p>关于标题的描述，下列说法正确的是（）</p><p>A、HTML提供了6个等级的标题</p><p>B、<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>标题的重要性依次递减</p><p>C、<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>标题的重要性依次递增</p><p>D、标题标签使网页更具语义化</p>              </div>            </details><hr><h3 id="（3）判断题-5"><a href="#（3）判断题-5" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 2-3 </summary>              <div class='content'>              <p>14、(T)</p><p>绝对路径就是网页上的文件或目录在硬盘上的真正路径。</p><hr><p>15、(F)</p><p>face属性用于设置文字的颜色。</p><hr><p>16、(F)</p><p>在网页制作中，图片只能用GIF格式。</p><hr><p>17、(T)</p><p>face属性用于设置文字的字体。</p><hr><p>18、(F)</p><p>设置图像的宽高属性时，必须同时设置宽度和高度两个属性。</p><hr><p>19、(T)</p><p><code>&lt;body&gt;</code>标签和<code>&lt;head&gt;</code>标签是并列关系。</p><hr><p>20、(T)</p><p>文本在段落中会根据浏览器窗口的大小自动换行。</p><hr><p>21、(T)</p><p><code>&lt;div&gt;</code>标签是一个块标签，可以实现网页的规划和布局。</p><hr><p>22、(F)</p><p>浏览器中显示的所有文本、图像、音频和视频等信息都必须位于<code>&lt;head&gt;</code>标签内。</p><hr><p>23、(F)</p><p>在HTML中使用注释标签时，注释内容会显示在浏览器窗口中。</p><hr><p>24、(T)</p><p>标签嵌套是指一个双标签里面又包含了其他的标签。</p><hr><p>25、(T)</p><p><code>&lt;hr /&gt;</code>为单标签，用于定义一条水平线。</p><hr><p>26、(F)</p><p>设置标签属性时，标签名与属性、属性与属性之间均以逗号分开。</p><hr><p>27、(F)</p><p>在网页中，使用回车键可以实现换行效果。</p><hr><p>28、(F)</p><p>在HTML中，只能用<code>&lt;strong&gt;</code>标签设置粗体显示文本。</p>              </div>            </details><hr><h3 id="（4）填空题-2"><a href="#（4）填空题-2" class="headerlink" title="（4）填空题"></a>（4）填空题</h3><details class="folding-tag" ><summary> 2-4 </summary>              <div class='content'>              <p>29、<u><code>&lt;head&gt;</code></u>标签用于定义HTML文档的头部信息，也称为头部标签。</p><p>30、网页的根标签是<code>&lt;html&gt;</code>，主体标签是<u><code>&lt;body&gt;</code></u>，标题标签是<u><code>&lt;title&gt;</code></u>。</p>              </div>            </details><hr><h3 id="（5）简答题-1"><a href="#（5）简答题-1" class="headerlink" title="（5）简答题"></a>（5）简答题</h3><details class="folding-tag" ><summary> 2-5 </summary>              <div class='content'>              <p>31、请简要描述一下什么是相对路径和绝对路径。</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>绝对路径是网页上的文件或目录在硬盘上的真正路径。<br>相对路径就是相对于当前文件的路径，相对路径没有盘符，通常是以HTML网页文件为起点。</p><hr><p>32、简要描述一下什么是键值对。</p><h4 id="答案：-1"><a href="#答案：-1" class="headerlink" title="答案："></a>答案：</h4><p>所谓”键值对’简单地说即为对”属性’设置”值’。它有多种表现形式,例如color=”red” 、width:200px;等，其中color和width即为”键值对’中的”键’，red和200px为”键值对’中的”值’。</p>              </div>            </details>              </div>            </details><hr><h2 id="一、23软工1、2班《前端技术》课后作业01"><a href="#一、23软工1、2班《前端技术》课后作业01" class="headerlink" title="一、23软工1、2班《前端技术》课后作业01"></a><span id="jump11">一、23软工1、2班《前端技术》课后作业01</span></h2><details class="folding-tag" ><summary> 1 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 1-1 </summary>              <div class='content'>              <p>1、(A)</p><p>下列浏览器中，使用Trident内核的是（）</p><p>A、IE浏览器</p><p>B、火狐浏览器</p><p>C、欧朋浏览器</p><p>D、谷歌浏览器</p>              </div>            </details><hr><h3 id="（2）多选题-6"><a href="#（2）多选题-6" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 1-2 </summary>              <div class='content'>              <p>2、(B D)</p><p>关于CSS的描述，下列说法正确的是（）</p><p>A、当CSS作为独立的文件时，必须以.html为后缀名</p><p>B、CSS用于设置HTML页面中的文本内容、图片的外形以及版面的布局等外观显示样式。</p><p>C、只有独立的CSS文件才符合结构与表现分离的特点</p><p>D、目前流行的CSS版本为CSS3</p><hr><p>3、(B C D)</p><p>关于HTML的描述，下列说法正确的是（）</p><p>A、HTML是更严谨纯净的XHTML版本</p><p>B、HTML提供了许多标签，用于对网页内容进行描述</p><p>C、目前最新的HTML版本是HTML5</p><p>D、初期的HTML在语法上很宽松</p><hr><p>5、(A B C)</p><p>HTML标签可以定义以下哪些元素（）</p><p>A、文本</p><p>B、图片</p><p>C、声音</p><p>D、视频</p><hr><p>5、(C D)</p><p>关于Web标准的描述，下列说法正确的是（）</p><p>A、Web标准只要包括HTML标准</p><p>B、Web标准是由浏览器的各大厂商联合制定的</p><p>C、Web标准并不是某一个标准，而是一系列标准的集合</p><p>D、Web标准主要包括结构标准、表现标准和行为标准三个方面</p><hr><p>6、(A B C)</p><p>下列选项，属于网页名词的是（）</p><p>A、Web</p><p>B、HTTP</p><p>C、DNS</p><p>D、 iOS</p>              </div>            </details><hr><h3 id="（3）判断题-6"><a href="#（3）判断题-6" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 1-3 </summary>              <div class='content'>              <p>7、(F)</p><p>JavaScript语言是由Java语言演变而来的，二者语法相似。</p><hr><p>8、(T)</p><p>Firebug是火狐浏览器下的一款开发插件。</p><hr><p>9、(F)</p><p>Firebug是谷歌浏览器下的一款开发插件。</p><hr><p>10、(T)</p><p>在网站中，URL其实就是Web地址，也称“网址”</p><hr><p>11、(T)</p><p>在网页中,行为是指网页模型的定义及交互效果的实现，包括ECMAScript、 BOM、DOM三个部分</p><hr><p>12、(F)</p><p>所有的浏览器对同一个CSS样式的解析都相同，因此页面在不同浏览器中的显示效果完全一样。</p><hr><p>13、(F)</p><p>在网页中，层叠样式表指的是JavaScript。</p><hr><p>14、(F)</p><p>在网页中，层叠样式表指的是HTML。</p><hr><p>15、(T)</p><p>“HTTP”是一种详细规定了浏览器和万维网服务器之间互相通信的规则。</p><hr><p>16、(F)</p><p>在网页中，结构指的就是HTML，用于对网页元素进行整理和分类。</p><hr><p>17、(F)</p><p>在网站中，WWW是网站地址，代表了Internet网络。</p><hr><p>18、(T)</p><p>在网页中，层叠样式表指的是CSS。</p><hr><p>19、(F)</p><p>因为静态网页的访问速度快，所以网站都采用静态页面。</p>              </div>            </details>              </div>            </details><hr><h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a><span id="jump2">JavaWeb</span></h1><h2 id="八、B-S系统作业8"><a href="#八、B-S系统作业8" class="headerlink" title="八、B/S系统作业8"></a><span id="jump28">八、B/S系统作业8</span></h2><details class="folding-tag" ><summary> 8 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 8-1 </summary>              <div class='content'>              <p>1、(B)<br>若想修改Tomcat服务器的默认会话时间，则需要进入下列哪个文件中修改？（ ）<br>A、在<tomcat安装目录>\conf\context.xml文件中修改<br>B、在<tomcat安装目录>\conf\web.xml文件中修改<br>C、在<tomcat安装目录>\conf\server.xml文件中修改<br>D、在<tomcat安装目录> \conf\当前应用\web.xml文件中修改</p><hr><p>2、(C)<br>在Java EE中，定义了getSession()方法的接口是（）<br>A、HttpServlet<br>B、HttpSession<br>C、HttpServletRequest<br>D、HttpServletResponse</p><hr><p>3、(B)<br>Tomcat服务器的默认会话超时时间是（ ）<br>A、30秒<br>B、30分钟<br>C、30毫秒<br>D、30小时</p><hr><p>4、(A)<br>下面选项中，可以获取到代表当前会话的Session对象的方法是（）<br>A、request.getSession();<br>B、 request.setAttribute();<br>C、new HttpSession();<br>D、HttpSession.newInstance(request);</p><hr><p>5、(C)<br>下面选项中，当存在Session对象直接返回，否则返回null的方法是（ ）<br>A、 request.getSession();<br>B、 request.getSession(true);<br>C、request.getSession(false);<br>D、 response.getSession();</p><hr><p>6、(D)<br>下面选项中，用于强制使Session对象无效的方法是（）<br>A、request.invalidate ();<br>B、session.validate ();<br>C、response.invalidate ();<br>D、session.invalidate ();</p>              </div>            </details><hr><h3 id="（2）多选题-7"><a href="#（2）多选题-7" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 8-2 </summary>              <div class='content'>              <p>7、(A B C)<br>下列选项中，适合将信息存入Session的是（）<br>A、用户登录信息<br>B、验证码<br>C、购物车<br>D、聊天室</p><hr><p>8、(A C )<br>下列关于HttpSession对象的描述中，说法正确的是（）<br>A、如果两次访问时间间隔超过session定义的非活动时间间隔，则HttpSession对象将失效<br>B、用户每次做出请求时都会创建一个新的会话<br>C、同一个浏览器做出的多个请求可以访问同一个会话对象<br>D、SessionID保存在服务器端，HttpSession对象保存在客户的浏览器</p><hr><p>9、(A C D)<br>下面关于Session域的说法中，正确的是（）<br>A、Session域的作用范围为整个会话<br>B、Session域中的数据只能存在30分钟，这个时间不能修改<br>C、可以调用HttpSession的invalidate方法，立即销毁Session域<br>D、当web应用被移除出web容器时，该web应用对应的Session跟着销毁</p><hr><p>10、(A B D)<br>下面选项中，关于SessionID的说法正确的是（）<br>A、每个HttpSession对象都有唯一的Session ID<br>B、SessionID 由Servlet容器创建<br>C、SessionID必须保存在客户端的cookie文件中<br>D、Servlet容器会把Session ID作为Cookie或者URL的一部分发送到客户端</p><hr><p>11、(B C)<br>下列关于URL重写的描述中，正确的是（）<br>A、如果浏览器没有禁用cookie，那么在浏览器中访问时就不会重写URL<br>B、如果浏览器禁用cookie了，那么浏览器每次访问时都会重写URL<br>C、如果浏览器没有禁用cookie,那么在浏览器只在第一次访问时才会重写URL，以后每次访问时都不会重写URL<br>D、不管浏览器是否禁用cookie，都一定要重写URL</p>              </div>            </details><hr><h3 id="（3）判断题-7"><a href="#（3）判断题-7" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 8-3 </summary>              <div class='content'>              <p>12、(T)<br>Session可以将会话数据保存到服务器。</p><hr><p>13、(T)<br>一次性验证码可以限制人们使用软件来暴力猜测密码，从而保证了用户信息的安全。</p><hr><p>14、(F)<br>Session对象的getLastAccessedTime()方法返回的是发送请求的时间与1970年1月1日00:00:00之间时间差的秒表示形式。</p><hr><p>15、(F)<br>当浏览器禁用Cookie后，原来已实现的关于Session的应用程序，不会受到影响依然可以运行。</p><hr><p>16、(F)<br>HttpServlet接口中的setMaxInactiveInterval(int interval)方法，是用于设置当前HttpSession对象可空闲的以毫秒为单位的最长时间。</p><hr><p>17、(F)<br>request.getSession(false)的作用是返回存在的Session对象，当Session对象不存在时，就创建新的HttpSession对象并返回。</p><hr><p>18、(T)<br>Tomcat容器中如果将元素中的时间值设置成0或一个负数，则表示会话永不超时。</p><hr><p>19、(T)<br>Session是一种将会话数据保存到服务器端的技术，需要借助Cookie技术来实现。</p><hr><p>20、(T)<br>Session对象在用户第一次访问服务器时创建，也可以通过调用request.getSession(true)方法强制生成Session对象。</p>              </div>            </details><hr><h3 id="（4）填空题-3"><a href="#（4）填空题-3" class="headerlink" title="（4）填空题"></a>（4）填空题</h3><details class="folding-tag" ><summary> 8-4 </summary>              <div class='content'>              <p>21、Web应用中的会话指的是一个客户端（浏览器）与<u>web服务器端</u>端之间连续发生的一系列请求和响应过程。<br>22、Tomcat容器中会话的有效时间可以在<u>web.xml</u>文件中设置，默认会话过期时间为30分钟。<br>23、在web.xml中，Session失效时间默认单位是<u>分钟</u>。</p>              </div>            </details><hr><h3 id="（5）简答题-2"><a href="#（5）简答题-2" class="headerlink" title="（5）简答题"></a>（5）简答题</h3><details class="folding-tag" ><summary> 8-5 </summary>              <div class='content'>              <p>23、简述什么是会话技术？</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>会话过程类似于生活中的打电话过程,它指的是一个客户端(浏览器)与Web服务器之间连续发生的一系列请求和响应过程.在Servlet技术中,提供了两个用于保存会话数据的对象,分别是Cookie和Session</p><hr><p>25、请按照以下要求设计一个购物车的类PurchaseServlet。 书籍数据如下： </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDB</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Book&gt; books = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, Book&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        books.put(<span class="string">&quot;1&quot;</span>, <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;javaweb开发&quot;</span>));</span><br><span class="line">        books.put(<span class="string">&quot;2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;jdbc开发&quot;</span>));</span><br><span class="line">        books.put(<span class="string">&quot;3&quot;</span>, <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;java基础&quot;</span>));</span><br><span class="line">        books.put(<span class="string">&quot;4&quot;</span>, <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;struts开发&quot;</span>));</span><br><span class="line">        books.put(<span class="string">&quot;5&quot;</span>, <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;5&quot;</span>, <span class="string">&quot;spring开发&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得所有的图书</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> books.values();</span><br><span class="line">    &#125; <span class="comment">// 根据指定的id获得图书</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Book <span class="title function_">getBook</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> books.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//要求如下： </span></span><br><span class="line"><span class="comment">// 1) 创建一个PurchaseServlet类，使其继承HttpServlet类并重写该类的doGet()方法； </span></span><br><span class="line"><span class="comment">// 2) 在doGet()方法中，使用request.getSession()实现购物车； </span></span><br><span class="line"><span class="comment">// 3) 将session的id保存到cookie中；</span></span><br><span class="line"><span class="comment">// 4) 重定向到/chapter05/CartServlet。</span></span><br></pre></td></tr></table></figure><h4 id="答案：-1"><a href="#答案：-1" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PurchaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123; </span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (id == <span class="literal">null</span>) &#123; </span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;/ListBookServlet&quot;</span>; </span><br><span class="line">            resp.sendRedirect(url); <span class="keyword">return</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> BookDB.getBook(id); </span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession(); </span><br><span class="line">        <span class="type">List</span> <span class="variable">cart</span> <span class="operator">=</span> (List)session.getAttribute(<span class="string">&quot;cart&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (cart == <span class="literal">null</span>) &#123; </span><br><span class="line">            cart = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); </span><br><span class="line">            session.setAttribute(<span class="string">&quot;cart&quot;</span>, cart); </span><br><span class="line">        &#125; </span><br><span class="line">        cart.add(book); </span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;JSESSIONID&quot;</span>, session.getId()); </span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span> * <span class="number">30</span>); </span><br><span class="line">        cookie.setPath(<span class="string">&quot;/chapter06&quot;</span>); </span><br><span class="line">        resp.addCookie(cookie); </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;BookServlet&quot;</span>; </span><br><span class="line">        resp.sendRedirect(url); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h2 id="七、B-S系统作业7"><a href="#七、B-S系统作业7" class="headerlink" title="七、B/S系统作业7"></a><span id="jump27">七、B/S系统作业7</span></h2><details class="folding-tag" ><summary> 7 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 7-1 </summary>              <div class='content'>              <p>、(A)<br>在一个Cookie对象中，若调用了setMaxAge(0)方法，表示（）<br>A、将Cookie的持久化时间设置为0，意味着删除Cookie<br>B、Cookie永久生效<br>C、Cookie在10分钟后失效<br>D、Cookie在30分钟后失效</p><hr><p>2、(C)<br>下列选项中，正确设置Set-Cookie响应头字段的是（）<br>A、Set-Cookie; user=itcast; Path=/;<br>B、Set-Cookie user=itcast; Path=/;<br>C、Set-Cookie: user=itcast; Path=/;<br>D、Set-Cookie: user=itcast Path=/;</p><hr><p>3、(C)<br>下列对于setMaxAge(-1)方法的描述中，正确的是（）<br>A、表示通知浏览器保存这个Cookie信息<br>B、表示通知浏览器立即删除这个Cookie信息<br>C、表示当浏览器关闭时，Cookie信息会被删除<br>D、以上都不正确</p><hr><p>4、(D)<br>下列关于Cookie和Session的描述中，错误的是（ ）<br>A、 Cookie和HttpSession是保存会话相关数据的技术，其中Cookie将信息存储在浏览器端是客户端技术，Session将数据保存在服务器端是服务器端技术<br>B、HttpSession会话对象的默认保持时间可以修改<br>C、HttpSession默认是基于Cookie运作的<br>D、浏览器可以接受任意多个Cookie信息保存任意长的时间</p><hr><p>5、(A)<br>下列选项中，可以更改Cookie的存活时间的是（）<br>A、 cookie.setMaxAge(3600*24);<br>B、cookie.setPath(“/app”);<br>C、cookie.setDomain(“localhost”);<br>D、cookie.setValue(“share”);</p><hr><p>6、(D)<br>下列选项中，客户端在一次会话过程中可以发送的请求次数是（）<br>A、0<br>B、1<br>C、2<br>D、多次</p><hr><p>7、(B)<br>下列选项中，关于Cookie中保存的数据，说法正确的是（ ）<br>A、保存在服务器中<br>B、保存在客户端浏览器中<br>C、保存在数据库中<br>D、以上说法都不对</p><hr><p>8、(B)<br>下面关于setMaxAge(int expires)方法参数默认值的描述中，正确的是（）<br>A、默认值是1<br>B、默认值是-1<br>C、默认值是0<br>D、默认值是无穷大</p><hr><p>9、(B)<br>下列选项中，能够用于获取客户端所有cookie对象的方法是（ ）<br>A、List cookies = request.getCookies();<br>B、Cookie[] cookies = request.getCookies();<br>C、List cookies = response.getCookies();<br>D、Cookie[] cookies = response.getCookies();</p><hr><p>10、(C)<br>下面选项中，哪个方法可以用于设置Cookie的有效域（）<br>A、String setPath(String pattern)<br>B、void setPath(String pattern)<br>C、void setDomain(String pattern)<br>D、String setDomain(String pattern)</p>              </div>            </details><hr><h3 id="（2）多选题-8"><a href="#（2）多选题-8" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 7-2 </summary>              <div class='content'>              <p>11、(A B C D)<br>下列关于Cookie的说法中正确的是（）<br>A、Cookie是基于HTTP协议中的Set-Cookie响应头和Cookie请求头进行工作的<br>B、浏览器对Cookie具有严格的限制，一个网站能在浏览器中保存多少Cookie是有限制的<br>C、默认情况下HttpSession是基于一个名称为JSESSIONID 的特殊Cookie工作的<br>D、一个浏览器可能保存着多个名称为JSESSIONID的Cookie</p>              </div>            </details><hr><h3 id="（3）判断题-8"><a href="#（3）判断题-8" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 7-3 </summary>              <div class='content'>              <p>12、(T)<br>Cookie的domain属性是用来指定浏览器访问的域，设置domain属性时必须以”.”开头。</p><hr><p>13、(F)<br>Cookie的domain属性是用来指定浏览器访问的域，设置domain属性时严格区分大小写。</p><hr><p>14、(T)<br>Servlet提供了两个用于保存会话数据的对象，分别是Cookie和Session。</p><p>—<br>15、(T)<br>如果想让某个Cookie项对站点的所有目录下的访问路径都有效，应调用Cookie对象的setPath()方法将其Path属性设置为”/“。</p><hr><p>16、(F)<br>Cookie的path属性设置后，只对当前访问路径所属的目录有效。</p><hr><p>17、(T)<br>Servlet API中提供了一个javax.servlet.http.Cookie类，该类提供了操作Cookie的属性与方法，Cookie类有且仅有一个构造方法。</p><hr><p>18、(T)<br>无论浏览器是否支持Cookie，服务器都会在第一次响应的页面中对URL地址进行重写。</p>              </div>            </details><hr><h3 id="（4）填空题-4"><a href="#（4）填空题-4" class="headerlink" title="（4）填空题"></a>（4）填空题</h3><details class="folding-tag" ><summary> 7-4 </summary>              <div class='content'>              <p>19、服务器向客户端发送Cookie时，会在HTTP响应头字段中增加<u>set-cookie</u>响应头字段。<br>20、在Web应用中，一个客户端（浏览器）与Web服务器之间连续发生的一系列请求和响应过程称为<u>会话</u>。<br>21、在Servlet技术中，提供了两个用于保存会话数据的对象，分别是<u>Cookie</u>和Session。<br>22、Cookie技术用于将会话过程中的数据保存到客户端或<u>浏览器</u>中。</p>              </div>            </details><hr><h3 id="（5）简答题-3"><a href="#（5）简答题-3" class="headerlink" title="（5）简答题"></a>（5）简答题</h3><details class="folding-tag" ><summary> 7-5 </summary>              <div class='content'>              <p>23、简述什么是会话技术？</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>会话过程类似于生活中的打电话过程,它指的是一个客户端(浏览器)与Web服务器之间连续发生的一系列请求和响应过程.在Servlet技术中,提供了两个用于保存会话数据的对象,分别是Cookie和Session</p>              </div>            </details>              </div>            </details><hr><h2 id="六、B-S系统作业6"><a href="#六、B-S系统作业6" class="headerlink" title="六、B/S系统作业6"></a><span id="jump26">六、B/S系统作业6</span></h2><details class="folding-tag" ><summary> 6 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 6-1 </summary>              <div class='content'>              <p>1、(A)<br>ServletRequest接口中用于获取请求客户端的IP地址的方法是（）<br>A、getRemoteAddr()<br>B、getRemoteHost()<br>C、getRemotePort()<br>D、getLocalAddr()</p><hr><p>2、(B)<br>request对象的哪个方法是根据组件名称获取提交数据的（）<br>A、getParameterValues()<br>B、getParameter()<br>C、getHeaderNames()<br>D、getRequestURI()</p><hr><p>3、(B)<br>下列选择中，用于封装HTTP请求消息的是（）<br>A、HttpServlet类<br>B、HttpServletRequest接口<br>C、HttpServletResponse接口<br>D、ServletContext接口</p><hr><p>4、(A)<br>关于ServletRequest对象的setAttribute()方法，说法正确的是（）<br>A、如果ServletRequest对象中已经存在指定名称的属性，setAttribute()方法将会先删除原来的属性，然后再添加新的属性<br>B、如果ServletRequest对象中已经存在指定名称的属性，setAttribute()方法将会将新添加的属性直接覆盖原来的属性<br>C、如果ServletRequest对象中已经存在指定名称的属性，setAttribute()方法会直接在原来的属性后面追加上新的属性<br>D、以上说法都不正确</p><hr><p>5、(B)<br>关于getParameter(String name)获取请求参数方法的说法中，正确的是（）<br>A、如果请求消息中没有包含指定名称的参数，getParameter()方法返回空字符串<br>B、如果请求消息中没有包含指定名称的参数，getParameter()方法返回null<br>C、如果请求消息中包含多个指定名称的参数，getParameter()方法返回最后一个出现的参数值<br>D、如果请求消息中包含多个指定名称的参数，getParameter()方法返回任意一个参数</p>              </div>            </details><hr><h3 id="（2）判断题"><a href="#（2）判断题" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 6-2 </summary>              <div class='content'>              <p>6、(F)<br>在getIntHeader(String name)方法中，如果指定的头字段不存在，返回值为0。</p><hr><p>7、(T)<br>设置request对象的解码方式，可以使用setCharacterEncoding()方法。</p><hr><p>8、(F)<br>HttpServletResponse接口的sendError(int sc)方法会向客户端发出一条错误信息。</p><hr><p>9、(T)<br>Web服务器接收到客户端的请求后，可能由于某些条件限制，不能访问当前请求URL所指向的Web资源，而是指定了一个新的资源路径，让客户端重新发送请求，这就是请求重定向。</p><hr><p>10、(T)<br>WEB-INF目录中的内容对RequestDispatcher对象是可见的。</p><hr><p>11、(T)<br>HTTP请求消息中可以有多个相同名称的参数。</p><hr><p>12、(T)<br>如果发送到客户端的内容是jpeg格式的图像数据，就需要将响应头字段的类型设置为“image/jpeg”。</p><hr><p>13、(T)<br>在多数情况下，一个头字段在请求消息中只出现一次，但有时候可能出现多次。</p><hr><p>14、(T)<br>ServletRequest接口的setAttribute()方法用于将一个对象与一个name关联后存储进ServletRequest对象中。</p><hr><p>15、(F)<br>Response对象的getOutputStream()和getWriter()方法可以同时发送响应消息体。</p><hr><p>16、(T)<br>getOutputStream()方法所获取的字节输出流对象为ServletOutputStream类型。</p>              </div>            </details><hr><h3 id="（3）填空题"><a href="#（3）填空题" class="headerlink" title="（3）填空题"></a>（3）填空题</h3><details class="folding-tag" ><summary> 6-3 </summary>              <div class='content'>              <p>17、为了实现请求<u>重定向</u>，HttpServletResponse接口定义了一个sendRedirect( )方法。</p><p>18、Servlet API中，专门用来封装HTTP响应消息的接口是<u>HttpServletResponse</u>。</p><p>19、如果当前Web资源不想处理请求，RequestDispatcher接口提供了一个forward()方法，该方法可以将当前请求传递给其他Web资源对这些信息进行处理并响应给客户端，这种方式称为<u>请求转发</u>。</p>              </div>            </details><hr><h3 id="（4）简答题-1"><a href="#（4）简答题-1" class="headerlink" title="（4）简答题"></a>（4）简答题</h3><details class="folding-tag" ><summary> 6-4 </summary>              <div class='content'>              <p>46、请按照以下要求设计一个向页面输出中文的类ChineseServlet。要求如下： （1）创建一个ChineseServlet类，使其继承HttpServlet类并重写该类的doGet()方法。 （2）在doGet()方法中，使用HttpServletResponse对象的setContentType()方法将浏览器编码改为utf-8。 （3）使用HttpServletResponse对象获取输出流，向浏览器输出“JavaWeb程序设计任务教程”的中文字样。</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@WebServlet(name = &quot;ChineseServlet&quot;,urlPatterns=&quot;ChineseServlet&quot;)</span><br><span class="line">public class ChineseServlet extends HttpServlet &#123;</span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException,IOException &#123;</span><br><span class="line">        String data=&quot;JavaWeb程序设计任务教程&quot;;</span><br><span class="line">        response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line">        PrintWriter out = response.getWriter(); out.println(data);</span><br><span class="line">    &#125;</span><br><span class="line">public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException,IOException &#123;</span><br><span class="line">doGet(request,response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h2 id="五、B-S系统作业5"><a href="#五、B-S系统作业5" class="headerlink" title="五、B/S系统作业5"></a><span id="jump25">五、B/S系统作业5</span></h2><details class="folding-tag" ><summary> 5 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 5-1 </summary>              <div class='content'>              <p>1、(D)<br>下面选项中，与web应用具有相同的生命周期的对象是（）<br>A、Servlet<br>B、ServletConfig<br>C、GenericServlet<br>D、ServletContext</p><hr><p>2、(A)<br>Servlet程序的入口点是（）<br>A、init()<br>B、main()<br>C、service()<br>D、doGet()</p><hr><p>3、(B)<br>关于servlet生命周期描述错误的是（）<br>A、Servlet的每一次访问请求，Servlet容器都会调用一次Servlet的service( )方法<br>B、服务器启动时就会创建Servlet<br>C、Servlet的生命周期可以由init，service，destory 3个方法体现<br>D、每请求一次Servlet就会调用一次service方法，但init方法只会调用一次</p><hr><p>4、(C)<br>HttpServlet类中，用来处理POST请求的方法是（）<br>A、doHead<br>B、doGet<br>C、doPost<br>D、doPut</p><hr><p>5、(B)<br>下列关于ServletContext的说法中，错误的是（）<br>A、ServletContext对象用来保存当前Web应用中的所有信息<br>B、在一个Web应用中可以有多个ServletContext对象<br>C、ServletContext接口封装了获取当前Web应用中资源文件的方法<br>D、ServletContext对象中保存的属性可以被Web应用中的所有Servlet访问</p><hr><p>6、(C)<br>下列关于Servlet接口的说法中，正确的是（）<br>A、Servlet接口中只有一个默认的实现类HttpServlet<br>B、Servlet接口中定义了4个抽象方法<br>C、Servlet接口的抽象方法中，init()、service()和destroy()方法可以表现Servlet的生命周期<br>D、GenericServlet类不是Servlet接口的实现类</p><hr><p>7、(A)<br>下列选项关于Servlet的作用说法正确的是（）<br>A、处理客户端请求并做出响应<br>B、打开并显示网页内容<br>C、连接数据库<br>D、页面跳转</p><hr><p>8、(D)<br>Servlet接口中的service()方法，说法错误的是（）<br>A、当容器接收到客户端访问Servlet对象的请求时，就会调用此方法<br>B、服务器请求一次，service方法就被调用一次<br>C、service方法有两个参数，request和response<br>D、request负责响应信息，response负责接收参数</p><hr><p>9、(B)<br>下面选项中, 用于实现一个Web应用中的所有Servlet共享数据的对象是（）<br>A、HttpSession<br>B、ServletContext<br>C、ServletConfig<br>D、ServletRequest</p><hr><p>10、(A)<br>下面关于Servlet的技术特点，正确的是（）<br>A、功能强大<br>B、不可移植<br>C、安全性不高<br>D、不可扩展</p><hr><p>11、(B)<br>下列哪一个方法用于设置HttpServletResponse的响应内容类型（）<br>A、setParameter()<br>B、setContentType()<br>C、setAttribute()<br>D、doPost()</p><hr><p>12、(A)<br>以下哪一个方法可以解决post请求时传递的中文参数乱码问题（）<br>A、req.setCharacterEncoding(“utf-8”);<br>B、new String( req.getParameter(key).getBytes() , “utf-8” );<br>C、resp.setContentType(“text/html;charset=utf-8”);<br>D、resp.getOutputStream( )</p><hr><p>13、(C)<br>从以下哪一个选项中可以获得Servlet的初始化参数（）<br>A、Servlet<br>B、ServletContext<br>C、ServletConfig<br>D、GenericServlet</p><hr><p>14、(D)<br>程序中创建了一个Servlet，该Servlet重写了其父类的doGet()和doPost()方法，那么其父类可能是 ()<br>A、RequestDispatcher<br>B、HttpServletResponse<br>C、HttpServletRequest<br>D、HttpServlet</p><hr><p>15、(B)<br>LoginServlet是一个Servlet类，代码如下 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class LoginServlet extends ___________ &#123; </span><br><span class="line">public void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; … &#125; </span><br><span class="line">public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; … &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下划线处应填写（）</p><p>A、Servlet<br>B、HttpServlet<br>C、GenericServlet<br>D、Cookie</p>              </div>            </details><hr><h3 id="（2）多选题-9"><a href="#（2）多选题-9" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 5-2 </summary>              <div class='content'>              <p>16、(C D)<br>下面关于Servlet的描述正确的是（）<br>A、在浏览器的地址栏直接输入要请求的Servlet，该Servlet默认会使用doPost方法处理请求<br>B、Servlet是运行在客户端的程序<br>C、Servlet的生命周期包括初始化、运行、销毁<br>D、Servlet可以直接向浏览器发送HTML标签</p>              </div>            </details><hr><h3 id="（3）判断题-9"><a href="#（3）判断题-9" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 5-3 </summary>              <div class='content'>              <p>17、(T)<br>Servlet 对象主要封装了对HTTP请求的处理，并且它的运行需要Servlet容器的支持。</p><hr><p>18、(T)<br>Servlet主要用于服务器端。</p><hr><p>19、(F)<br>Servlet不需要部署就可以直接使用。</p><hr><p>20、(F)<br>创建好的Servlet，客户端可以对其进行直接访问。</p><hr><p>21、(T)<br>一个Servlet可以匹配多个URL。</p><hr><p>22、(T)<br>ServletConfig对象是由Web容器（或Tomcat）创建出来的。</p><hr><p>23、(T)<br>当Tomcat初始化一个Servlet时，会将该Servlet的配置信息封装到一个ServletConfig对象。</p><hr><p>24、(F)<br>在Servlet的整个生命周期中，destroy()方法会被调用多次。</p><hr><p>25、(T)<br>定义@WebServlet 注解时，value 或者 urlPatterns 属性通常是必需的，但二者不能共存。</p><hr><p>26、(T)<br>Servlet对象一旦创建就会驻留在内存中等待客户端的访问，直到服务器关闭，或Web应用被移除出容器时Servlet对象才会被销毁。</p>              </div>            </details><hr><h3 id="（4）填空题-5"><a href="#（4）填空题-5" class="headerlink" title="（4）填空题"></a>（4）填空题</h3><details class="folding-tag" ><summary> 5-4 </summary>              <div class='content'>              <p>27、<u>ServletContext</u>对象可以实现多个Servlet数据的共享。</p><p>28、Servlet的配置主要有两种方式，分别是通过Web应用的配置文件<br><u>web.xml</u>来完成配置和使用@WebServlet注解的方式完成。</p><p>29、ServletContext接口可以获取Web应用程序的<br><u>初始化</u>参数。</p><p>30、Servlet的生命周期大致可以分为三个阶段，分别是初始化阶段、运行阶段和<u>销毁阶段</u>。</p>              </div>            </details>              </div>            </details><hr><h2 id="四、B-S系统作业4"><a href="#四、B-S系统作业4" class="headerlink" title="四、B/S系统作业4"></a><span id="jump24">四、B/S系统作业4</span></h2><details class="folding-tag" ><summary> 4 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 4-1 </summary>              <div class='content'>              <p>1、(C)<br>下列消息头中，可以屏蔽恶意访问的是（ ）<br>A、Location<br>B、Refresh<br>C、Referer<br>D、If-Modified-Since</p><hr><p>2、(B)<br>下列关于响应头和状态码的设置中，能够实现客户端重定向的方式是（）。<br>A、Location与200一起使用<br>B、Accept-Location与302一起使用<br>C、Location与307一起使用<br>D、Accept-Location与307一起使用</p><hr><p>3、(C)</p><p>下面关于Refresh头字段的说法中正确的是（）<br>A、Refresh头字段的时间值是以毫秒为时间单位<br>B、Refresh头字段中时间值与URL之间用空格隔开<br>C、Refresh头字段是告诉浏览器在指定的时间值后跳转到其他网页<br>D、以上说法都不正确</p><hr><p>4、(C)</p><p>下面选项中，可以实现浏览器重定向的状态码是（）</p><p>A、100<br>B、200<br>C、302<br>D、304</p><hr><p>5、(D)<br>关于HTTP协议的GET与POST请求，下列选项中错误的是（）<br>A、GET方式传输数据的大小有限制<br>B、POST方式可以传输更大的数据<br>C、GET方式会将请求参数显示在地址栏中<br>D、HTTP协议的请求方式只有GET和POST</p><hr><p>6、(D)</p><p>关于提交大量数据时，form表单的method属性取值是（ ）<br>A、delete<br>B、get<br>C、put<br>D、post</p><hr><p>7、(A)</p><p>下列选项，关于HTTP消息描述正确的是（）<br>A、HTTP请求消息和HTTP响应消息统称为HTTP消息<br>B、浏览器向服务器发送数据称为HTTP响应消息<br>C、服务器向浏览器发送数据称为HTTP请求消息<br>D、在HTTP消息中，所有信息对用户都是不可见的</p><hr><p>8、(B)<br>以下不属于HTTP请求方法的是（）<br>A、GET<br>B、SETC<br>C、PUT<br>D、POST</p><hr><p>9、(B)</p><p>下列选择中，关于Accept-Encoding和Accept消息头的说法正确的是（）。<br>A、Accept请求头指定的MIME类型是指解压前的实体内容类型<br>B、Accept请求头指定的MIME类型是指解压后的实体内容类型<br>C、Accept-Encoding消息头指定的是实体内容压缩的大小<br>D、Accept-Encoding消息头指定的是实体内容压缩的类型</p><hr><p>10、(D)</p><p>下面选项中，HTTP协议的GET请求方法可以获取的数据包括以下哪几种类型（）<br>A、HTML文档<br>B、视频<br>C、图片<br>D、以上都可以</p><hr><p>11、(C)</p><p>下面选项中，表示服务器内部错误的状态码是（）</p><p>A、100</p><p>B、500</p><p>C、404</p><p>D、303</p><hr><p>12、(B)</p><p>下列选项中，能在浏览器地址栏中看到表单提交的数据的请求方式是（）<br>A、submit<br>B、GET<br>C、POST<br>D、out</p><hr><p>13、(D)</p><p>下面选项中，表示服务器发生错误的状态码是（）<br>2分<br>A、200<br>B、404<br>C、304<br>D、500</p><hr><p>14、(D)</p><p>下列选项中，不是HTTP响应消息头字段的是（）</p><p>A、Location<br>B、Proxy-Authenticate<br>C、Server<br>D、Content</p><hr><p>15、(D)</p><p>下列选项中，用于指定客户端支持的某个国家或地区语言的页面的请求头的是（ ）<br>A、Accept-Charset<br>B、Accept<br>C、Accept-Encoding<br>D、Accept-Language</p><hr><p>16、(C)</p><p>下列请求方式中，请求方式传输数据大小无限制的是（）<br>A、GET<br>B、POST<br>C、HELD<br>D、PUT</p><hr><p>17、(A)</p><p>下面关于HTTP响应消息的说法中正确的是（）<br>A、一个完整的响应消息主要包括响应状态行、响应消息头和实体内容<br>B、一个完整的响应消息主要包括响应消息头和实体内容<br>C、一个完整的响应消息只包括响应消息头和实体内容<br>D、以上说法都正确</p><hr><p>18、(C)</p><p>在一个Web应用中有页面index.html，具体代码如下。 <code>&lt;html&gt;&lt;body&gt; &lt;img src=&quot;/image01.jpg&quot;&gt; &lt;img src=&quot;/image02.jpg&quot;&gt; &lt;img src=&quot;/image03.jpg&quot;&gt; &lt;/body&gt;&lt;/html&gt;</code> 基于HTTP 1.0协议访问该页面时，浏览器会发出几次请求( )。<br>A、1<br>B、2<br>C、3<br>D、4</p><hr><p>19、(A)</p><p>下列选项中，不是标准的HTTP消息头字段的是（）<br>A、Status<br>B、Host<br>C、Accept<br>D、Referer</p>              </div>            </details><hr><h3 id="（2）多选题-10"><a href="#（2）多选题-10" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 4-2 </summary>              <div class='content'>              <p>20、(A B C)<br>关于HTTP 1.1优点的描述，下列说法正确的是（）。<br>A、客户端向服务器发送多个请求时，无需等待上次请求的返回结果<br>B、减少了浏览器与服务器交互所需的时间<br>C、在一个TCP连接上可以传送多个HTTP请求和响应<br>D、建立一个TCP连接后，只能传送1个HTTP请求和响应</p><hr><p>21、(A C D)</p><p>下面关于POST请求的说法中，正确的是（）。<br>A、post方式传可以传输大数据<br>B、post方式会将请求信息在地址栏上显示<br>C、post方式不会将请求信息在地址栏上显示<br>D、post方式提交数据相对于get方式安全些</p><hr><p>22、(B C)</p><p>下面关于响应头字段的说法中，正确的是（）。<br>A、Location头字段中的URL值是一个使用相对路径的URL地址<br>B、Refresh头字段的作用是告诉浏览器自动刷新页面的时间<br>C、使用Content-Disposition头字段可以让用户选择将响应的实体内容保存到一个文件中，而不是浏览器直接处理相应的实体内容<br>D、以上说法都不正确</p><hr><p>23、(B D)</p><p>下列关于GET请求的说法中，错误的是（）<br>A、get方式传输数据大小有限制<br>B、get方式传输数据大小没有限制<br>C、get方式会将请求信息在地址栏上显示<br>D、get方式提交数据比post方式更安全</p><hr><p>24、(A B C D)</p><p>下面关于HTTP协议的说法中，正确的是（）。<br>A、HTTP是Hyper Text Transfer Protocol的缩写，即超文本传输协议<br>B、HTTP是一种请求/响应式的协议<br>C、客户端向服务器端发送一个请求，被称作HTTP请求<br>D、服务器端接收到请求后会做出响应，称为HTTP响应</p><hr><p>25、(B C D)</p><p>下面选项中，说明浏览器允许接收图片的请求消息头有哪些？（）<br>A、Accept: text/html<br>B、Accept: image/gif<br>C、Accept: image/<em><br>D、Accept: </em>/*</p>              </div>            </details><hr><h3 id="（3）判断题-10"><a href="#（3）判断题-10" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 4-3 </summary>              <div class='content'>              <p>26、(T)</p><p>基于HTTP 1.0协议的客户端与服务器在交互的过程中需要经过建立连接、发送请求信息、回送响应信息、关闭连接4个步骤。</p><hr><p>27、(T)</p><p>HTTP响应状态行包括：HTTP版本、一个表示成功或错误的整数代码（状态码）和对状态码进行描述的文本信息3个部分。</p><hr><p>28、(T)</p><p>HTTP的状态码反应Web服务器处理客户端请求的状态，如果客户端显示的状态码是500，表示服务器内部出现错误，无法处理请求。</p><hr><p>29、(T)</p><p>Location头字段用于通知客户端获取请求文档的新地址，其值为一个使用绝对路径的URL地址。</p><hr><p>30、(F)</p><p>客户端向服务器请求服务时，请求方式只有GET、POST两种。</p><hr><p>31、(T)</p><p>HTTP是一个客户端请求（用户）和服务器应答（网站）标准，它作为一种应用层协议，应用于分布式、协作式和超媒体信息系统。</p><hr><p>32、(T)</p><p>在HTTP消息头中不能同时出现Location和Content-Type这两个头字段。</p><hr><p>33、(T)</p><p>POST请求方式比GET请求方式更安全。</p><hr><p>34、(T)</p><p>HTTP传输的数据类型是由Content-Type标记的。</p><hr><p>35、(F)</p><p>HTTP是无状态协议。</p><hr><p>36、(T)</p><p>如果网页上的form表单不设置method属性，浏览器默认使用GET请求方式发送请求。</p><hr><p>37、(T)</p><p>客户通常使用HTML表单向服务器的页面提交信息。</p><hr><p>38、(F)</p><p>当使用Accept-Language头字段指定多个国家的语言时，语言之间用分号分隔。</p><hr><p>39、(T)</p><p>HTTP请求头中Accept字段用来指定客户端可以接收的媒体类型，在设置时只能指定一种类型。</p><hr><p>40、(T)</p><p>HTTP请求头中的Accept-Charset字段用于指定客户端可以接收的字符编码，但是只能指定一种编码。</p>              </div>            </details><hr><h3 id="（4）填空题-6"><a href="#（4）填空题-6" class="headerlink" title="（4）填空题"></a>（4）填空题</h3><details class="folding-tag" ><summary> 4-4 </summary>              <div class='content'>              <p>41、HTTP即<u>超文本传输</u>协议。</p><p>42、在HTTP协议中，一个完整的请求消息是由请求行、<u>请求头</u>和实体内容三部分组成。</p><p>43、Refresh头字段的时间值是以<u>秒</u>为单位的时间数。</p><p>44、HTTP是一种请求/响应式的协议，客户端在与服务器建立连接后，就可以向服务器发送请求，这种请求被称作<u>HTTP请求</u>。</p><p>45、HTTP请求消息的请求行的构成，包括<u>请求方式</u>、资源路径以及所使用的HTTP协议版本。</p>              </div>            </details><hr><h3 id="（5）简答题-4"><a href="#（5）简答题-4" class="headerlink" title="（5）简答题"></a>（5）简答题</h3><details class="folding-tag" ><summary> 4-5 </summary>              <div class='content'>              <p>46、简述POST请求和GET请求有什么不同？</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>(1) POST传输数据大小无限制：由于GET请求方式是通过请求参数传递数据的，所以最多可传递2KB的数据，而POST请求方式是通过实体内容传递数据的，因此可以传递数据的大小没有限制。</p><p>(2) POST比GET请求方式更安全：由于GET请求方式的参数信息都会在URL地址栏明文显示，而POST请求方式传递的参数信息隐藏在实体内容中，用户是看不到的，所以POST比GET请求方式更安全。</p>              </div>            </details>              </div>            </details><hr><h2 id="三、B-S系统作业3"><a href="#三、B-S系统作业3" class="headerlink" title="三、B/S系统作业3"></a><span id="jump23">三、B/S系统作业3</span></h2><details class="folding-tag" ><summary> 3 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 3-1 </summary>              <div class='content'>              <p>1、(A)<br>XML元素的属性与属性之间隔开采用的符号是（）。</p><p>A、空格</p><p>B、逗号</p><p>C、等号</p><p>D、双引号或单引号</p><hr><p>2、(A)<br>下面选项中，在tomcat上发布javaweb应用时，默认在什么目录（）。</p><p>A、webapps</p><p>B、conf</p><p>C、bin</p><p>D、work</p><hr><p>3、(A)</p><p>下列选项中，启动Tomcat的命令startup.bat，放在哪个目录中（）</p><p>A、bin</p><p>B、lib</p><p>C、webapps</p><p>D、work</p><hr><p>4、(A)</p><p>下列XML文档声明的格式中，正确的是（）。</p><p>A、<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;GBK&quot; ?&gt;</code></p><p>B、&lt;?xml version=”1.0” encoding=”GBK”&gt;</p><p>C、&lt;!xml version=”1.0”encoding=”GBK” !&gt;</p><p>D、&lt;! —xml version=”1.0” encoding=”GBK” —!&gt;</p><hr><p>5、(C)<br>在<Tomcat8.x安装目录>\bin文件夹中，双击下列哪个脚本文件可以启动Tomcat服务器？（ ）</p><p>A、service.bat</p><p>B、shutdown.bat</p><p>C、startup.bat</p><p>D、tomcat8.exe</p><hr><p>6、(C)</p><p>下列选项中，关于配置JAVA_HOME环境变量的具体步骤，正确的是（）。</p><p>A、打开环境变量，配置path参数</p><p>B、打开环境变量，配置classpath参数</p><p>C、打开环境变量，新建JAVA_HOME参数并配置值为JDK安装目录</p><p>D、以上说法都不对</p><hr><p>7、(C)</p><p>下列选项中，可以成功修改Tomcat端口号为80的是（）。</p><p>A、<code>&lt;Connect port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</code></p><p>B、<code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</code></p><p>C、<code>&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</code></p><p>D、<code>&lt;Connect port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</code></p><hr><p>8、(B)<br>安装tomcat成功后，要修改tomcat端口，要修改的文件是（）。</p><p>A、tomcat/bin/startup.bat文件</p><p>B、tomcat/conf/server.xml</p><p>C、tomcat/conf/web.xml</p><p>D、以上都不是</p><hr><p>9、(C)</p><p>关于Tomcat安装目录的子目录描述，错误的是（）。</p><p>A、bin：用于存放Tomcat的可执行文件和脚本文件</p><p>B、conf：用于存放Tomcat的各种配置文件</p><p>C、lib：用于存放Tomcat服务器和Web应用程序需要访问的DLL文件</p><p>D、webapps：Web应用程序的主要发布目录</p><hr><p>10、(C)</p><p>关于Tomcat的介绍，正确的是（）。</p><p>A、Tomcat运行稳定并且可靠，但是效率比较低</p><p>B、Tomcat不能作为独立的Web服务器软件</p><p>C、Tomcat是Apache组织的Jakarta项目中的一个重要的子项目，它的源代码是完全公开的</p><p>D、Tomcat中并没有提供数据库连接池的功能</p><hr><p>11、(B)</p><p>下列关于XML的描述中，正确的是（）。</p><p>A、所有的XML元素都必须是小写的</p><p>B、所有XML元素都必须正确地关闭</p><p>C、所有XML文档都必须有DTD</p><p>D、以上说法都正确</p><hr><p>12、(C)</p><p>请阅读下列代码： <code>&lt;customer_summary xmlns:addr=&quot;http://www.xyz.com/addresses/&quot; xmlns:books=&quot;http://www.zyx.com/books/&quot; &gt; &lt;addr:name&gt;&lt;title&gt;Mrs.&lt;/title&gt;&lt;/addr:name&gt; &lt;books:title&gt;Lord of the Rings&lt;/books:title&gt;</code> 上述是一段关于XML命名空间的实例片段，以下说法错误的是（）</p><p>A、本例中，命名空间的前缀分别是 addr、books</p><p>B、第一个 <code>&lt;title&gt;</code> 元素属于 addr 名称空间，因为其父元素 <code>&lt;addr:Name&gt;</code> 属于该名称空间</p><p>C、名称空间中定义的字符串必须是可以访问的URL，比如：XML 解析器会到 <a href="http://www.zyx.com/books/">http://www.zyx.com/books/</a> 去搜索 DTD 或schema</p><p>D、名称空间的缩写需要在定义之后才能使用</p><hr><p>13、(A)</p><p>关于C/S体系架构的缺点，正确的是（）</p><p>A、C/S架构的客户端程序是安装在客户机上的，使用的人数越多，安装的工作量越大</p><p>B、对C/S架构的客户端进行修改时，维护起来比较方便</p><p>C、C/S架构的客户端程序可以同时运行的数量不受限制</p><p>D、C/S架构的客户端程序是间接与数据库服务器端建立连接的</p>              </div>            </details><hr><h3 id="（2）多选题-11"><a href="#（2）多选题-11" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 3-2 </summary>              <div class='content'>              <p>14、(A B C)<br>下列选项中，可以在XML文档声明中使用的属性有（）。</p><p>A、version</p><p>B、encoding</p><p>C、standalone</p><p>D、name</p><hr><p>15、(A B C)</p><p>下列选项中，可能导致Tomcat不能启动成功的是( )。</p><p>A、没有安装JDK</p><p>B、Tomcat与JDK的版本不匹配（例如Tomcat6.x要求使用JDK1.5或以上版本）</p><p>C、没有配置JAVA_HOME系统环境变量</p><p>D、没有安装浏览器</p><hr><p>16、(A B C)</p><p>下面关于在IntelliJ DEA中创建一个Java Web项目并部署在Tomcat服务器中的说法，正确的是（）。</p><p>A、classes和lib文件夹是放在web文件夹下的WEB-INF文件夹下</p><p>B、Tomcat可以设置 默认端口8080或改为其他的</p><p>C、可以在【Run/Debug Configuration】窗口的【Application context】文本框中修改浏览器中项目访问路路径</p><p>D、tomcat 启动时必须配置CATALINA_HOME环境变量</p><hr><p>17、(A B C D)</p><p>下列关于XML和HTML区别的描述中，正确的是（）。</p><p>A、HTML中的标记是用来显示数据的，而XML中的标记用来描述数据的性质和结构</p><p>B、HTML是不区分大小写的，而XML是严格区分大小写的</p><p>C、HTML可以有多个根元素，而格式良好的XML有且只能有一个根元素</p><p>D、HTML中，属性值的引号是可用可不用的，而XML中，属性值必须放在引号中</p>              </div>            </details><hr><h3 id="（3）判断题-11"><a href="#（3）判断题-11" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 3-3 </summary>              <div class='content'>              <p>18、(T)</p><p>XML文档的注释以字符串“<code>&lt;!--”开始，以字符串“--&gt;</code>”结束。</p><hr><p>19、(T)</p><p>Tomcat服务器默认的端口号是8080。</p><hr><p>20、(T)</p><p>B/S架构中，浏览器并不是直接与数据库服务器建立连接，而是通过Web服务器与数据库服务器需要建立连接。</p><hr><p>21、(T)</p><p>如果Tomcat使用默认端口号，Tomcat成功启动后，在浏览器地址栏中输入<a href="http://localhost:8080将能够访问Tomcat首页。">http://localhost:8080将能够访问Tomcat首页。</a></p><hr><p>22、(T)</p><p>在XML声明中必须包含version属性，且该属性必须放在XML声明中其他属性之前。</p><hr><p>23、(T)</p><p>Tomcat的webapps目录是Web应用程序的主要发布目录，通常将要发布的应用程序放到这个目录下。</p><hr><p>24、(T)</p><p>C/S体系架构的客户端程序是直接与数据库服务器端建立联系的。</p><hr><p>25、(F)</p><p>在命名XML元素时，元素是不区分大小写的。</p><hr><p>26、(T)</p><p>XML文档的声明必须位于文档的第一行。</p><hr><p>27、(T)</p><p>XML文档声明的语法格式为：<code>&lt;?xml版本信息[编码信息][文档独立性信息]?&gt;</code> 。</p>              </div>            </details><hr><h3 id="（4）填空题-7"><a href="#（4）填空题-7" class="headerlink" title="（4）填空题"></a>（4）填空题</h3><details class="folding-tag" ><summary> 3-4 </summary>              <div class='content'>              <p>28、B/S是Browser/Server的缩写，即<u>浏览器/服务器</u>架构。</p><p>29、在命令行窗口输入<u>netstat -na</u>命令，可以查看本机运行的程序都占用了哪些端口号。</p><p>30、在XML声明中，可以通过standalone属性来声明这个文档是否为独立的文档。默认情况下，standalone属性的值为<u>no</u>。</p><p>31、在XML文档中，元素一般由开始标签、属性、<u>元素内容</u>和结束标签构成。</p>              </div>            </details><hr><h3 id="（5）简答题-5"><a href="#（5）简答题-5" class="headerlink" title="（5）简答题"></a>（5）简答题</h3><details class="folding-tag" ><summary> 3-5 </summary>              <div class='content'>              <p>32、请列举出Tomcat安装目录下的子目录，并对其进行简要说明。</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>(1) bin：用于存放Tomcat的可执行文件和脚本文件(扩展名为bat的文件),如tomcat8.exe、startup.ba。<br>(2) conf：用于存放Tomcat的各种配置文件,如web.xml、server.xml。<br>(3) lib：用于存放Tomcat服务器和所有Web应用程序需要访问的JAR文件。<br>(4) logs：用于存放Tomcat的日志文件。<br>(5) temp：用于存放Tomcat运行时产生的临时文件。<br>(6) webapps：Web应用程序的主要发布目录,通常将要发布的应用程序放到这个目录下。<br>(7) work：Tomcat的工作目录,JSP编译生成的Servlet源文件和字节码文件放到这个目录下。</p><hr><p>33、简述XML和HTML的区别。</p><h4 id="答案：-1"><a href="#答案：-1" class="headerlink" title="答案："></a>答案：</h4><p>(1) HTML用于显示数据，XML用于传输和存储数据。<br>(2) HTML标签不区分大小写，而XML标签严格区分大小写。<br>(3) HTML可以有多个根元素，而格式良好的XML有且只能有一个根元素。<br>(4) HTML中空格是自动过滤的，而在XML中空格不会自动过滤。<br>(5) HTML中的标签是预定义的标签，而XML中的标签可以根据需要自己定义，并且可扩展。</p>              </div>            </details>              </div>            </details><hr><h2 id="二、B-S系统作业2"><a href="#二、B-S系统作业2" class="headerlink" title="二、B/S系统作业2"></a><span id="jump22">二、B/S系统作业2</span></h2><details class="folding-tag" ><summary> 2 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 2-1 </summary>              <div class='content'>              <p>1、(B)<br>下列选项中，不属于表单标记<code>&lt;form&gt;</code>常用属性的是（）。<br>A、action<br>B、 size<br>C、method<br>D、name</p><hr><p>2、(D)<br>关于JavaScript常用对象的说法，正确的是( )。<br>A、使用window对象时，不能省略window对象的名称<br>B、Date对象提供了直接访问日期的属性<br>C、Date对象的getDay()方法返回值星期为1-7<br>D、String对象在创建对象实例后才能使用</p><hr><p>3、(A)<br>下列关于面包屑导航的说法中，正确的是( )。<br>A、面包屑导航仅由文本和链接组成的一行代码构成，占用空间小<br>B、面包屑导航无法为导航层次自动添加分隔符<br>C、面包屑导航使用起来比较繁琐<br>D、面包屑导航无法使用户清晰地看到当前所处位置</p>              </div>            </details><hr><h3 id="（2）多选题-12"><a href="#（2）多选题-12" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 2-2 </summary>              <div class='content'>              <p>4、(A B D)<br>下列选项中，属于Bootstrap框架特点的是（）。<br>A、响应式设计<br>B、 CSS预编译<br>C、高成本<br>D、丰富的组件库</p><hr><p>5、(A B D)<br>在HTML中，可以引入JavaScript代码方式是（）。<br>A、行内式<br>B、 内嵌式<br>C、导入式<br>D、外链式</p><hr><p>6、(B C D)<br>下列代码中，哪个正确定义了JavaScript函数？（）<br>A、function (a, b) {return a <em> b;}<br>B、 function myDemo(a, b) {return a </em> b};<br>C、var x = function (a, b) {return a <em> b;}<br>D、var x = function myDemo(a, b) {return a </em> b};</p><hr><p>7、(A B D)<br>下列属于浏览器对象模型的是（）。<br>A、document<br>B、 location<br>C、element<br>D、history</p>              </div>            </details><hr><h3 id="（3）判断题-12"><a href="#（3）判断题-12" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 2-3 </summary>              <div class='content'>              <p>8、(T)</p><p>在<code>&lt;a&gt;</code>标签中，定义类名为page-link，表示页码标签。</p><hr><p>9、(T)</p><p>调用事件处理程序主要分为在JavaScript中调用和在HTML中调用两种。</p><hr><p>10、(T)</p><p>在<code>&lt;input&gt;</code>标签中，设置form-control类名，可以对标签的样式进行优化。</p><hr><p>11、(F)</p><p>HTML DOM模型可以看作是一个树形结构，树的根节点是Element对象。</p><hr><p>12、(T)</p><p>Bootstrap框架常用于开发响应式布局和移动设备优先的Web项目。</p><hr><p>13、(T)</p><p><code>&lt;button /&gt;</code>中，添加text-nowrap类可以实现按钮文本非自动换行。</p><hr><p>14、(T)</p><p>在Bootstrap目录的基本结构中，bootstrap.min.*一类的文件代表的是已经过压缩的文件。</p><hr><p>15、(T)</p><p>在实现按钮时，如果按钮中的文本内容超出了按钮的宽度，默认情况下，按钮中的内容会自动换行排列，如果不希望按钮文本换行，可以在按钮中添加text-nowrap类。</p><hr><p>16、(F)</p><p>对于JavaScript中的引号，只能使用单引号。</p><hr><p>17、(T)</p><p>阅读下面代码： <code>&lt;ul class=&quot;list-group&quot;&gt; &lt;li class=&quot;list-group-item active&quot;&gt;列表1&lt;/li&gt; &lt;li class=&quot;list-group-item&quot;&gt;列表2&lt;/li&gt; &lt;li class=&quot;list-group-item&quot;&gt;列表3&lt;/li&gt; &lt;/ul&gt;</code> 上面这段代码表示第一个列表（列表1）处于选中状态。</p>              </div>            </details><hr><h3 id="（4）填空题-8"><a href="#（4）填空题-8" class="headerlink" title="（4）填空题"></a>（4）填空题</h3><details class="folding-tag" ><summary> 2-4 </summary>              <div class='content'>              <p>18、在<code>&lt;a&gt;</code>标签中，可以设置aria-label的属性值为<u>Next</u>，表示下一页。</p><p>19、浏览器对象模型中<u>window</u>，核心对象是对象。 （注意：单词首字母小写）</p><p>20、Bootstrap官网提供了3种下载方式，分别是下载预编译的文件、下载源文件进行手动编译和使用<u>CDN</u>引入。</p><p>21、Bootstrap中，可以展示当前页在导航层次结构中的位置的是<u>面包屑导航</u>。</p><p>22、W3C中将DOM标准分为3部分，分别是<u>核心DOM</u>、XML DOM和HTML DOM。</p>              </div>            </details><hr><h3 id="（5）简答题-6"><a href="#（5）简答题-6" class="headerlink" title="（5）简答题"></a>（5）简答题</h3><details class="folding-tag" ><summary> 2-5 </summary>              <div class='content'>              <p>23、简述什么是JavaScript以及JavaScript的作用。</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>JavaScript是网页中的一种脚本语言，作为一门独立的网页脚本编程语言，JavaScript可以做很多事情，但最主流的应用是在Web上创建网页特效或验证信息。例如使用JavaScript脚本语言对用户输入的内容进行验证。如果用户在注册信息文本框中输入的信息不符合注册要求，或在“确认密码”与“密码”文本框中输入的信息不同，将弹出相应的提示信息。</p>              </div>            </details>              </div>            </details><hr><h2 id="一、B-S系统作业1"><a href="#一、B-S系统作业1" class="headerlink" title="一、B/S系统作业1"></a><span id="jump21">一、B/S系统作业1</span></h2><details class="folding-tag" ><summary> 1 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 1-1 </summary>              <div class='content'>              <p>1、(B)</p><p>下列关于<code>&lt;body&gt;</code>标签，说法正确的是（）。</p><p>A、一个HTML文档可以含有一对以上的<code>&lt;body&gt;</code>标签</p><p>B、<code>&lt;body&gt;</code>标签位于<code>&lt;html&gt;</code>标签外</p><p>C、<code>&lt;head&gt;</code>标签可以位于<code>&lt;html&gt;</code>标签外</p><p>D、浏览器中显示的所有文本、图像、音频和视频等信息都必须位于<code>&lt;body&gt;</code>标签内</p><hr><p>2、(A)</p><p>下列标签属于换行标签的是（）。</p><p>A、<code>&lt;br /&gt;</code></p><p>B、<code>&lt;p /&gt;</code></p><p>C、<code>&lt;span&gt;</code></p><p>D、<code>&lt;form&gt;</code></p><hr><p>3、(D)<br>在HTML中，关于表单的描述错误的是（）。<br>A、以<code>&lt;form&gt;</code>标签开始，以<code>&lt;/form&gt;</code>结束<br>B、属性action是指表单提交的地址<br>C、属性method是指表单提交的方式<br>D、一个网页中只能有一个表单</p><hr><p>4、(A)<br>下面选项中，属于HTML的行内标签的是（）。<br>A、 <code>&lt;span /&gt;</code><br>B、<code>&lt;a /&gt;</code><br>C、<code>&lt;br /&gt;</code><br>D、<code>&lt;p /&gt;</code></p><hr><p>5、(C)<br><code>&lt;a&gt;&lt;/a&gt;</code>标签中target属性可以指定页面的打开方式，下列关于target属性说法正确的是( )。<br>A、target=”_self”是在新窗口打开<br>B、target=”_blank”为默认值，是在原窗口打开<br>C、target=”_parent”是在父框架中打开被链接文件<br>D、target=”_top”是在父框架中打开被链接文件</p><hr><p>6、(B)<br>下列HTML代码中，可以实现超链接的是（）。<br>A、<code>&lt;a name=&quot;bookmark&quot;&gt;text&lt;/a&gt;</code><br>B、<code>&lt;a href=&quot;#bookmark&quot;&gt;text&lt;/a&gt;</code><br>C、<code>&lt;a link=&quot;#bookmark&quot;&gt;text&lt;/a&gt;</code><br>D、<code>&lt;a target=&quot;#bookmark&quot;&gt;text&lt;/a&gt;</code></p><hr><p>7、(D)<br>下列选项中，不是<code>&lt;img /&gt;</code>标记属性的是（）。<br>A、src<br>B、alt<br>C、width<br>D、href</p><hr><p>8、(C)<br>下列关于CSS中颜色的取值方式，错误的是（）。<br>A、预定义的颜色值<br>B、十六进制<br>C、二进制<br>D、RGB代码</p><hr><p>9、(A)<br>关于HTML表单中input元素的TYPE属性值，用于创建重置按钮的是（）。<br>A、reset<br>B、submit<br>C、button<br>D、image</p><hr><p>10、(A)<br>在HTML中，能够实现表格跨列的属性是（）。<br>A、colspan属性<br>B、rowspan属性<br>C、spancol属性<br>D、spanrow属性</p><hr><p>11、(D)<br>在HTML的标签中，可以向网页中插入gif图像文件的是（）。<br>A、<code>&lt;from /&gt;</code><br>B、<code>&lt;body /&gt;</code><br>C、<code>&lt;table /&gt;</code><br>D、<code>&lt;img /&gt;</code></p><hr><p>12、(C)<br>以下关于CSS样式中文本及字体属性的说法，错误的是( )。<br>A、font-size用来设置文本字体的大小<br>B、text-align用来设置文本的对齐方式<br>C、font-type用来设置字体的类型<br>D、font-weight用来设置字体的粗细</p><hr><p>13、(C)<br>阅读下面的代码： <code>&lt;html&gt; &lt;head&gt; &lt;title&gt;选择器&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .red { color: red; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!--类选择器的使用--&gt; &lt;h1 class=&quot;red&quot;&gt;</code>标题一：<code>class=&quot;red&quot;</code>，设置文字为红色。<code>&lt;/h1&gt; &lt;p class=&quot;red font18&quot;&gt;</code> 段落二: <code>class=&quot;red font18&quot;</code>,设置文字为红色，字号为18px。 <code>&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;</code> 下列选项中，对于上述代码中的类选择说法正确的是（）<br>A、“标题一…”与“段落二…”的文本内容都不会显示红色<br>B、 类名“red”前的“.”（英文点号）可以省略<br>C、同一个类选择器可以被多个标签引用<br>D、同一个类选择器不可以被多个标签引用</p><hr><p>14、(C)<br>关于<code>&lt;tr&gt;</code>标签的描述，下列说法正确的是（）。<br>A、tr是表格中的单元格标签<br>B、tr可以单独使用<br>C、tr是表格中的行标签<br>D、tr没有属性</p><hr><p>15、(A)<br>阅读下面CSS代码: .box { margin:10px 5px; margin-right:10px; margin-top:5px; } 下面选项中与该代码段效果等同的是( )。<br>A、.box { margin:5px 10px 10px 5px; }<br>B、.box { margin:5px 10px 0px 0px; }<br>C、.box { margin:5px 10px; }<br>D、.box { margin:10px 5px 10px 5px; }</p><hr><p>16、(A)<br>在<code>&lt;div&gt;</code>标签中关于文本对齐方式，错误的是（ ）。<br>A、居中对齐：<code>&lt;div align=&quot;middle&quot;&gt;…&lt;/div&gt;</code><br>B、居右对齐：<code>&lt;div align=&quot;right&quot;&gt;…&lt;/div&gt;</code><br>C、居左对齐：<code>&lt;div align=&quot;left&quot;&gt;…&lt;/div&gt;</code><br>D、两端对齐：<code>&lt;div align=&quot;justify&quot;&gt;…&lt;/div&gt;</code></p><hr><p>17、(A)<br>下列设置CSS字体样式的代码中，正确的是（ ）。<br>A、{ font-size: 24px;}<br>B、{ font: 24px;}<br>C、{ fontSize: 24px;}<br>D、{ size: 24px;}</p>              </div>            </details><hr><h3 id="（2）多选题-13"><a href="#（2）多选题-13" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 1-2 </summary>              <div class='content'>              <p>18、(A B C)</p><p>在CSS中，使用链入式引入CSS样式表，需要设置的<code>&lt;link /&gt;</code>标签的属性是（）。</p><p>A、href=””</p><p>B、type=“text/css”</p><p>C、rel=”sheetstyle”</p><p>D、rel=”stylesheet”</p>              </div>            </details><hr><h3 id="（3）判断题-13"><a href="#（3）判断题-13" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 1-3 </summary>              <div class='content'>              <p>19、(T)</p><p>在单标签中，标签名与“/”之间的一个空格间隔是不可以省略的。</p><hr><p>20、(F)</p><p><form>标签的action属性用于指定表单提交的地址，该属性的值只能是绝对地址。</p><hr><p>21、(T)</p><p>HTML主要作用是通过HTML标签对网页中的文本、图片、声音等内容进行描述。</p><hr><p>22、(F)</p><p>每一对<code>&lt;ol&gt;&lt;/ol&gt;</code>标签中可以不包含<code>&lt;li&gt;&lt;/li&gt;</code>标签。</p><hr><p>23、(T)</p><p>当一个页面被加载时，<code>&lt;link /&gt;</code>标签引用的CSS样式表将同时被加载，而@import引用的CSS样式表会等到页面全部下载完后才被加载。</p><hr><p>24、(F)</p><p>link标签不给予属性也可以外链css文件，并且有效果。</p><hr><p>25、(T)</p><p>CSS的margin和padding属性最多可以指定4个属性值，各属性值以空格分隔。</p><hr><p>26、(T)</p><p>链入式是使用频率最高，也最实用的CSS样式表，它将HTML代码与CSS代码分离为两个或多个文件，实现了结构和表现的完全分离。</p><hr><p>27、(T)</p><p><code>&lt;input /&gt;</code>标签可以通过type属性来指定不同的控件类型</p><hr><p>28、(F)</p><p>通过对<code>&lt;tr&gt;</code>标记应用属性，可以对表格中的某一个单元格进行控制。</p>              </div>            </details><hr><h3 id="（4）填空题-9"><a href="#（4）填空题-9" class="headerlink" title="（4）填空题"></a>（4）填空题</h3><details class="folding-tag" ><summary> 1-4 </summary>              <div class='content'>              <p>29、HTML中，列表通常分为3类，分别是无序列表、<u>有序列表</u>和定义列表。</p><p>30、<code>&lt;a&gt;</code>标签的<u>href</u>属性用于指定链接指向的页面的URL。</p><p>31、CSS中文译为<u>层叠样式表</u>，是用于（增强）控制网页样式并允许将样式信息与网页内容分离的一种标签性语言。</p><p>32、超文本标记语言简称<u>HTML</u></p><p>33、CSS样式包括内联式、内嵌式、外链式和<u>行内式</u></p><p>34、通常将HTML标签分为三大类，分别是单标签、<u>双标签</u>和注释标签。</p><p>35、表单主要由3部分构成，分别是表单控件、提示信息和<u>表单域</u></p>              </div>            </details><hr><h3 id="（5）简答题-7"><a href="#（5）简答题-7" class="headerlink" title="（5）简答题"></a>（5）简答题</h3><details class="folding-tag" ><summary> 1-5 </summary>              <div class='content'>              <p>36、请阅读下面无序列表搭建的结构，根据注释中的要求填写代码。 <code>&lt;ul&gt; &lt;li __________________&gt;T恤&lt;/li&gt; &lt;!--指定列表项目符号是空心小圆圈样式--&gt; &lt;li&gt;连衣裙&lt;/li&gt; &lt;li___________________&gt;裤子&lt;/li&gt; &lt;!--指定列表项目符号是小方块样式--&gt; &lt;/ul&gt;</code></p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>(1)type=”circle”</p><p>(2)type=”square”</p>              </div>            </details>              </div>            </details><hr><h1 id="Pyhthon"><a href="#Pyhthon" class="headerlink" title="Pyhthon"></a><span id="jump3">Pyhthon</span></h1><h2 id="十一、第11章-正则表达式"><a href="#十一、第11章-正则表达式" class="headerlink" title="十一、第11章 正则表达式"></a><span id="jump311">十一、第11章 正则表达式</span></h2><details class="folding-tag" ><summary> 11 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 11-1 </summary>              <div class='content'>              <p>1、(C)<br>下列选项中，关于notify_all()方法的描述正确的是（）<br>A、释放线程持有锁的同时挂起线程，直至接收到通知被唤醒或超时<br>B、唤醒一个处于挂起状态的线程<br>C、唤醒所有处于挂起状态的线程<br>D、判断是否满足条件并执行相应操作</p><hr><p>2、(A)<br>下列用于给进程池添加任务，不会阻塞等待任务执行结束的方法是（）<br>A、apply_async()<br>B、apply()<br>C、close()<br>D、join()</p><hr><p>3、(C)<br>下列选项中用于关闭进程池，不再接受新的任务，待所有任务执行完成后进程会退出的方法是（）<br>A、apply_async()<br>B、apply()<br>C、close()<br>D、join()</p><hr><p>4、(D)<br>在get()方法中，参数block值为False时，如果队列为空，程序会出现（）<br>A、等待一段时间后抛出Queue.Full异常<br>B、立即抛出Queue.Full异常<br>C、等待一段时间后抛出Queue.Empty异常<br>D、立即抛出Queue.Empty异常</p><hr><p>5、(D)<br>在Process类中，用于指定要执行目标函数的参数是（）<br>A、group<br>B、target<br>C、name<br>D、args</p><hr><p>6、(B)<br>下列选项中，关于进程的描述正确的是（）<br>A、程序设计语言编写的一系列指令<br>B、操作系统调度并执行的活动实体<br>C、进程的唯一标志<br>D、程序的执行代码</p><hr><p>7、(C)<br>下列选项中，用于创建互斥锁的是（）<br>A、threading.acquire()<br>B、threading.release()<br>C、threading.Lock()<br>D、threading.mutex_lock()</p><hr><p>8、(B)<br>调用release()方法时，互斥锁的状态是（）<br>A、锁定<br>B、非锁定<br>C、上锁<br>D、未上锁</p><hr><p>9、(B)<br>下列选项中，关于notify()方法的描述正确的是（）<br>A、释放线程持有的锁并挂起线程<br>B、唤醒一个处于挂起状态的线程<br>C、唤醒所有处于挂起状态的线程<br>D、判断条件是否满足</p><hr><p>10、(A)<br>在使用Process类创建子进程时，如果没有明确指定进程的名称，那么默认名称是（）<br>A、Process-1<br>B、Process-2<br>C、Process-3<br>D、Process-4</p><hr><p>11、(C)<br>在继承Process类创建子进程时，需要重写的方法是（）<br>A、start()、run()<br>B、init()、execute()<br>C、init()、run()<br>D、start()、execute()</p><hr><p>12、(C)<br>当进程占用CPU资源进行运算、处理和执行指令时处于的状态是（）<br>A、阻塞态<br>B、终止态<br>C、运行态<br>D、就绪态</p><hr><p>13、(A)<br>下列选项中，可能引起线程阻塞的是（）<br>A、接收用户的输入<br>B、完成某个特定的任务<br>C、执行CPU密集型计算<br>D、获得锁资源</p><hr><p>14、(B)<br>RLock类中的_block属性表示的是（）<br>A、锁的内部状态<br>B、当前线程持有锁的次数<br>C、锁是否被其他线程占用<br>D、锁的所有者线程</p><hr><p>15、(C)<br>下列选项中，关于控制块的描述正确的是（）<br>A、存放程序执行代码的内存区域<br>B、存储数据的内存区域<br>C、进程的状态、标识符、优先级等信息的数据结构<br>D、操作系统进行资源分配和调度的基本单位</p><hr><p>16、(A)<br>下列选项中，会产生死锁的行为是（）<br>A、上锁和解锁的次数不相等<br>B、使用互斥锁来操作共享数<br>C、两个线程互相通信<br>D、外力作用导致线程无法执行</p><hr><p>17、(B)<br>线程是系统进行运算调度的最小单位，也被称为（）<br>A、进程<br>B、轻量级进程<br>C、任务<br>D、分支</p><hr><p>18、(A)<br>当适当的条件满足时，挂起态的进程可以再次移回内存，重新进入的状态是（）<br>A、就绪态<br>B、终止态<br>C、阻塞态<br>D、挂起态</p><hr><p>19、(A)<br>下列选项中，关于线程同步机制描述正确的是（）<br>A、线程按预定的次序执行<br>B、线程随机执行<br>C、线程并发执行<br>D、线程穿插执行</p><hr><p>20、(D)<br>使用Pool类的构造方法创建进程池对象时，如果没有指定进程数量，将会使用什么值作为进程数量（）<br>A、0<br>B、1<br>C、None<br>D、根据CPU核心数确定</p><hr><p>21、(C)<br>在程序运行时由操作系统自动创建的第一个进程称为（）<br>A、子进程<br>B、父进程<br>C、主进程<br>D、守护进程</p><hr><p>22、(A)<br>Queue类构造方法中，maxsize参数表示的是（）<br>A、队列中数据的最大长度<br>B、队列中数据的最小长度<br>C、队列中数据的平均长度<br>D、队列中数据的固定长度</p><hr><p>23、(B)<br>Queue类构造方法中，maxsize参数表示的是（）<br>A、队列中数据的最大长度<br>B、队列中数据的最小长度<br>C、队列中数据的平均长度<br>D、队列中数据的固定长度</p><hr><p>23、(B)<br>Queue类构造方法中，maxsize参数表示的是（）<br>A、队列中数据的最大长度<br>B、队列中数据的最小长度<br>C、队列中数据的平均长度<br>D、队列中数据的固定长度</p><hr><p>24、(B)<br>在Process类中，用于指定是否将进程设置为守护进程的参数是（）<br>A、name<br>B、daemon<br>C、target<br>D、kwargs</p><hr><p>25、(D)<br>在使用Process类创建子进程时，可以传递目标函数的参数和关键字参数。这两个参数的类型是（）<br>A、元组、列表<br>B、列表、元组<br>C、字典、元组<br>D、元组、字典</p><hr><p>26、(A)<br>线程同步机制的作用是（）<br>A、可以确保线程按照特定的顺序执行<br>B、可以让线程随机执行<br>C、可以提高线程并发效率<br>D、可以降低线程死锁概率</p><hr><p>27、(A)<br>put()方法中，block参数设为True且timeout参数设为正值时，队列会在什么情况下阻塞（）<br>A、队列已满<br>B、队列为空<br>C、队列中有数据<br>D、队列中无数据</p><hr><p>28、(B)<br>下列选项中，关于join()方法的描述正确的是（）<br>A、阻塞其他线程直到调用该方法的线程结束<br>B、阻塞调用该方法的线程直到其他线程结束<br>C、终止线程的执行<br>D、返回当前线程的名称</p><hr><p>29、(D)<br>下列选项中，关于join()方法的描述正确的是（）<br>A、阻塞其他线程直到调用该方法的线程结束<br>B、阻塞调用该方法的线程直到其他线程结束<br>C、终止线程的执行<br>D、返回当前线程的名称</p>              </div>            </details><hr><h3 id="（2）判断题-1"><a href="#（2）判断题-1" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 11-2 </summary>              <div class='content'>              <p>30、(T)<br>如果两个线程互相使用对方的互斥锁，那么会造成死锁。</p><hr><p>31、(T)<br>线程可以通过Thread类创建线程，也可以通过继承Thread类创建子类来创建线程。</p><hr><p>32、(T)<br>若没有外力作用，处于死锁的线程会一直阻塞下去。</p><hr><p>33、(F)<br>正在与用户交互的进程称为后台进程。</p><hr><p>34、(F)<br>在多线程编程中，默认情况下线程是有固定顺序的。</p><hr><p>35、(T)<br>每个进程中所拥有的数据都是独立的，无法直接与其他进程共享。</p><hr><p>36、(T)<br>队列的作用类似于数据中转站。</p><hr><p>37、(T)<br>在调用fork()函数时，如果出现错误，会返回一个负值。</p><hr><p>38、(F)<br>一个进程只能包含一个线程。</p><hr><p>39、(T)<br>程序是一个静态的实体，它由程序设计语言编写的一系列指令组成。</p>              </div>            </details>              </div>            </details><hr><h2 id="十、第11章-正则表达式"><a href="#十、第11章-正则表达式" class="headerlink" title="十、第11章 正则表达式"></a><span id="jump310">十、第11章 正则表达式</span></h2><details class="folding-tag" ><summary> 10 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 10-1 </summary>              <div class='content'>              <p>1、(C)<br>正则表达式中的预定义字符集”\s”表示的是（）<br>A、匹配下画线或任何字母与数字<br>B、匹配特殊字符<br>C、匹配任意的空白字符<br>D、匹配任意非空白字符的字符</p><hr><p>2、(B)<br>下列选项中，可以从字符串的开头位置开始匹配，匹配成功返回Match对象，否则返回None的是（）<br>A、compile()<br>B、match()<br>C、search()<br>D、split()</p><hr><p>3、(D)<br>re模块中的finditer()函数的作用是（）<br>A、在字符串中查找指定的子串<br>B、从字符串的开始位置检测匹配<br>C、按照指定的正则表达式搜索字符串，并返回所有匹配的结果<br>D、返回一个迭代器对象，可以用于逐个获取匹配结果</p><hr><p>4、(A)<br>阅读下面代码： import re str<em>data = ‘90python </em>-2’ reg = r’<a href="\w|_">A-Za-z_</a>*’ obj<em>pattern = re.compile(reg) match_res = re.search(obj_pattern, str_data) print(match_res.group()) 运行代码，输出的结果是（）<br>A、python<br>B、90python<br>C、90python </em>-2<br>D、_-2</p><hr><p>5、(A)<br>正则表达式中的点字符不能匹配的是（）<br>A、换行符(\n)<br>B、空格<br>C、制表符(\t)<br>D、下画线(_)</p><hr><p>6、(B)<br>下列方法可以获取匹配对象的开始位置的是（）<br>A、group()<br>B、start()<br>C、end()<br>D、span()</p><hr><p>7、(A)<br>search()函数在没有找到匹配项时返回的值是（）<br>A、None<br>B、False<br>C、True<br>D、Error</p><hr><p>8、(B)<br>预定义字符集”\W”与”\w”的区别是（）<br>A、”\W”匹配下画线或任何字母与数字，”\w”匹配特殊字符<br>B、”\W”匹配特殊字符，”\w”与”\W”相反，匹配下画线或任何字母与数字<br>C、”\W”匹配任意非空白字符的字符，”\w”匹配任意的空白字符<br>D、”\W”匹配不出现在单词边界的元素，”\w”匹配单词的边界</p><hr><p>9、(D)<br>match()函数返回对象包含的信息为（）<br>A、span和match<br>B、value和index<br>C、count和length<br>D、start和end</p><hr><p>10、(D)<br>下列关于re模块中部分函数的功能，说法错误的是（）<br>A、match()函数从字符串开始位置检测<br>B、search()函数从字符串任意位置检测<br>C、findall()函数会以列表形式将匹配结果返回<br>D、finditer()函数会以列表形式将匹配结果返回</p><hr><p>11、(A)<br>预定义字符集”\d”在正则表达式中表示的是（）<br>A、匹配任意数字<br>B、匹配下画线或任何字母与数字<br>C、匹配任意非数字的字符<br>D、匹配单词的边界</p><hr><p>12、(A)<br>下列选项中，关于sub()函数的描述正确的是（）<br>A、替换目标字符串中的匹配项<br>B、在目标字符串中查找指定的子串<br>C、返回所有匹配的结果<br>D、返回一个迭代器对象，可以用于逐个获取匹配结果</p><hr><p>13、(C)<br>findall()函数返回值的数据类型是（）<br>A、字符串类型<br>B、整数类型<br>C、列表类型<br>D、迭代器类型</p><hr><p>14、(A)<br>字符组”[]”在正则表达式中的功能是（）<br>A、匹配其中出现的任意一个字符<br>B、匹配字符串的结尾<br>C、表示范围，比如1-5表示匹配1、2、3、4、5<br>D、匹配其前导字符0次或1次</p><hr><p>15、(B)<br>如果想要忽略英文字母的大小写进行匹配，那么re.compile()函数的参数flags值为（）<br>A、re.I<br>B、re.L<br>C、re.M<br>D、re.S</p><hr><p>16、(B)<br>若使用非贪婪匹配方式对字符串进行匹配，结果会是（）<br>A、匹配最后一个字符<br>B、匹配尽量多的字符<br>C、匹配第一个字符<br>D、匹配空字符串</p><hr><p>17、(B)<br>预定义字符集”\A”在正则表达式中表示的是（）<br>A、仅匹配字符串的结尾<br>B、仅匹配字符串的开头<br>C、匹配任意数字<br>D、匹配单词的边界</p><hr><p>18、(C)<br>Python中正则表达式的默认匹配方式是（）<br>A、贪婪匹配<br>B、非贪婪匹配<br>C、匹配所有匹配项<br>D、只匹配第一个匹配项</p><hr><p>19、(B)<br>正则表达式中的脱字符”^”表示的是（）<br>A、匹配字符串的结尾<br>B、匹配字符串的开头<br>C、匹配任意一个字符<br>D、匹配多个模式中的任意一个</p><hr><p>20、(B)<br>下列选项中，关于subn()函数的描述正确的是（）<br>A、替换后的字符串<br>B、替换结果和替换次数的元组<br>C、匹配项的个数<br>D、None</p><hr><p>21、(C)<br>匹配对象Match中返回值span属性表示的是（）<br>A、匹配对象在目标字符串中的开始位置<br>B、匹配对象在目标字符串中的结束位置<br>C、匹配对象在目标字符串中的起始位置和结束位置<br>D、匹配对象在目标字符串中的长度</p><hr><p>22、(A)<br>元字符”?”在正则表达式中表示的是（）<br>A、匹配其前导字符0次或1次<br>B、匹配其前导字符0次或多次<br>C、匹配其前导字符1次或多次<br>D、匹配字符串的开头</p><hr><p>23、(D)<br>search()函数与match()函数的主要区别是（）<br>A、search()函数只匹配整个字符串<br>B、search()函数匹配开头部分的字符串<br>C、search()函数只匹配最后一个满足模式的子字符串<br>D、search()函数匹配任意位置的字符串</p><hr><p>24、(D)<br>在Python中，对正则表达式进行预编译，并返回一个Pattern对象的函数是（）<br>A、match()<br>B、search()<br>C、findall()<br>D、compile()</p><hr><p>25、(C)<br>连接符”|”在正则表达式中的作用是（）<br>A、匹配任意一个字符<br>B、匹配字符串的结尾<br>C、将多个模式进行逻辑连接，匹配任意一个模式<br>D、表示范围，比如1-5表示匹配1、2、3、4、5</p>              </div>            </details><hr><h3 id="（2）判断题-2"><a href="#（2）判断题-2" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 10-2 </summary>              <div class='content'>              <p>26、(T)<br>如果findall()函数未匹配到任何结果，返回结果为空列表。</p><hr><p>27、(T)<br>split()函数用于将目标字符串按照指定的正则表达式模式进行分割。</p><hr><p>28、(F)<br>finditer()函数返回的结果是字符串类型。</p><hr><p>29、(T)<br>当正则表达式中包含子组时，Python解释器会将每个子组的匹配结果临时存储到缓冲区中。</p><hr><p>30、(T)<br>sub()函数和subn()函数默认替换所有的匹配项。</p><hr><p>31、(F)<br>split()函数的第一个参数pattern表示待匹配的目标字符串。</p><hr><p>32、(F)<br>findall()函数在搜索时，会忽略大小写。</p><hr><p>33、(T)<br>正则表达式中预定义了一些字符集，字符集由元字符和普通字符表示的匹配规则。</p><hr><p>34、(T)<br>元字符指具有特殊含义的专用字符，可以用来规定其前导字符在目标对象中出现的模式。</p>              </div>            </details>              </div>            </details><hr><h2 id="九、第10章-错误和异常"><a href="#九、第10章-错误和异常" class="headerlink" title="九、第10章 错误和异常"></a><span id="jump39">九、第10章 错误和异常</span></h2><details class="folding-tag" ><summary> 9 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 9-1 </summary>              <div class='content'>              <p>1、(A)<br>下列选项，关于自定义异常的描述正确的是（）<br>A、自定义的异常类可以更好地描述特定异常情况<br>B、Python内置异常类无法满足所有编程需求<br>C、自定义异常类可以提高代码的可读性<br>D、自定义异常类可以修复Python内置异常类的缺陷</p><hr><p>2、(C)<br>当程序执行try-except-else语句时，若try子句的代码没有产生任何异常，则会执行的代码是（）<br>A、except子句<br>B、try子句<br>C、else子句<br>D、没有可执行的代码</p><hr><p>3、(B)<br>在Python中，当一个函数调用了另一个函数，并且被调用的函数抛出了异常，该异常会如何传递（）<br>A、被调用的函数会自动处理异常，不会向上层函数传递<br>B、异常会向上层函数传递，直到遇到try-except语句或传递到主程序<br>C、异常会被忽略，程序会继续执行下一行代码<br>D、异常会导致程序崩溃，无法传递到其他函数</p><hr><p>4、(A)<br>如果一个异常没有在当前函数内被捕获，该异常如何处理（）<br>A、异常会传递到上一层调用函数<br>B、异常会被永久忽略，程序会继续执行<br>C、异常会导致程序崩溃，无法传递到其他函数<br>D、异常会被自动处理，程序不会受影响</p><hr><p>5、(D)<br>下列选项中，关于assert断言语言的描述正确的是（）<br>A、检查代码是否能够正确执行<br>B、引发Error异常<br>C、显示自定义的异常描述信息<br>D、判断一个表达式的真假</p><hr><p>6、(C)<br>如果上一级代码块仍然没有处理异常，该异常会如何处理（）<br>A、异常会被自动处理<br>B、异常会被忽略<br>C、异常会传递给更高级的代码块<br>D、程序会立即崩溃</p><hr><p>7、(A)<br>下列选项中，表示程序中使用了超出序列范围的索引时引发的异常是（）<br>A、IndexError<br>B、ZeroDivisionError<br>C、KeyError<br>D、TypeError</p><hr><p>8、(B)<br>下列关于try-except的说法，错误的是（ ）<br>A、try子句中如果没有发生异常，则忽略except子句中的代码<br>B、程序捕获到异常会先执行except语句，再执行try语句<br>C、执行try语句下的代码，如果引发异常，则执行过程会调到except语句<br>D、except可以指定错误的异常类型</p><hr><p>9、(D)<br>下列哪种错误是在代码的语法上是正确的，但逻辑上存在问题导致程序无法按预期执行（）<br>A、语法错误<br>B、运行错误<br>C、异常<br>D、逻辑错误</p><hr><p>10、(C)<br>为什么在某些情况下可以使用with语句替代try-except-finally语句（）<br>A、with语句可以更好地捕获异常<br>B、with语句可以提供更多的异常处理选项<br>C、with语句可以简化代码，同时保证资源的释放<br>D、try-except-finally语句无法处理异常情况</p><hr><p>11、(A)<br>阅读下面代码： num_one = 9 num_two = 0 print(num_one/num_two) 运行代码，Python解释器抛出的异常是（）<br>A、ZeroDivisionError<br>B、SyntaxError<br>C、FloatingPointError<br>D、OverflowError</p><hr><p>12、(C)<br>在程序开发测试阶段，是否推荐使用assert断言语句（）<br>A、是，能够确保代码的正确性<br>B、否，断言会导致程序崩溃<br>C、是，可以提前发现代码错误<br>D、否，assert语句会影响程序性能</p><hr><p>13、(A)<br>在try-except-else语句中，else子句中是否可以引发新的异常（）<br>A、可以，在else子句中可以使用raise语句引发新的异常<br>B、不可以，else子句只能用于执行没有异常时的代码<br>C、可以，但是在else子句中引发的异常会被finally子句捕获<br>D、不可以，在else子句中引发的异常会终止整个try-except-else语句的执行</p><hr><p>14、(A)<br>上下文管理器对象在with语句中的作用是（）<br>A、调用<strong>enter</strong>()方法获取资源对象<br>B、调用<strong>exit</strong>()方法释放资源对象<br>C、定义资源对象的属性和方法<br>D、捕获异常并处理错误情况</p><hr><p>15、(C)<br>下列选项中，可以使用raise语句重新引发刚刚发生的异常的是（）<br>A、raise 异常类<br>B、raise 异常类对象<br>C、raise<br>D、以上都不对</p><hr><p>16、(B)<br>下列哪种raise语句的格式会创建一个异常类的对象并引发异常（）<br>A、raise 异常类<br>B、raise 异常类对象<br>C、raise<br>D、以上都不对</p><hr><p>17、(C)<br>使用自定义异常的目的是（）<br>A、可以提高代码的执行效率<br>B、可以减少代码的复杂性<br>C、可以捕获特定的异常情况<br>D、自定义异常类对程序没有实际影响</p><hr><p>18、(C)<br>下列哪种错误是由于违反了Python语法规则而引起的（）<br>A、逻辑错误<br>B、编译错误<br>C、语法错误<br>D、运行错误</p><hr><p>19、(C)<br>下列哪种类型的错误可以在代码被解释器执行之前检测出来（）<br>A、逻辑错误<br>B、运行错误<br>C、语法错误<br>D、异常错误</p><hr><p>20、(C)<br>默认情况下，当Python程序中产生了异常且当前代码块没有处理该异常时，该异常会如何处理（）<br>A、异常会被自动处理<br>B、异常会被忽略<br>C、异常会传递给调用它的上一级代码块<br>D、程序会立即崩溃</p>              </div>            </details><hr><h3 id="（2）判断题-3"><a href="#（2）判断题-3" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 9-2 </summary>              <div class='content'>              <p>21、(T)<br>使用raise语句可以引发特定异常。</p><hr><p>22、<br>try-except语句中只能有一个except子句。</p><hr><p>23、(T)<br>逻辑错误是指代码在语法上是正确的，但逻辑上存在问题，导致程序无法按照预期的方式执行。</p><hr><p>24、(T)<br>assert语句用于判定一个表达式是否为假。</p><hr><p>25、(T)<br>如果except后面指定包含多个异常类的元组，那么此时程序会捕获与异常类对应的多个异常。</p><hr><p>26、(T)<br>当try子句的代码没有产生任何异常时，finally子句的代码仍会执行。</p><hr><p>27、(T)<br>当程序中有语法错误时会引发SyntaxError异常。</p><hr><p>28、(T)<br>with语句适用于对资源进行访问的场合。</p><hr><p>29、(F)<br>当程序捕获到异常并执行了对应的except语句后，程序会继续执行try块中引发异常之后的代码。</p>              </div>            </details>              </div>            </details><hr><h2 id="八、第8章-模块"><a href="#八、第8章-模块" class="headerlink" title="八、第8章 模块"></a><span id="jump38">八、第8章 模块</span></h2><details class="folding-tag" ><summary> 8 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 8-1 </summary>              <div class='content'>              <p>1、(A)<br>在使用import语句导入包中的模块时，需要在模块名的前面加上的是（）<br>A、包名<br>B、模块名<br>C、函数名<br>D、变量名</p><hr><p>2、(C)<br>下列选项中，关于pip工具的描述正确的是（）<br>A、下载Python解释器<br>B、管理内置模块<br>C、下载和安装第三方模块<br>D、运行Python脚本</p><hr><p>3、(A)<br>自定义模块需要将自行编写的功能性代码存放在的文件是（）<br>A、.py<br>B、.txt<br>C、.exe<br>D、.doc</p><hr><p>4、(C)<br>下列选项中，用于绘制图形的模块是（）<br>A、os<br>B、random<br>C、turtle<br>D、time</p><hr><p>5、(A)<br>使用import语句导入包中的模块后，使用模块中的函数的格式为（）<br>A、包名.模块名.函数名()<br>B、模块名.函数名()<br>C、函数名()<br>D、变量名.函数名()</p><hr><p>6、(A)<br>使用import语句导入模块时，多个模块之间使用分隔的符号是（）<br>A、逗号分隔<br>B、分号分隔<br>C、冒号分隔<br>D、空格分隔</p><hr><p>7、(A)<br>在开发程序过程中，使用模块的好处是（）<br>A、提高开发效率<br>B、优化代码质量<br>C、扩展Python语言的功能<br>D、扩大开发者社区</p><hr><p>8、(D)<br>下列导入模块的语句中，编写错误的是（ ）<br>A、import random<br>B、from random import random<br>C、from random import *<br>D、from random</p><hr><p>9、(B)<br>安装指定版本的模块使用的命令为（）<br>A、pip install 模块名<br>B、pip install 模块名==版本号<br>C、pip install 模块名&gt;=版本号<br>D、pip install 模块名&lt;=版本号</p><hr><p>10、(A)<br>当一个Python文件作为独立执行的脚本运行时，该文件中的<code>__name__</code>变量的值是（）<br>A、<code>&quot;__main__&quot;</code><br>B、”Python”<br>C、文件的名称（不包括文件扩展名）<br>D、文件所在的路径</p><hr><p>11、(D)<br>下列选项中，用于随机获取序列中的某个元素是（）<br>A、random()<br>B、shuffle()<br>C、sample()<br>D、choice()</p><hr><p>12、(C)<br>当一个Python文件作为模块被导入到其他文件中时，该文件中的<code>__name__</code>变量的值是（）<br>A、<code>&quot;__main__&quot;</code><br>B、”Python”<br>C、文件的名称（不包括文件扩展名）<br>D、文件所在的路径</p><hr><p>13、(B)<br>下列选项中，用于返回指定区间随机整数的是（）<br>A、random()<br>B、randint()<br>C、uniform()<br>D、randrange()</p><hr><p>14、(A)<br>下列选项中，用于获取时间戳的函数是（）<br>A、time()<br>B、localtime()<br>C、mktime()<br>D、strftime()</p><hr><p>15、(D)<br>在使用未安装的第三方模块时，需要先执行的是（）<br>A、下载源代码<br>B、编写安装脚本<br>C、手动复制文件到项目目录<br>D、安装模块</p><hr><p>16、(C)<br>使用from…import…语句导入包中的模块后，使用模块中函数的格式为（）<br>A、包名.模块名.函数名()<br>B、模块名.函数名()<br>C、函数名()<br>D、变量名.函数名()</p><hr><p>17、(B)<br>下列选项中，属于Python内置模块的是（）<br>A、requests<br>B、os<br>C、pandas<br>D、matplotlib</p><hr><p>18、(B)<br>在Python中，<code>__all__</code>变量作用是（）<br>A、控制模块导入时的别名定义<br>B、定义模块的接口和可导入内容<br>C、存储模块的版本信息<br>D、控制模块的访问权限</p>              </div>            </details><hr><h3 id="（2）判断题-4"><a href="#（2）判断题-4" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 8-2 </summary>              <div class='content'>              <p>19、(T)<br>Python中的包是将功能相近的模块放到同一目录下。</p><hr><p>20、(T)<br><code>__name__</code>变量用于区分模块是被执行还是被导入其他模块。</p><hr><p>21、(F)<br>如果<code>__all__</code>变量存储的列表中只包含模块的部分内容，那么from…import *语句仍会将模块中所有内容导入程序。</p><hr><p>22、(T)<br>Python中一个py文件就是一个模块。</p><hr><p>23、(T)<br>内置模块可以直接使用，不需要安装。</p><hr><p>24、(T)<br>与内置标准模块的导入方式相比，自定义模块也通过import语句和from…import…语句导入。</p><hr><p>25、(F)<br>包结构中的<code>__init__.py</code>文件不能为空。</p>              </div>            </details>              </div>            </details><hr><h2 id="七、第9章-文件与文件路径操作"><a href="#七、第9章-文件与文件路径操作" class="headerlink" title="七、第9章 文件与文件路径操作"></a><span id="jump37">七、第9章 文件与文件路径操作</span></h2><details class="folding-tag" ><summary> 7 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 7-1 </summary>              <div class='content'>              <p>1、(A)<br>下列选项中，可以将文件夹重命名为 new_folder的是（）<br>A、os.rename(“old_folder”, “new_folder”)<br>B、os.rename(“new_folder”, “old_folder”)<br>C、os.rename(“old_folder”, “old_folder/new_folder”)<br>D、os.rename(“new_folder”, “new_folder/old_folder”)</p><hr><p>2、(C)<br>使用os模块中的listdir()函数获取指定目录下的文件或文件夹时，得到的列表会以什么方式排序（）<br>A、按创建时间排序<br>B、按修改时间排序<br>C、按名称字母排序<br>D、随机排序</p><hr><p>3、(B)<br>下列方法中，用于关闭文件的是（）<br>A、open()<br>B、close()<br>C、with<br>D、print()</p><hr><p>4、(D)<br>如果read()方法不指定参数size，那么读取的字符数据个数是（）<br>A、-1字符<br>B、0个字符<br>C、5个字符<br>D、全部数据</p><hr><p>5、(A)<br>write()方法向文件写入数据时，需要使用的模式为（）<br>A、只写模式<br>B、只读模式<br>C、读写模式<br>D、追加写模式</p><hr><p>6、(B)<br>下列选项中，关于seek()方法描述正确的是（）<br>A、获取当前读写指针的位置<br>B、修改读写指针的位置<br>C、关闭文件对象<br>D、获取文件的编码方式</p><hr><p>7、(B)<br>阅读下面的程序： txt_file = open(‘txt_demo.txt’, ‘r’,encoding=’utf-8’) txt_file.seek(16, 0) print(txt_file.read()) 已知txt_demo.txt文件中的内容为“live with smile,we will have harvest!”，执行程序后输出的结果是（ ）。<br>A、we will have harvest!<br>B、live with smile,we will have harvest!<br>C、live with smile<br>D、live with smile,we</p><hr><p>8、(C)<br>下列关于文件读取的说法，错误的是（）<br>A、read()方法可以一次读取文件中所有的数据<br>B、readline()方法一次只能读取一行数据<br>C、readlines()以元组形式返回读取的数据<br>D、readlines()一次可以读取文件中所有数据</p><hr><p>9、(B)<br>若open()函数以只写模式打开不存在的文件，程序会出现的是（）<br>A、创建新的文件<br>B、抛出错误<br>C、重写已存在的文件<br>D、文件打开失败</p><hr><p>10、(B)<br>下列选项中，关于tell()方法描述正确的是（）<br>A、修改读写指针的位置<br>B、获取当前读写指针的位置<br>C、关闭文件对象<br>D、获取文件的大小</p><hr><p>11、(C)<br>在open()函数中，用于指定文件编码方式的参数是（）<br>A、file<br>B、mode<br>C、encoding<br>D、buffering</p><hr><p>12、(B)<br>使用readlines()方法读取文件数据后，返回的数据类型是（）<br>A、字符串<br>B、列表<br>C、字典<br>D、集合</p><hr><p>13、(C)<br>os模块中的abspath()函数用于将相对路径规范化为绝对路径，其作用是（）<br>A、将绝对路径转换为相对路径<br>B、检测目标路径是否为绝对路径<br>C、将相对路径转换为绝对路径<br>D、判断路径是否存在</p><hr><p>14、(A)<br>下列选项中，是open()函数默认打开模式为（）<br>A、只读模式<br>B、只写模式<br>C、追加模式<br>D、二进制模式</p><hr><p>15、(C)<br>下列选项中，关于shutil模块的rmtree()函数的描述正确的是（）<br>A、仅删除指定目录下的文件<br>B、仅删除指定目录，不删除其中的文件<br>C、删除指定目录，并连同其中的文件一起删除<br>D、删除指定目录的所有子目录</p><hr><p>16、(A)<br>使用os模块中的abspath()函数将文件“test.txt”转换为绝对路径的是（）<br>A、os.path.abspath(‘test.txt’)<br>B、os.path.abspath(‘\test.txt’)<br>C、os.path.abspath(‘.\test.txt’)<br>D、os.path.abspath(‘.test.txt’)</p><hr><p>17、(B)<br>若seek()方法中参数from的取值为1时，表示的是（）<br>A、文件开头<br>B、当前位置<br>C、文件末尾<br>D、文件内容</p><hr><p>18、(D)<br>os模块中的isabs()函数用于检测目标路径是否为绝对路径，当目标路径为绝对路径时，该函数返回的是（）<br>A、0<br>B、False<br>C、None<br>D、True</p><hr><p>19、(C)<br>下列关于rename()函数的描述正确的是（）<br>A、删除文件<br>B、复制文件<br>C、重命名文件或文件夹<br>D、创建文件夹</p><hr><p>20、(C)<br>Python中用于将单个字符串写入文件的方法是（）<br>A、read()<br>B、readline()<br>C、write()<br>D、writelines()</p><hr><p>21、(C)<br>mkdir()函数中参数path的作用是（）<br>A、待删除的目录<br>B、待复制的目录<br>C、待创建的目录<br>D、目标目录</p><hr><p>22、(C)<br>下列选项中用于在文件末尾追加数据的是（）<br>A、只读模式<br>B、只写模式<br>C、追加模式<br>D、读取（更新）模式</p><hr><p>23、(C)<br>os模块中的rmdir()函数的作用是（）<br>A、创建目录<br>B、复制目录<br>C、删除目录<br>D、重命名目录</p><hr><p>24、(C)<br>下列选项中，关于read()方法描述正确的是（）<br>A、从指定文件中读取一行数据<br>B、从指定文件中读取指定字符的数据<br>C、一次性读取整个文件的数据<br>D、一次读取指定长度的数据</p><hr><p>25、(C)<br>readlines()方法默认读取文件数据的行数是（）<br>A、0行<br>B、-1行<br>C、全部行<br>D、5行</p><hr><p>26、(A)<br>write()方法成功写入数据后返回值是（）<br>A、字符数量<br>B、行数<br>C、文件大小<br>D、错误信息</p><hr><p>27、(B)<br>下列选项中，属于使用with语句打开文件的好处是（）<br>A、可以省略调用close()方法<br>B、可以自动关闭文件<br>C、可以增加文件的读写权限<br>D、可以减少代码量</p><hr><p>28、(A)<br>使用read()和readlines()方法一次性读取整个文件数据可能会带来的问题是（）<br>A、内存不足<br>B、文件损坏<br>C、读取速度过慢<br>D、读取不完整</p>              </div>            </details><hr><h3 id="（2）判断题-5"><a href="#（2）判断题-5" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 7-2 </summary>              <div class='content'>              <p>29、(T)<br>如果拼接的路径，最后一个路径为空，则生成的路径将以一个“\”结尾。</p><hr><p>30、(T)<br>文件的备份即创建文件的副本。</p><hr><p>31、(T)<br>read()方法可以指定读取的字符数量。</p><hr><p>32、(T)<br>getcwd()函数无需接收任何参数，会返回文件、程序或目录当前所处的路径。</p><hr><p>33、(T)<br>open()函数打开存在的文件，会返回一个文件对象。</p><hr><p>34、(T)<br>如果想要实现文件数据备份，可以先读取文件数据，然后将读取的数据再写入到指定文件中。</p><hr><p>35、(T)<br>writelines()方法只能接收包含字符串的列表。</p><hr><p>36、(F)<br>文件使用完毕之后，可以不关闭，对计算机不会有任何影响。</p><hr><p>37、(T)<br>exists()函数如果返回True，表示检测的路径是有效的。</p>              </div>            </details>              </div>            </details><hr><h2 id="六、第7章-类与面向对象"><a href="#六、第7章-类与面向对象" class="headerlink" title="六、第7章 类与面向对象"></a><span id="jump36">六、第7章 类与面向对象</span></h2><details class="folding-tag" ><summary> 6 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 6-1 </summary>              <div class='content'>              <p>1、(C)<br>下列选项中，调用对象方法格式正确的是（）<br>A、类名.方法名()<br>B、对象名.属性名<br>C、对象名.方法名()<br>D、类名.属性名</p><hr><p>2、(B)<br>下列方法中，用于初始化属性的方法是（）<br>4分<br>A、<code>__del__()</code><br>B、<code>__init__</code></p><p>C、<code>__add__()</code><br>D、<code>__initialization()</code></p><hr><p>3、(A)<br>下列选项中，定义私有属性和私有方法格式正确的是（）<br>4分<br>A、在属性名或方法名之前加上双下划线<br>B、在属性名或方法名之前加上单下划线<br>C、在属性名或方法名之后加上双下划线<br>D、在属性名或方法名之后加上单下划线</p><hr><p>4、(A)<br>下列选项中，关于类的描述错误的是（）<br>A、类只是由方法组成<br>B、类是从具体的事物中把共同的特征抽取出来<br>C、类是具有相同属性和行为的一组对象的集合<br>D、类是找出事物间的共性，抽象出一个概念模型</p><hr><p>5、(A)<br>下列选项中，关于对象的描述错误的是（）<br>A、对象是现实世界中可描述的事物，它必须是有形的<br>B、对象由数据和作用于数据的操作构成一个独立整体<br>C、对象既可以是具体的物理实体的对象，也可以是人为的概念<br>D、从程序设计的角度看，对象是一个程序模块</p><hr><p>6、(A)<br>Python中定义类的关键字是（）<br>A、class<br>B、def<br>C、private<br>D、self</p><hr><p>7、(A)<br>下列关于继承的说法中，描述错误的是（ ）<br>A、Python不支持多继承<br>B、如果一个类有多个父类，该类会继承所有父类的公有成员<br>C、若定义类时没有显式指定父类，则默认继承基类object<br>D、私有属性和私有方法是不能被继承的</p><hr><p>8、(A)<br>子类重写父类方法的方式是（）<br>A、在子类中定义与父类方法同名的方法<br>B、在子类中定义新的方法<br>C、在父类中定义新的方法<br>D、在父类和子类中都定义同名方法</p><hr><p>9、(A)<br>下列选项中，关于多继承的描述正确的是（）<br>A、子类可以继承多个父类的所有属性和方法<br>B、子类只能继承多个父类中的某一个父类的属性和方法<br>C、子类可以单独选择继承多个父类中的属性和方法<br>D、子类不能同时继承多个父类中的属性和方法</p><hr><p>10、(A)<br>下列选项不属于面向对象编程的核心思想是（）<br>A、将问题分解为一系列的步骤，然后使用函数来实现每个步骤对应的功能<br>B、识别出涉及的对象，并将每个对象的特征和行为进行封装<br>C、通过描述对象的行为来描述解决问题的过程<br>D、保证功能的统一性，使得代码更易于维护</p><hr><p>11、(A)<br>下列选项中，属于对象的创建方式是（）<br>A、对象名 = 类名()<br>B、类名 = 对象名()<br>C、对象名 = 方法名()<br>D、方法名 = 对象名()</p><hr><p>12、(A)<br>在定义实例方法时，方法的第一个参数必须是（）<br>A、self<br>B、cls<br>C、obj<br>D、this</p><hr><p>13、(B)<br>在构造方法中定义的属性称为（）<br>A、类属性<br>B、实例属性<br>C、私有属性<br>D、静态属性</p><hr><p>14、(D)<br>下列选项中，关于抽象的描述正确的是（）<br>A、抽象主要是为了使复杂度降低<br>B、抽象是抽取特定实例的共同特征<br>C、抽象主要强调主要特征，忽略次要特征<br>D、以上均正确</p><hr><p>15、(C)<br>下列选项中，关于封装的描述错误的是（）<br>A、封装是面向对象的特性之一<br>B、封装用于将数据和数据处理过程封装成一个整体<br>C、封装目的在于将对象的属性和行为封装起来，便于外界对对象内部数据修改<br>D、封装可以阻止外界对对象内部数据的修改</p><hr><p>16、(C)<br>如果子类重写了父类的方法，但仍希望调用父类中的方法，需要使用的函数是（）<br>A、parent()<br>B、sub()<br>C、super()<br>D、rewrite()</p><hr><p>17、(B)<br>在一个类方法中，修改或访问类属性值的方式是（）<br>A、通过self访问或修改<br>B、通过cls访问或修改<br>C、无法访问或修改<br>D、通过继承访问或修改</p>              </div>            </details><hr><h3 id="（2）判断题-6"><a href="#（2）判断题-6" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 6-2 </summary>              <div class='content'>              <p>18、(T)<br>在 Python 中，多态是指同一个方法在不同对象上具有不同的行为。</p><hr><p>19、(T)<br>类方法的第一个参数为cls，代表类本身。</p><hr><p>20、(T)<br>静态方法中需要以“类名.方法/属性名”的形式访问类的成员。</p><hr><p>21、(F)<br>静态方法更适合与类相关关的操作。</p><hr><p>22、(F)<br>类是对多个对象共同特征的抽象描述，是对象的个体。</p><hr><p>23、(T)<br>在构造方法中定义的属性是实例属性，只能通过对象进行访问。</p><hr><p>24、(T)<br>私有方法同样可以在公有方法中被self调用。</p><hr><p>25、(T)<br>多态指同一个属性或行为在父类及其各派生类中具有不同的语义。</p><hr><p>26、(F)<br>在类的外部可以直接使用私有成员。</p><hr><p>27、(T)<br>面向对象编程的核心是对象，通过描述对象的行为来描述解决问题的过程。</p>              </div>            </details>              </div>            </details><hr><h2 id="五、第6章-函数"><a href="#五、第6章-函数" class="headerlink" title="五、第6章 函数"></a><span id="jump35">五、第6章 函数</span></h2><details class="folding-tag" ><summary> 6 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 5-1 </summary>              <div class='content'>              <p>1、(A)</p><p>下列选项中，关于全局变量描述正确的是（）<br>A、全局变量作用于整个程序<br>B、全局变量只能作用于当前文件<br>C、只能作用于当前文件所有的函数内部<br>D、只能作用于当前文件所有的函数外部</p><hr><p>2、(A)<br>下列选项中，使用关键字参数传参格式正确的是（）<br>A、形参=实参<br>B、实参=形参<br>C、实参:形参<br>D、形参:实参</p><hr><p>3、(B)<br>形参前加上符号“**”的作用是（）<br>A、接收以元组形式打包的多个实参<br>B、接收以字典形式打包的多个实参<br>C、设置默认值<br>D、指定形参的类型</p><hr><p>4、(A)</p><p>下列选项中，关于关键字def的描述正确的是（）<br>A、标识函数定义的开始<br>B、标识函数定义的结束<br>C、标识函数的参数列表<br>D、标识函数的返回值</p><hr><p>5、(C)</p><p>关于递归函数和匿名函数的说法中，下列描述错误的是（ ）<br>A、递归函数就是在函数体中调用了自身的函数<br>B、匿名函数没有函数名<br>C、匿名函数与使用关键字def定义的函数没有区别<br>D、匿名函数中可以使用if语句</p><hr><p>6、(C)</p><p>下列选项中，关于函数文档字符串的描述错误的是（）<br>A、由一对三引号包含的字符串<br>B、用于说明函数的功能及参数含义<br>C、只有在有返回值时可以省略<br>D、有无返回值都可以省略</p><hr><p>7、(B)</p><p>下列选项中，关于使用形参指定默认值的作用的是（）<br>A、确保函数能够顺利执行<br>B、提高代码的可读性和灵活性<br>C、减少函数的参数数量<br>D、避免出现错误</p><hr><p>8、(C)<br>下列选项中，关于局部变量的描述正确的是（）<br>A、局部变量作用于整个程序<br>B、局部变量作用于当前文件<br>C、局部变量作用于定义它的函数内部<br>D、局部变量作用于定义它的函数外部</p><hr><p>9、(B)</p><p>阅读下面程序： num_one = 12 def sum(num_two): global num_one num_one = 90 return num_one + num_two print(sum(10)) 运行代码，输出结果是（）<br>A、102<br>B、100<br>C、22<br>D、12</p><hr><p>10、(A)</p><p>下列选项中，用于计算绝对值的是（）<br>A、abs()<br>B、len()<br>C、map()<br>D、help()</p><hr><p>11、(B)</p><p>下列选项中，关于函数的调用说法正确的是（）<br>A、函数定义完会立即执行<br>B、函数只有在调用后才会执行<br>C、函数只能由程序调用，无法手动调用<br>D、函数的执行与调用无关</p><hr><p>12、(A)</p><p>形参前加上符号“*”的作用是（）<br>A、接收以元组形式打包的多个实参<br>B、接收以字典形式打包的多个实参<br>C、设置默认值<br>D、指定形参的类型</p><hr><p>13、(B)</p><p>下列选项中，用于计算序列长度的是（）<br>A、chr()<br>B、len()<br>C、ord()<br>D、filter()</p><hr><p>14、(B)<br>下列选项中，用于拆分实参字典的是（）<br>A、<em><br>B、*</em><br>C、@<br>D、&amp;</p><hr><p>15、(B)</p><p>调用函数时，传入的参数称为（）<br>A、形参<br>B、实参<br>C、传参<br>D、参数列表</p><hr><p>16、(B)</p><p>若函数定义的参数列表中同时包含带默认值的形参与其他形参，带默认值的形参应该放在参数列表的位置是（）<br>A、参数列表的开头<br>B、参数列表的末尾<br>C、参数列表的中间<br>D、可以放在任意位置</p><hr><p>17、(A)</p><p>下列选项中，关于递归公式的描述正确的是（）<br>A、递归函数的调用语句<br>B、处理原问题以及与原问题规律相同的子问题的表达式<br>C、终止递归的条件<br>D、定义递归函数时使用的关键字</p><hr><p>18、(C)</p><p>下列选项中，用于定义匿名函数的关键字是（）<br>A、func<br>B、function<br>C、lambda<br>D、def</p><hr><p>19、(A)</p><p>下列选项中，用于拆分实参元组的是（）<br>4分<br>A、<em><br>B、*</em><br>C、#<br>D、&amp;</p><hr><p>20、(D)</p><p>下列选项中，关于函数的描述不正确的是（）<br>A、可重复使用的代码<br>B、函数是一种组织好的代码段<br>C、自定义函数和内置函数的调用方式相同<br>D、自定义函数使用关键字function定义</p>              </div>            </details><hr><h3 id="（2）判断题-7"><a href="#（2）判断题-7" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 5-2 </summary>              <div class='content'>              <p>21、(T)</p><p>函数名是函数的唯一标识，遵循变量名的命名规范。</p><hr><p>22、(F)</p><p>局部变量既可以在函数内使用，也可以在函数外使用。</p><hr><p>23、(T)</p><p>局部变量在函数执行完成之后会被销毁。</p><hr><p>24、(T)</p><p>匿名函数的函数体只能包含单个表达式。</p><hr><p>25、(T)</p><p>局部变量是在函数内定义的变量。</p><hr><p>26、(T)</p><p>args和kwargs只是在函数定义中约定俗称的名称，可以使用其他名称。</p><hr><p>27、(T)</p><p>调用函数时可以选择是否给带有默认值的形参传值。</p><hr><p>28、(T)</p><p>调用无参函数时不需要传入任何参数。</p><hr><p>29、(T)</p><p>如果参数为字典，那么解包之后，会获取字典的value值。</p>              </div>            </details>              </div>            </details><hr><h2 id="四、第5章-字典和集合"><a href="#四、第5章-字典和集合" class="headerlink" title="四、第5章 字典和集合"></a><span id="jump34">四、第5章 字典和集合</span></h2><details class="folding-tag" ><summary> 4 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 4-1 </summary>              <div class='content'>              <p>1、(B)</p><p>下列选项中，可以用来获取列表中的最后一个元素的是（）<br>A、my_list[0]<br>B、my_list[-1]<br>C、my_list[len(my_list)]<br>D、my_list[-len(my_list)]</p><hr><p>2、(D)<br>下列选项中，不能向列表添加元素的是（）<br>A、append()<br>B、extend()<br>C、insert()<br>D、pop()</p><hr><p>3、(B)<br>下列选项中，用于在列表末尾一次性添加另一个列表中的所有元素的是（）<br>A、append()<br>B、extend()<br>C、remove()<br>D、pop()</p><hr><p>4、(A)</p><p>下列选项中，一次性可以删除多个元素的是（）<br>A、del<br>B、remove()<br>C、pop()<br>D、all()</p><hr><p>5、(A)</p><p>下列选项中，关于list()函数描述正确的是（）</p><p>A、list()函数可以用来将字符串转换为列表</p><p>B、list()函数可以用来删除列表中指定下标或元素</p><p>C、list()函数可以用来排序列表中的元素</p><p>D、list()函数可以用来连接两个或多个列表</p><hr><p>6、(C)</p><p>下列选项中，用于将元素插入列表的指定位置的是（）</p><p>A、remove()</p><p>B、extend()</p><p>C、insert()</p><p>D、pop()</p><hr><p>7、(C)</p><p>假设元组 my_tuple = (1, 2, 3, 4, 5)，代码x = my_tuple[2]的作用是（）</p><p>A、将元组中索引为 2 的元素删除</p><p>B、将元组中索引为 2 的元素赋给变量 x</p><p>C、将变量 x 替换为元组中索引为 2 的元素</p><p>D、在元组中插入元素 2</p><hr><p>8、(A)</p><p>下面选项可以在列表中指定的索引位置替换元素为”apple”的是（）</p><p>A、my_list.replace(2, “apple”)</p><p>B、my_list.insert(2, “apple”)</p><p>C、my_list[2] = “apple”</p><p>D、my_list.extend(2, “apple”)</p><hr><p>9、(D)</p><p>下列选项中，关于元组的描述说法错误的是（）</p><p>A、元组中可以包含多个元素</p><p>B、元组中可以存储不同元素类型的数据</p><p>C、使用()创建元组时，如果只有一个元素，那么这个元素后面必须有一个逗号</p><p>D、元组中各个元素之间使用、分隔</p><hr><p>10、(A)</p><p>下列选项中，可以获取列表中第二个到第四个元素（包括第二个和第四个）的是（）</p><p>A、my_list[1:4]</p><p>B、my_list[1:3]</p><p>C、my_list[2:4]</p><p>D、my_list[2:3]</p><hr><p>11、(C)</p><p>关于代码my_list[2] = 10的描述正确的是（）<br>A、将列表中索引为 2 的元素删除<br>B、将列表中索引为 10 的元素设置为 2<br>C、将列表中索引为 2 的元素设置为 10<br>D、在列表中插入元素 10</p><hr><p>12、(C)</p><p>下列选项中，创建元组的代码书写正确的是（）</p><p>A、tu_one = tuple(‘1’, ‘2’)</p><p>B、tu_two = (‘q’)</p><p>C、tu_three = (‘on’,)</p><p>D、tu_four = tuple(3, 5)</p><hr><p>13、(C)</p><p>下列选项中，默认情况下会删除列表最后一个元素的是（）</p><p>A、del</p><p>B、remove()</p><p>C、pop()</p><p>D、extend()</p><hr><p>14、(D)<br>下列选项中，不能对列表排序的是（）</p><p>A、sort()</p><p>B、remove()</p><p>C、sorted()</p><p>D、reverse()</p><hr><p>15、(A)</p><p>假设列表num_li = [[0,1], [2], [3, 4]]，可以获取元素2的是（）</p><p>A、num_li[1][0]</p><p>B、num_li[0][1]</p><p>C、num_li[1][1]</p><p>D、num_li[-2]</p><hr><p>16、(D)</p><p>执行代码li01 = list(‘python’)，print(li01)的输出结果是（）</p><p>A、[‘python’]</p><p>B、[‘p’]</p><p>C、[‘n’]</p><p>D、[‘p’, ‘y’, ‘t’, ‘h’, ‘o’, ‘n’]</p><hr><p>17、(B)</p><p>下面选项可以在列表中添加一个元素”apple”的是（）<br>A、my_list.extend(“apple”)<br>B、my_list.append(“apple”)<br>C、my_list.add(“apple”)<br>D、my_list.insert(0, “apple”)</p><hr><p>18、(B)</p><p>下列选项中，关于sort()方法的描述错误的是（）</p><p>A、sort()方法默认升序排序</p><p>B、sort()方法排序后会返回一个新的列表</p><p>C、sort()方法中参数key用于指定排序规则</p><p>D、sort()方法中参数reverse用于设置升序还是降序</p>              </div>            </details><hr><h3 id="（2）判断题-8"><a href="#（2）判断题-8" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 4-2 </summary>              <div class='content'>              <p>19、(T)</p><p>修改列表中的元素可以通过索引获取指定位置的元素并对该元素重新赋值。</p><hr><p>20、(T)</p><p>list()函数接收的参数必须是一个可迭代对象。</p><hr><p>21、(T)</p><p>通过for语句可以遍历输出列表中的元素。</p><hr><p>22、(T)</p><p>列表支持正向索引和反向索引。</p><hr><p>23、(T)</p><p>元组中的元素是不允许被修改的，除非在元组中包含可变类型的数据。</p><hr><p>24、(T)</p><p>嵌套列表的创建方式与普通列表相同。</p><hr><p>25、(F)</p><p>sorted()函数对列表排序是对原列表元素进行排序。</p><hr><p>26、(T)</p><p>pop()方法可以根据索引删除指定的元素。</p><hr><p>27、(T)</p><p>列表是一个可迭代对象。</p>              </div>            </details>              </div>            </details><hr><h2 id="三、第4章-数字类型与字符串"><a href="#三、第4章-数字类型与字符串" class="headerlink" title="三、第4章 数字类型与字符串"></a><span id="jump33">三、第4章 数字类型与字符串</span></h2><details class="folding-tag" ><summary> 3 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 3-1 </summary>              <div class='content'>              <p>1、(B)</p><p>下列选项中，可以用来获取列表中的最后一个元素的是（）</p><p>A、my_list[0]</p><p>B、my_list[-1]</p><p>C、my_list[len(my_list)]</p><p>D、my_list[-len(my_list)]</p><hr><p>2、(D)<br>下列选项中，不能向列表添加元素的是（）</p><p>A、append()</p><p>B、extend()</p><p>C、insert()</p><p>D、pop()</p><hr><p>3、(B)<br>下列选项中，用于在列表末尾一次性添加另一个列表中的所有元素的是（）</p><p>A、append()</p><p>B、extend()</p><p>C、remove()</p><p>D、pop()</p><hr><p>4、(A)</p><p>下列选项中，一次性可以删除多个元素的是（）</p><p>A、del</p><p>B、remove()</p><p>C、pop()</p><p>D、all()</p><hr><p>5、(A)</p><p>下列选项中，关于list()函数描述正确的是（）</p><p>A、list()函数可以用来将字符串转换为列表</p><p>B、list()函数可以用来删除列表中指定下标或元素</p><p>C、list()函数可以用来排序列表中的元素</p><p>D、list()函数可以用来连接两个或多个列表</p><hr><p>6、(C)</p><p>下列选项中，用于将元素插入列表的指定位置的是（）</p><p>A、remove()</p><p>B、extend()</p><p>C、insert()</p><p>D、pop()</p><hr><p>7、(C)</p><p>假设元组 my_tuple = (1, 2, 3, 4, 5)，代码x = my_tuple[2]的作用是（）</p><p>A、将元组中索引为 2 的元素删除</p><p>B、将元组中索引为 2 的元素赋给变量 x</p><p>C、将变量 x 替换为元组中索引为 2 的元素</p><p>D、在元组中插入元素 2</p><hr><p>8、(A)</p><p>下面选项可以在列表中指定的索引位置替换元素为”apple”的是（）</p><p>A、my_list.replace(2, “apple”)</p><p>B、my_list.insert(2, “apple”)</p><p>C、my_list[2] = “apple”</p><p>D、my_list.extend(2, “apple”)</p><hr><p>9、(D)</p><p>下列选项中，关于元组的描述说法错误的是（）</p><p>A、元组中可以包含多个元素</p><p>B、元组中可以存储不同元素类型的数据</p><p>C、使用()创建元组时，如果只有一个元素，那么这个元素后面必须有一个逗号</p><p>D、元组中各个元素之间使用、分隔</p><hr><p>10、(A)</p><p>下列选项中，可以获取列表中第二个到第四个元素（包括第二个和第四个）的是（）</p><p>A、my_list[1:4]</p><p>B、my_list[1:3]</p><p>C、my_list[2:4]</p><p>D、my_list[2:3]</p><hr><p>11、(C)</p><p>关于代码my_list[2] = 10的描述正确的是（）</p><p>A、将列表中索引为 2 的元素删除</p><p>B、将列表中索引为 10 的元素设置为 2</p><p>C、将列表中索引为 2 的元素设置为 10</p><p>D、在列表中插入元素 10</p><hr><p>12、(C)</p><p>下列选项中，创建元组的代码书写正确的是（）</p><p>A、tu_one = tuple(‘1’, ‘2’)</p><p>B、tu_two = (‘q’)</p><p>C、tu_three = (‘on’,)</p><p>D、tu_four = tuple(3, 5)</p><hr><p>13、(C)</p><p>下列选项中，默认情况下会删除列表最后一个元素的是（）</p><p>A、del</p><p>B、remove()</p><p>C、pop()</p><p>D、extend()</p><hr><p>14、(D)<br>下列选项中，不能对列表排序的是（）</p><p>A、sort()</p><p>B、remove()</p><p>C、sorted()</p><p>D、reverse()</p><hr><p>15、(A)</p><p>假设列表num_li = [[0,1], [2], [3, 4]]，可以获取元素2的是（）</p><p>A、num_li[1][0]</p><p>B、num_li[0][1]</p><p>C、num_li[1][1]</p><p>D、num_li[-2]</p><hr><p>16、(D)</p><p>执行代码li01 = list(‘python’)，print(li01)的输出结果是（）</p><p>A、[‘python’]</p><p>B、[‘p’]</p><p>C、[‘n’]</p><p>D、[‘p’, ‘y’, ‘t’, ‘h’, ‘o’, ‘n’]</p><hr><p>17、(B)</p><p>下列选项中，关于sort()方法的描述错误的是（）</p><p>A、sort()方法默认升序排序</p><p>B、sort()方法排序后会返回一个新的列表</p><p>C、sort()方法中参数key用于指定排序规则</p><p>D、sort()方法中参数reverse用于设置升序还是降序</p>              </div>            </details><hr><h3 id="（2）判断题-9"><a href="#（2）判断题-9" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 3-2 </summary>              <div class='content'>              <p>18、(T)</p><p>修改列表中的元素可以通过索引获取指定位置的元素并对该元素重新赋值。</p><hr><p>19、(F)</p><p>list()函数接收的参数必须是一个可迭代对象。</p><hr><p>20、(T)</p><p>通过for语句可以遍历输出列表中的元素。</p><hr><p>21、(T)</p><p>列表支持正向索引和反向索引。</p><hr><p>22、(T)</p><p>元组中的元素是不允许被修改的，除非在元组中包含可变类型的数据。</p><hr><p>23、(T)</p><p>嵌套列表的创建方式与普通列表相同。</p><hr><p>24、(T)</p><p>sorted()函数对列表排序是对原列表元素进行排序。</p><hr><p>25、(F)</p><p>pop()方法可以根据索引删除指定的元素。</p><hr><p>26、(T)</p><p>列表是一个可迭代对象。</p>              </div>            </details>              </div>            </details><hr><h2 id="二、第2章-数字类型与字符串"><a href="#二、第2章-数字类型与字符串" class="headerlink" title="二、第2章 数字类型与字符串"></a><span id="jump32">二、第2章 数字类型与字符串</span></h2><details class="folding-tag" ><summary> 2 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 2-1 </summary>              <div class='content'>              <p>1、(A)</p><p>下列选项中表示按位左移的是（）</p><p>A、&lt;&lt;</p><p>B、&gt;&gt;</p><p>C、$</p><p>D、&amp;</p><hr><p>2、(C)</p><p>下列选项中用于执行整除等的运算符是（）</p><p>A、=/</p><p>B、/=</p><p>C、//=</p><p>D、/</p><hr><p>3、(B)</p><p>在split()方法中，通过哪个参数设置分割次数（）</p><p>A、sep</p><p>B、maxsplit</p><p>C、limit</p><p>D、size</p><hr><p>4、(D)</p><p>下列选项中属于浮点型数据的是（）</p><p>A、0</p><p>B、10</p><p>C、15</p><p>D、3.14</p><hr><p>5、(D)</p><p>下列选项中关于复数类型描述错误的是（）</p><p>A、复数由实部real和虚部imag构成</p><p>B、实部real和虚部的imag都是实数</p><p>C、虚部imag必须有后缀j或J</p><p>D、通过int函数可以创建复数类型数据</p><hr><p>6、(A)</p><p>下列选项中用于执行逻辑或运算的是（）</p><p>A、or</p><p>B、and</p><p>C、not</p><p>D、maybe</p><hr><p>7、(A)</p><p>下列选项中，在format()方法可以保留两位小数的是（）</p><p>A、”{:.2f}”.format(3.1415)</p><p>B、”{2f}”.format(3.1415)</p><p>C、”{:2f}”.format(3.1415)</p><p>D、”{.2f}”.format(3.1415)</p><hr><p>8、(D)<br>下列选项中用于执行幂等的运算符是（）</p><p>A、=</p><p>B、+=</p><p>C、*=</p><p>D、**=</p><hr><p>9、(C)</p><p>下列选项中布尔值为True的是（）</p><p>A、None</p><p>B、0</p><p>C、1</p><p>D、[]</p><hr><p>10、(D)</p><p>下列选项属于Python内置数字类型的是（）</p><p>A、整型</p><p>B、浮点型</p><p>C、复数类型</p><p>D、以上均是</p><hr><p>11、(A)</p><p>下列选项中用于判断两个数是否相等的是（）</p><p>A、==</p><p>B、!=</p><p>C、&gt;</p><p>D、&lt;</p><hr><p>12、(B)</p><p>下列选项中是format()方法中的占位符的是（）</p><p>A、%</p><p>B、{}</p><p>C、#</p><p>D、$</p><hr><p>13、(A)</p><p>下列选项中，用于将右边的值加到左边的操作数，并将结果赋值给左边的操作数的（）</p><p>A、+=</p><p>B、-=</p><p>C、*=</p><p>D、/=</p><hr><p>14、(D)<br>下列选项中，用于将数值类型转换为字符串类型的函数是（）</p><p>A、int()</p><p>B、float()</p><p>C、complex()</p><p>D、str()</p><hr><p>15、(B)</p><p>下列选项中运算符优先级最低的是（）</p><p>A、%</p><p>B、=</p><p>C、**</p><p>D、/</p><hr><p>16、(D)<br>下列选项中可以表示整型数据的是（）</p><p>A、二进制</p><p>B、四进制</p><p>C、八进制</p><p>D、以上均可</p><hr><p>17、(C)<br>下列选项中属于Python逻辑运算符的是（）</p><p>A、%</p><p>B、$</p><p>C、and</p><p>D、+</p><hr><p>18、(D)<br>如果字符串str01=’Python’，那么执行str01[-1::-2]后，输出结果是（）</p><p>A、Py</p><p>B、on</p><p>C、nh</p><p>D、nhy</p><hr><p>19、(D)<br>下列选项中用于将左边的操作数整除以右边的值，并将结果赋值给左边的操作数的是（）</p><p>A、+=</p><p>B、-=</p><p>C、*=</p><p>D、/=</p><hr><p>20、(B)</p><p>下列选项中用于执行逻辑与运算的是（）</p><p>A、or</p><p>B、and</p><p>C、not</p><p>D、maybe</p><hr><p>21、(C)<br>下列选项中用于执行逻辑非运算的是（）</p><p>A、or</p><p>B、and</p><p>C、not</p><p>D、maybe</p><hr><p>22、(B)</p><p>下列选项中用于执行字符串分割的方法是（）</p><p>A、replace()</p><p>B、split()</p><p>C、strip()</p><p>D、str()</p><hr><p>23、(A)<br>Python中使用切片需要通过哪个符号进行包裹（）</p><p>A、[]</p><p>B、()</p><p>C、{}</p><p>D、&lt;&gt;</p><hr><p>24、(C)</p><p>如果字符串str_01 = “乘风破浪会有时,”，字符串str_02 = “直挂云帆济沧海。”，当执行str01+str02后输出结果是（）</p><p>A、直挂云帆济沧海。</p><p>B、乘风破浪会有时,</p><p>C、乘风破浪会有时,直挂云帆济沧海。</p><p>D、直挂云帆济沧海。,乘风破浪会有时</p><hr><p>25、(B)<br>下列选项中表示按位右移的是（）</p><p>A、&lt;&lt;</p><p>B、&gt;&gt;</p><p>C、$</p><p>D、&amp;</p><hr><p>26、(B)</p><p>下列选项中，用于将数值类型转换为浮点数类型的函数是（）</p><p>A、complex()</p><p>B、float()</p><p>C、str()</p><p>D、int()</p><hr><p>27、(D)</p><p>下列选项中，用于将字符串类型的数据格式化为字符串的是（）</p><p>A、%d</p><p>B、%o</p><p>C、%x</p><p>D、%s</p><hr><p>28、(D)<br>下列可以创建字符串的方式有（）</p><p>A、单引号</p><p>B、双引号</p><p>C、三引号</p><p>D、以上均可</p><hr><p>29、(A)<br>如果a等于5，b等于5，那么a&gt;=b输出结果为（）。</p><p>A、True</p><p>B、Flase</p><p>C、5</p><p>D、6</p>              </div>            </details><hr><h3 id="（2）判断题-10"><a href="#（2）判断题-10" class="headerlink" title="（2）判断题"></a>（2）判断题</h3><details class="folding-tag" ><summary> 2-2 </summary>              <div class='content'>              <p>30、(T)</p><p>赋值运算符是双目运算符。</p><hr><p>31、(T)</p><p>布尔类型在进行算术运算时，将False和True被视为数值0或1。</p><hr><p>32、(T)</p><p>or、and和not都是双目运算符。</p><hr><p>33、(T)</p><p>比较运算符与操作数构成的表达式的结果只能是True或False。</p><hr><p>34、(F)</p><p>replace()方法会对原字符串进行修改。</p><hr><p>35、(T)</p><p>切片截取的范围是左闭右开。</p><hr><p>36、(F)</p><p>如果字符串中包含换行符，那么在输出的时候不会进行换行显示。</p><hr><p>37、(F)</p><p>使用int()函数对浮点数进行转换后，会按照四舍五入的方式将数值转换成整数。</p><hr><p>38、(T)</p><p>Python中的算术运算符支持对相同或不同类型的数值进行混合运算。</p><hr><p>39、(F)</p><p>切片中起始索引默认是1。</p><hr><p>40、(T)</p><p>字符串是由字母、符号、数值等组成的一个字符序列。</p><hr><p>41、(T)</p><p>创建字符串时单引号与双引号可以嵌套使用。</p><hr><p>42、(T)</p><p>在Python中，布尔类型是特殊的整型。</p>              </div>            </details>              </div>            </details><hr><h2 id="一、第1章-开启Python学习之旅"><a href="#一、第1章-开启Python学习之旅" class="headerlink" title="一、第1章 开启Python学习之旅"></a><span id="jump31">一、第1章 开启Python学习之旅</span></h2><details class="folding-tag" ><summary> 1 </summary>              <div class='content'>              <h3 id="（1）单选题"><a href="#（1）单选题" class="headerlink" title="（1）单选题"></a>（1）单选题</h3><details class="folding-tag" ><summary> 1-1 </summary>              <div class='content'>              <p>1、(B)</p><p>Python是一种什么类型的编程语言（）</p><p>A、编译型语言</p><p>B、解释型语言</p><p>C、汇编语言</p><p>D、面向对象语言</p><hr><p>2、(A)</p><p>PEP 8建议每行代码的长度不超过多少个字符（）</p><p>A、79</p><p>B、80</p><p>C、99</p><p>D、69</p><hr><p>3、(D)</p><p>下列选项属于Python特点的是（）</p><p>A、免费开源</p><p>B、可移植性</p><p>C、良好的中文支持</p><p>D、以上均是</p><hr><p>4、(D)</p><p>行内注释使用哪个符号作为开头（）</p><p>A、@</p><p>B、//</p><p>C、%</p><p>D、#</p><hr><p>5、(A)</p><p>列选项用于接收用户输入信息的是（）</p><p>A、input()</p><p>B、print()</p><p>C、import()</p><p>D、text()</p><hr><p>6、(D)</p><p>PyCharm可在下列哪些操作系统上运行（）</p><p>A、Windows</p><p>B、Linux</p><p>C、macOS</p><p>D、以上均可</p><hr><p>7、(C)</p><p>下列选项表示文档字符串的作用是（）</p><p>A、用于对代码段进行解释和概述</p><p>B、用于对这行代码进行解释、补充或提醒关键细节</p><p>C、为所有公共模块、函数、类以及方法编写的文档说明</p><p>D、用于对创建的项目说明</p><hr><p>8、(D)</p><p>下列选项用于输出信息的是（）</p><p>A、input()</p><p>B、out()</p><p>C、printf()</p><p>D、print()</p><hr><p>9、(B)</p><p>下列选项中用于科学计算领域的是（）</p><p>A、pysider</p><p>B、NumPy</p><p>C、PyTorch</p><p>D、pygame</p><hr><p>10、(B)<br>Python官方推荐的编码规范是（）</p><p>A、PEP 257</p><p>B、PEP 8</p><p>C、PEP 12</p><p>D、PEP 10</p><hr><p>11、(A)</p><p>下面选项哪个变量名是合法的（）</p><p>A、my_name</p><p>B、3asdble</p><p>C、variable-name</p><p>D、@variable</p><hr><p>12、(B)<br>下列选项中，不属于Python关键字的是（）</p><p>A、False</p><p>B、No</p><p>C、and</p><p>D、def</p><hr><p>13、(A)</p><p>下列选项属于PyCharm作用的是（）</p><p>A、Python解释器</p><p>B、Python集成开发环境</p><p>C、Python包管理工具</p><p>D、Python虚拟环境管理器</p><hr><p>14、(D)</p><p>下列选项Python可以应用的领域包括（）</p><p>A、Web开发</p><p>B、科学计算与数据分析</p><p>C、自动化运维</p><p>D、以上均是</p><hr><p>15、(A)</p><p>在Python中，如何为一个变量赋值（）</p><p>A、使用等号（=）进行赋值</p><p>B、使用冒号（:）进行赋值</p><p>C、使用逗号（,）进行赋值</p><p>D、使用加号（+）进行赋值</p><hr><p>16、(D)<br>标准Python风格中每个缩进级别使用的空格数是（）。</p><p>A、2</p><p>B、6</p><p>C、任意个空格</p><p>D、4</p>              </div>            </details><hr><h3 id="（2）多选题-14"><a href="#（2）多选题-14" class="headerlink" title="（2）多选题"></a>（2）多选题</h3><details class="folding-tag" ><summary> 1-2 </summary>              <div class='content'>              <p>17、(A C)</p><p>下列选项用于Web开发领域的框架的是（）</p><p>A、Flask</p><p>B、Pandas</p><p>C、Django</p><p>D、Matplotlib</p><hr><p>18、(A B C D)</p><p>下列选项是专业版本（Professional）与社区版本（Community）的区别是（）</p><p>A、专业版收费，社区版免费</p><p>B、专业版功能更全面</p><p>C、专业版功能更加齐全</p><p>D、支持Python开发</p><hr><p>19、(A D)</p><p>下列框架或库用于网络爬虫领域的是（）</p><p>A、Scrapy</p><p>B、pygame</p><p>C、PyTorch</p><p>D、requests</p>              </div>            </details><hr><h3 id="（3）判断题-14"><a href="#（3）判断题-14" class="headerlink" title="（3）判断题"></a>（3）判断题</h3><details class="folding-tag" ><summary> 1-3 </summary>              <div class='content'>              <p>20、(F)</p><p>input()函数可以输出用户输入的内容。</p><hr><p>21、(F)</p><p>同一台计算机中不可以安装多个版本Python解释器。</p><hr><p>22、(F)</p><p>变量名不区分大小写。</p><hr><p>23、(F)</p><p>print()函数可以接收用户输入的内容。</p><hr><p>24、(T)</p><p>Community版本的PyCharm可以免费试用。</p><hr><p>25、(T)</p><p>Python可以轻松地编写、读取、处理中文字符，并与其他语言的字符进行无缝交互。</p><hr><p>26、(T)</p><p>Python不仅内置了许多标准库，还拥有开发人员贡献的丰富的第三方库或框架。</p><hr><p>27、(F)</p><p>解释器在转译代码时，会将Python代码一次性全部转译。</p><hr><p>28、(T)</p><p>网络爬虫主要用于从互联网中采集数据。</p><hr><p>29、(F)</p><p>pygame是Python的标准库。</p>              </div>            </details>              </div>            </details><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="作业" scheme="http://example.com/tags/%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>数据结构的基本框架及基础操作</title>
    <link href="http://example.com/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</id>
    <published>2024-05-26T08:22:45.000Z</published>
    <updated>2025-03-15T09:54:11.840Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h4 id="索引："><a href="#索引：" class="headerlink" title="索引："></a>索引：</h4><h4 id="1、线性表"><a href="#1、线性表" class="headerlink" title="1、线性表"></a>1、<a href="#jump1">线性表</a></h4><h4 id="2、堆栈"><a href="#2、堆栈" class="headerlink" title="2、堆栈"></a>2、<a href="#jump2">堆栈</a></h4><h4 id="3、队列"><a href="#3、队列" class="headerlink" title="3、队列"></a>3、<a href="#jump3">队列</a></h4><h4 id="4、堆栈与队列的联合运用"><a href="#4、堆栈与队列的联合运用" class="headerlink" title="4、堆栈与队列的联合运用"></a>4、<a href="#jump4">堆栈与队列的联合运用</a></h4><h4 id="5、树"><a href="#5、树" class="headerlink" title="5、树"></a>5、<a href="#jump5">树</a></h4><hr><h1 id="一、线性表"><a href="#一、线性表" class="headerlink" title="一、线性表"></a><span id="jump1">一、线性表</span></h1><details class="folding-tag" ><summary> 线性表 </summary>              <div class='content'>              <h2 id="（一）顺序存储（从下标0开始储存）"><a href="#（一）顺序存储（从下标0开始储存）" class="headerlink" title="（一）顺序存储（从下标0开始储存）"></a>（一）顺序存储（从下标0开始储存）</h2><details class="folding-tag" ><summary> （一）顺序存储 </summary>              <div class='content'>              <h3 id="1、结构定义："><a href="#1、结构定义：" class="headerlink" title="1、结构定义："></a>1、结构定义：</h3><details class="folding-tag" ><summary> 结构定义 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lnode</span> *<span class="title">ptrl</span>;</span>  <span class="comment">// 定义指向结构体lnode的指针类型ptrl</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lnode</span>  // 定义结构体<span class="title">lnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element data[maxsize];  <span class="comment">// 数据数组，存储元素</span></span><br><span class="line">    <span class="type">int</span> last;  <span class="comment">// 记录最后一个元素的位置</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrl <span class="built_in">list</span>;  <span class="comment">// 定义list类型为指向lnode的指针</span></span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="2、基础操作集"><a href="#2、基础操作集" class="headerlink" title="2、基础操作集"></a>2、基础操作集</h3><details class="folding-tag" ><summary> 基础操作集 </summary>              <div class='content'>              <h4 id="①初始化函数（list-init-）："><a href="#①初始化函数（list-init-）：" class="headerlink" title="①初始化函数（list init()）："></a>①初始化函数（list init()）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> <span class="title function_">init</span><span class="params">()</span>  <span class="comment">// 初始化列表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> l = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> lnode));  <span class="comment">// 分配列表节点内存</span></span><br><span class="line">    l-&gt;last = <span class="number">-1</span>;  <span class="comment">// 初始化最后一个元素位置为 -1，表示列表为空</span></span><br><span class="line">    <span class="keyword">return</span> l;  <span class="comment">// 返回初始化后的列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②查找（element-find-list-l-element-x-）："><a href="#②查找（element-find-list-l-element-x-）：" class="headerlink" title="②查找（element find(list l, element x)）："></a>②查找（element find(list l, element x)）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">element <span class="title function_">find</span><span class="params">(<span class="built_in">list</span> l, element x)</span>  <span class="comment">// 查找元素 x 在列表中的位置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= l-&gt;last &amp;&amp; l-&gt;data[i] != x)  <span class="comment">// 遍历列表查找元素 x</span></span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; l-&gt;last)  <span class="comment">// 如果未找到 x，返回 -1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">1</span>;  <span class="comment">// 返回元素 x 在列表中的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③插入（int-insert-list-l-element-x-int-i-）："><a href="#③插入（int-insert-list-l-element-x-int-i-）：" class="headerlink" title="③插入（int insert(list l, element x, int i)）："></a>③插入（int insert(list l, element x, int i)）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="built_in">list</span> l, element x, <span class="type">int</span> i)</span>  <span class="comment">// 在位置 i 插入元素 x</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (l-&gt;last == maxsize - <span class="number">1</span>)  <span class="comment">// 检查列表是否已满</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;表满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; l-&gt;last + <span class="number">1</span>)  <span class="comment">// 检查插入位置是否合法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;插入位序不合法\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j = l-&gt;last; j &gt;= i - <span class="number">1</span>; j--)  <span class="comment">// 移动元素以腾出插入位置</span></span><br><span class="line">        l-&gt;data[j + <span class="number">1</span>] = l-&gt;data[j];</span><br><span class="line">    l-&gt;data[i - <span class="number">1</span>] = x;  <span class="comment">// 在位置 i 插入元素 x</span></span><br><span class="line">    l-&gt;last++;  <span class="comment">// 更新列表的最后一个元素位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④删除（element-deletel-list-l-int-i-）："><a href="#④删除（element-deletel-list-l-int-i-）：" class="headerlink" title="④删除（element deletel(list l, int i)）："></a>④删除（element deletel(list l, int i)）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">element <span class="title function_">deletel</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> i)</span>  <span class="comment">// 删除位置 i 的元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; l-&gt;last)  <span class="comment">// 检查删除位置是否合法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;位序%d不存在&quot;</span>, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j = i; j &lt;= l-&gt;last; j++)  <span class="comment">// 移动元素以覆盖被删除的元素</span></span><br><span class="line">        l-&gt;data[j - <span class="number">1</span>] = l-&gt;data[j];</span><br><span class="line">    l-&gt;last--;  <span class="comment">// 更新列表的最后一个元素位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="3、示例代码："><a href="#3、示例代码：" class="headerlink" title="3、示例代码："></a>3、示例代码：</h3><details class="folding-tag" ><summary> 示例代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 100  <span class="comment">// 定义列表的最大大小</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> element;  <span class="comment">// 定义元素类型为 int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lnode</span> *<span class="title">ptrl</span>;</span>  <span class="comment">// 定义指向 lnode 结构体的指针类型 ptrl</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lnode</span>  // 定义列表节点结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element data[maxsize];  <span class="comment">// 存储列表元素的数组</span></span><br><span class="line">    <span class="type">int</span> last;  <span class="comment">// 列表中最后一个元素的位置</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrl <span class="built_in">list</span>;  <span class="comment">// 定义列表类型为 ptrl</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> <span class="title function_">init</span><span class="params">()</span>;  <span class="comment">// 初始化列表</span></span><br><span class="line">element <span class="title function_">find</span><span class="params">(<span class="built_in">list</span> l, element x)</span>;  <span class="comment">// 查找元素 x 在列表中的位置</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="built_in">list</span> l, element x, <span class="type">int</span> i)</span>;  <span class="comment">// 在位置 i 插入元素 x</span></span><br><span class="line">element <span class="title function_">deletel</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> i)</span>;  <span class="comment">// 删除位置 i 的元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">list</span> l = init();  <span class="comment">// 初始化一个列表</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;  <span class="comment">// 定义并初始化数组 a</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  <span class="comment">// 将数组 a 中的元素插入到列表中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = a[i];</span><br><span class="line">        l-&gt;data[i] = x;  <span class="comment">// 将元素存储到列表中，从索引 0 开始</span></span><br><span class="line">        l-&gt;last++;  <span class="comment">// 更新列表的最后一个元素位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    insert(l, <span class="number">80</span>, <span class="number">7</span>);  <span class="comment">// 在位置 7 插入元素 80</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= l-&gt;last; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, l-&gt;data[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,find(l,<span class="number">80</span>));  <span class="comment">// 查找元素 80 在列表中的位置 </span></span><br><span class="line"></span><br><span class="line">    deletel(l, <span class="number">7</span>);  <span class="comment">// 删除位置 7 的元素</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= l-&gt;last; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, l-&gt;data[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> <span class="title function_">init</span><span class="params">()</span>  <span class="comment">// 初始化列表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> l = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> lnode));  <span class="comment">// 分配列表节点内存</span></span><br><span class="line">    l-&gt;last = <span class="number">-1</span>;  <span class="comment">// 初始化最后一个元素位置为 -1，表示列表为空</span></span><br><span class="line">    <span class="keyword">return</span> l;  <span class="comment">// 返回初始化后的列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">element <span class="title function_">find</span><span class="params">(<span class="built_in">list</span> l, element x)</span>  <span class="comment">// 查找元素 x 在列表中的位置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= l-&gt;last &amp;&amp; l-&gt;data[i] != x)  <span class="comment">// 遍历列表查找元素 x</span></span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; l-&gt;last)  <span class="comment">// 如果未找到 x，返回 -1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">1</span>;  <span class="comment">// 返回元素 x 在列表中的位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="built_in">list</span> l, element x, <span class="type">int</span> i)</span>  <span class="comment">// 在位置 i 插入元素 x</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (l-&gt;last == maxsize - <span class="number">1</span>)  <span class="comment">// 检查列表是否已满</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;表满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; l-&gt;last + <span class="number">1</span>)  <span class="comment">// 检查插入位置是否合法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;插入位序不合法\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j = l-&gt;last; j &gt;= i - <span class="number">1</span>; j--)  <span class="comment">// 移动元素以腾出插入位置</span></span><br><span class="line">        l-&gt;data[j + <span class="number">1</span>] = l-&gt;data[j];</span><br><span class="line">    l-&gt;data[i - <span class="number">1</span>] = x;  <span class="comment">// 在位置 i 插入元素 x</span></span><br><span class="line">    l-&gt;last++;  <span class="comment">// 更新列表的最后一个元素位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">deletel</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> i)</span>  <span class="comment">// 删除位置 i 的元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; l-&gt;last)  <span class="comment">// 检查删除位置是否合法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;位序%d不存在&quot;</span>, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j = i; j &lt;= l-&gt;last; j++)  <span class="comment">// 移动元素以覆盖被删除的元素</span></span><br><span class="line">        l-&gt;data[j - <span class="number">1</span>] = l-&gt;data[j];</span><br><span class="line">    l-&gt;last--;  <span class="comment">// 更新列表的最后一个元素位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h2 id="（二）链式存储（带头结点）"><a href="#（二）链式存储（带头结点）" class="headerlink" title="（二）链式存储（带头结点）"></a>（二）链式存储（带头结点）</h2><details class="folding-tag" ><summary> （二）链式存储 </summary>              <div class='content'>              <h3 id="1、结构定义："><a href="#1、结构定义：" class="headerlink" title="1、结构定义："></a>1、结构定义：</h3><details class="folding-tag" ><summary> 结构定义 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lnode</span> *<span class="title">ptrl</span>;</span>  <span class="comment">// 定义指向 lnode 结构体的指针类型 ptrl</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lnode</span>  // 定义列表节点结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element data;  <span class="comment">// 数据域</span></span><br><span class="line">    ptrl next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrl <span class="built_in">list</span>; </span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="2、基础操作集-1"><a href="#2、基础操作集-1" class="headerlink" title="2、基础操作集"></a>2、基础操作集</h3><details class="folding-tag" ><summary> 基础操作集 </summary>              <div class='content'>              <h4 id="①初始化函数（list-init-）："><a href="#①初始化函数（list-init-）：" class="headerlink" title="①初始化函数（list init()）："></a>①初始化函数（list init()）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> <span class="title function_">init</span><span class="params">()</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> l = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> lnode));  <span class="comment">// 分配列表节点内存</span></span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;  <span class="comment">// 初始化为空列表</span></span><br><span class="line">    <span class="keyword">return</span> l;  <span class="comment">// 返回初始化后的列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②判断列表是否为空（int-isempty-list-l-）："><a href="#②判断列表是否为空（int-isempty-list-l-）：" class="headerlink" title="②判断列表是否为空（int isempty(list l)）："></a>②判断列表是否为空（int isempty(list l)）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">list</span> l)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> l-&gt;next == <span class="literal">NULL</span>;  <span class="comment">// 若第一个节点为空，则列表为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③获取列表长度（int-length-list-l-）："><a href="#③获取列表长度（int-length-list-l-）：" class="headerlink" title="③获取列表长度（int length(list l)）："></a>③获取列表长度（int length(list l)）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="built_in">list</span> l)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">while</span> (p)  <span class="comment">// 遍历链表</span></span><br><span class="line">    &#123;  </span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        cnt++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;  <span class="comment">// 返回链表长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④按值查找节点（list-findx-list-l-element-x-）："><a href="#④按值查找节点（list-findx-list-l-element-x-）：" class="headerlink" title="④按值查找节点（list findx(list l, element x)）："></a>④按值查找节点（list findx(list l, element x)）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> <span class="title function_">findx</span><span class="params">(<span class="built_in">list</span> l, element x)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;data != x)  <span class="comment">// 遍历链表，寻找值为 x 的节点</span></span><br><span class="line">    &#123;  </span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;  <span class="comment">// 返回找到的节点，若未找到返回 NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑤按序号查找节点值（element-findp-list-l-int-k-）："><a href="#⑤按序号查找节点值（element-findp-list-l-int-k-）：" class="headerlink" title="⑤按序号查找节点值（element findp(list l, int k)）："></a>⑤按序号查找节点值（element findp(list l, int k)）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">element <span class="title function_">findp</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> k)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; i &lt; k) </span><br><span class="line">    &#123;  <span class="comment">// 遍历链表，直到找到第 k 个节点</span></span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        i++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == k &amp;&amp; p)  <span class="comment">// 如果找到第 k 个节点</span></span><br><span class="line">        <span class="keyword">return</span> p-&gt;data;  <span class="comment">// 返回节点的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 未找到则返回 -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑥在位置-i-插入元素-x（int-insert-list-l-element-x-int-i-）："><a href="#⑥在位置-i-插入元素-x（int-insert-list-l-element-x-int-i-）：" class="headerlink" title="⑥在位置 i 插入元素 x（int insert(list l, element x, int i)）："></a>⑥在位置 i 插入元素 x（int insert(list l, element x, int i)）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="built_in">list</span> l, element x, <span class="type">int</span> i)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="built_in">list</span> p = l;  <span class="comment">// 指针 p 指向链表头节点</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;  <span class="comment">// 寻找第 i-1 个节点</span></span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        j++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> || j != i - <span class="number">1</span>) &#123;  <span class="comment">// 检查插入位置是否合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;插入位置参数错误\n&quot;</span>);  <span class="comment">// 插入位置错误提示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回错误码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span> t = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> lnode));  <span class="comment">// 分配新节点内存</span></span><br><span class="line">    t-&gt;data = x;  <span class="comment">// 设置新节点的数据</span></span><br><span class="line">    t-&gt;next = p-&gt;next;  <span class="comment">// 新节点指向插入位置的下一个节点</span></span><br><span class="line">    p-&gt;next = t;  <span class="comment">// 插入新节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回成功码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑦删除位置-i-的元素（int-deletel-list-l-int-i-）："><a href="#⑦删除位置-i-的元素（int-deletel-list-l-int-i-）：" class="headerlink" title="⑦删除位置 i 的元素（int deletel(list l, int i)）："></a>⑦删除位置 i 的元素（int deletel(list l, int i)）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deletel</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> i)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="built_in">list</span> p = l;  <span class="comment">// 指针 p 指向链表头节点</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;  <span class="comment">// 寻找第 i-1 个节点</span></span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        j++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> || j != i - <span class="number">1</span> || p-&gt;next == <span class="literal">NULL</span>) &#123;  <span class="comment">// 检查删除位置是否合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除位置参数错误\n&quot;</span>);  <span class="comment">// 删除位置错误提示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回错误码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span> t = p-&gt;next;  <span class="comment">// 指向要删除的节点</span></span><br><span class="line">    p-&gt;next = t-&gt;next;  <span class="comment">// 跳过要删除的节点</span></span><br><span class="line">    <span class="built_in">free</span>(t);  <span class="comment">// 释放要删除节点的内存</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回成功码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="3、示例代码：-1"><a href="#3、示例代码：-1" class="headerlink" title="3、示例代码："></a>3、示例代码：</h3><details class="folding-tag" ><summary> 示例代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义元素类型为 int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> element;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义指向 lnode 结构体的指针类型 ptrl</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lnode</span> *<span class="title">ptrl</span>;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义列表节点结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lnode</span>  </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element data;  <span class="comment">// 数据域</span></span><br><span class="line">    ptrl next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrl <span class="built_in">list</span>;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> <span class="title function_">init</span><span class="params">()</span>;  <span class="comment">// 初始化列表</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">list</span> l)</span>;  <span class="comment">// 判断列表是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="built_in">list</span> l)</span>;  <span class="comment">// 获取列表长度</span></span><br><span class="line"><span class="built_in">list</span> <span class="title function_">findx</span><span class="params">(<span class="built_in">list</span> l, element x)</span>;  <span class="comment">// 按值查找节点</span></span><br><span class="line">element <span class="title function_">findp</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> k)</span>;  <span class="comment">// 按序号查找节点值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="built_in">list</span> l, element x, <span class="type">int</span> i)</span>;  <span class="comment">// 在位置 i 插入元素 x</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deletel</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> i)</span>;  <span class="comment">// 删除位置 i 的元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化列表</span></span><br><span class="line">    <span class="built_in">list</span> l = init();</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">        insert(l, a[i], i + <span class="number">1</span>);  <span class="comment">// 在位置 i+1 插入元素 a[i]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出链表中的元素</span></span><br><span class="line">    ptrl p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n链表长度: %d\n&quot;</span>, length(l));</span><br><span class="line"></span><br><span class="line">    p = findx(l, <span class="number">7</span>);  <span class="comment">// 查找值为 7 的节点</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p-&gt;data);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, findp(l, <span class="number">7</span>));  <span class="comment">// 按序号查找第 7 个节点的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除第 7 个节点并打印链表</span></span><br><span class="line">    <span class="keyword">if</span> (deletel(l, <span class="number">7</span>)) </span><br><span class="line">    &#123;</span><br><span class="line">        p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">            p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化列表</span></span><br><span class="line"><span class="built_in">list</span> <span class="title function_">init</span><span class="params">()</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> l = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> lnode));  <span class="comment">// 分配列表节点内存</span></span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;  <span class="comment">// 初始化为空列表</span></span><br><span class="line">    <span class="keyword">return</span> l;  <span class="comment">// 返回初始化后的列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断列表是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">list</span> l)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> l-&gt;next == <span class="literal">NULL</span>;  <span class="comment">// 若第一个节点为空，则列表为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列表长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="built_in">list</span> l)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">while</span> (p)  <span class="comment">// 遍历链表</span></span><br><span class="line">    &#123;  </span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        cnt++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;  <span class="comment">// 返回链表长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按值查找节点</span></span><br><span class="line"><span class="built_in">list</span> <span class="title function_">findx</span><span class="params">(<span class="built_in">list</span> l, element x)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;data != x)  <span class="comment">// 遍历链表，寻找值为 x 的节点</span></span><br><span class="line">    &#123;  </span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;  <span class="comment">// 返回找到的节点，若未找到返回 NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按序号查找节点值</span></span><br><span class="line">element <span class="title function_">findp</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> k)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; i &lt; k) </span><br><span class="line">    &#123;  <span class="comment">// 遍历链表，直到找到第 k 个节点</span></span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        i++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == k &amp;&amp; p)  <span class="comment">// 如果找到第 k 个节点</span></span><br><span class="line">        <span class="keyword">return</span> p-&gt;data;  <span class="comment">// 返回节点的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 未找到则返回 -1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在位置 i 插入元素 x</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="built_in">list</span> l, element x, <span class="type">int</span> i)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="built_in">list</span> p = l;  <span class="comment">// 指针 p 指向链表头节点</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;  <span class="comment">// 寻找第 i-1 个节点</span></span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        j++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> || j != i - <span class="number">1</span>) &#123;  <span class="comment">// 检查插入位置是否合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;插入位置参数错误\n&quot;</span>);  <span class="comment">// 插入位置错误提示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回错误码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span> t = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> lnode));  <span class="comment">// 分配新节点内存</span></span><br><span class="line">    t-&gt;data = x;  <span class="comment">// 设置新节点的数据</span></span><br><span class="line">    t-&gt;next = p-&gt;next;  <span class="comment">// 新节点指向插入位置的下一个节点</span></span><br><span class="line">    p-&gt;next = t;  <span class="comment">// 插入新节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回成功码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除位置 i 的元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deletel</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> i)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="built_in">list</span> p = l;  <span class="comment">// 指针 p 指向链表头节点</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;  <span class="comment">// 寻找第 i-1 个节点</span></span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        j++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> || j != i - <span class="number">1</span> || p-&gt;next == <span class="literal">NULL</span>) &#123;  <span class="comment">// 检查删除位置是否合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除位置参数错误\n&quot;</span>);  <span class="comment">// 删除位置错误提示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回错误码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span> t = p-&gt;next;  <span class="comment">// 指向要删除的节点</span></span><br><span class="line">    p-&gt;next = t-&gt;next;  <span class="comment">// 跳过要删除的节点</span></span><br><span class="line">    <span class="built_in">free</span>(t);  <span class="comment">// 释放要删除节点的内存</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回成功码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h2 id="（三）题目运用示例（非PTA）："><a href="#（三）题目运用示例（非PTA）：" class="headerlink" title="（三）题目运用示例（非PTA）："></a>（三）题目运用示例（非PTA）：</h2><details class="folding-tag" ><summary> 题目运用示例 </summary>              <div class='content'>              <blockquote><p>作者 幻梦</p><p>单位 无</p></blockquote><p>有两组按升序排序的数据，请将这两组数据按升序合并成一组</p><p><strong>输入格式:</strong></p><p>输入第1行为n，m，分别表示两组数据的个数；</p><p>第2行给出n个整数，以升序排列；</p><p>第2行给出m个整数，以升序排列；</p><p><strong>输出格式:</strong></p><p>按升序输出合并后的一组数据</p><p><strong>输入样例:</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br></pre></td></tr></table></figure><h4 id="答案示例："><a href="#答案示例：" class="headerlink" title="答案示例："></a>答案示例：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义元素类型为 int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> element;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义指向 lnode 结构体的指针类型 ptrl</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lnode</span> *<span class="title">ptrl</span>;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义列表节点结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lnode</span>  </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element data;  <span class="comment">// 数据域</span></span><br><span class="line">    ptrl next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrl <span class="built_in">list</span>;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> <span class="title function_">init</span><span class="params">()</span>;  <span class="comment">// 初始化列表</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">list</span> l)</span>;  <span class="comment">// 判断列表是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="built_in">list</span> l)</span>;  <span class="comment">// 获取列表长度</span></span><br><span class="line"><span class="built_in">list</span> <span class="title function_">findx</span><span class="params">(<span class="built_in">list</span> l, element x)</span>;  <span class="comment">// 按值查找节点</span></span><br><span class="line">element <span class="title function_">findp</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> k)</span>;  <span class="comment">// 按序号查找节点值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="built_in">list</span> l, element x, <span class="type">int</span> i)</span>;  <span class="comment">// 在位置 i 插入元素 x</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deletel</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> i)</span>;  <span class="comment">// 删除位置 i 的元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">list</span> l1=init(),l2=init();</span><br><span class="line">    <span class="type">int</span> m,n,i,j,x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        insert(l1,x,i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        insert(l2,x,i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span> p1=l1-&gt;next,p2=l2-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p1&amp;&amp;p2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p1-&gt;data&gt;p2-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p2-&gt;data);</span><br><span class="line">            p2=p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;data&lt;p2-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p1-&gt;data);</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;data==p2-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p2-&gt;data);</span><br><span class="line">            p2=p2-&gt;next;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(p1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p1-&gt;data);</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(p2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p2-&gt;data);</span><br><span class="line">            p2=p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化列表</span></span><br><span class="line"><span class="built_in">list</span> <span class="title function_">init</span><span class="params">()</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> l = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> lnode));  <span class="comment">// 分配列表节点内存</span></span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;  <span class="comment">// 初始化为空列表</span></span><br><span class="line">    <span class="keyword">return</span> l;  <span class="comment">// 返回初始化后的列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断列表是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">list</span> l)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> l-&gt;next == <span class="literal">NULL</span>;  <span class="comment">// 若第一个节点为空，则列表为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列表长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="built_in">list</span> l)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">while</span> (p)  <span class="comment">// 遍历链表</span></span><br><span class="line">    &#123;  </span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        cnt++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;  <span class="comment">// 返回链表长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按值查找节点</span></span><br><span class="line"><span class="built_in">list</span> <span class="title function_">findx</span><span class="params">(<span class="built_in">list</span> l, element x)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;data != x)  <span class="comment">// 遍历链表，寻找值为 x 的节点</span></span><br><span class="line">    &#123;  </span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;  <span class="comment">// 返回找到的节点，若未找到返回 NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按序号查找节点值</span></span><br><span class="line">element <span class="title function_">findp</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> k)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">list</span> p = l-&gt;next;  <span class="comment">// 指针 p 指向链表的第一个元素</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; i &lt; k) </span><br><span class="line">    &#123;  <span class="comment">// 遍历链表，直到找到第 k 个节点</span></span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        i++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == k &amp;&amp; p)  <span class="comment">// 如果找到第 k 个节点</span></span><br><span class="line">        <span class="keyword">return</span> p-&gt;data;  <span class="comment">// 返回节点的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 未找到则返回 -1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在位置 i 插入元素 x</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="built_in">list</span> l, element x, <span class="type">int</span> i)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="built_in">list</span> p = l;  <span class="comment">// 指针 p 指向链表头节点</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;  <span class="comment">// 寻找第 i-1 个节点</span></span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        j++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> || j != i - <span class="number">1</span>) &#123;  <span class="comment">// 检查插入位置是否合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;插入位置参数错误\n&quot;</span>);  <span class="comment">// 插入位置错误提示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回错误码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span> t = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> lnode));  <span class="comment">// 分配新节点内存</span></span><br><span class="line">    t-&gt;data = x;  <span class="comment">// 设置新节点的数据</span></span><br><span class="line">    t-&gt;next = p-&gt;next;  <span class="comment">// 新节点指向插入位置的下一个节点</span></span><br><span class="line">    p-&gt;next = t;  <span class="comment">// 插入新节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回成功码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除位置 i 的元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deletel</span><span class="params">(<span class="built_in">list</span> l, <span class="type">int</span> i)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// 计数器</span></span><br><span class="line">    <span class="built_in">list</span> p = l;  <span class="comment">// 指针 p 指向链表头节点</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;  <span class="comment">// 寻找第 i-1 个节点</span></span><br><span class="line">        p = p-&gt;next;  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        j++;  <span class="comment">// 计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> || j != i - <span class="number">1</span> || p-&gt;next == <span class="literal">NULL</span>) &#123;  <span class="comment">// 检查删除位置是否合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除位置参数错误\n&quot;</span>);  <span class="comment">// 删除位置错误提示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回错误码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span> t = p-&gt;next;  <span class="comment">// 指向要删除的节点</span></span><br><span class="line">    p-&gt;next = t-&gt;next;  <span class="comment">// 跳过要删除的节点</span></span><br><span class="line">    <span class="built_in">free</span>(t);  <span class="comment">// 释放要删除节点的内存</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回成功码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h1 id="二、堆栈（顺式）"><a href="#二、堆栈（顺式）" class="headerlink" title="二、堆栈（顺式）"></a><span id="jump2">二、堆栈（顺式）</span></h1><details class="folding-tag" ><summary> 堆栈 </summary>              <div class='content'>              <h2 id="1、结构定义："><a href="#1、结构定义：" class="headerlink" title="1、结构定义："></a>1、结构定义：</h2><details class="folding-tag" ><summary> 结构定义 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">snode</span> *<span class="title">ptrs</span>;</span> <span class="comment">// 定义指向 snode 结构体的指针类型 ptrs</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">snode</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">    element *data; <span class="comment">// 指向堆栈数据的指针 </span></span><br><span class="line">    <span class="type">int</span> top; <span class="comment">// 栈顶索引 </span></span><br><span class="line">    <span class="type">int</span> maxsize; <span class="comment">// 栈的最大容量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrs <span class="built_in">stack</span>; <span class="comment">// 定义堆栈指针类型为 stack</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="2、基础操作集-2"><a href="#2、基础操作集-2" class="headerlink" title="2、基础操作集"></a>2、基础操作集</h2><details class="folding-tag" ><summary> 基础操作集 </summary>              <div class='content'>              <h3 id="①创建栈（stack-creats-int-max-）："><a href="#①创建栈（stack-creats-int-max-）：" class="headerlink" title="①创建栈（stack creats(int max)）："></a>①创建栈（stack creats(int max)）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span> <span class="title function_">creatS</span><span class="params">(<span class="type">int</span> max)</span>  <span class="comment">// 创建一个新的顺序栈，参数为栈的最大容量</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span> s = (<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> snode));  <span class="comment">// 分配堆栈节点内存</span></span><br><span class="line">    s-&gt;data = (element*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(element) * max);  <span class="comment">// 分配存储栈数据的内存</span></span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;  <span class="comment">// 初始化栈顶索引为 -1，表示栈为空</span></span><br><span class="line">    s-&gt;maxsize = max;  <span class="comment">// 设置栈的最大容量</span></span><br><span class="line">    <span class="keyword">return</span> s;  <span class="comment">// 返回创建的栈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②入栈操作（void-push-stack-s-element-x-）："><a href="#②入栈操作（void-push-stack-s-element-x-）：" class="headerlink" title="②入栈操作（void push(stack s, element x)）："></a>②入栈操作（void push(stack s, element x)）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> s, element x)</span>  <span class="comment">// 入栈操作</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isfull(s))  <span class="comment">// 检查栈是否已满</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈满\n&quot;</span>);  <span class="comment">// 栈满时打印提示信息</span></span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// 退出函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;data[++(s-&gt;top)] = x;  <span class="comment">// 将元素 x 入栈，栈顶索引加 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③出栈操作（element-pop-stack-s-）："><a href="#③出栈操作（element-pop-stack-s-）：" class="headerlink" title="③出栈操作（element pop(stack s)）："></a>③出栈操作（element pop(stack s)）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">element <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span> s)</span>  <span class="comment">// 出栈操作</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isempty(s))  <span class="comment">// 检查栈是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈空\n&quot;</span>);  <span class="comment">// 栈为空时打印提示信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回 -1 表示栈空错误标志</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;data[(s-&gt;top)--];  <span class="comment">// 返回栈顶元素，并将栈顶索引减 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="④检查栈是否为空（int-isempty-stack-s-）："><a href="#④检查栈是否为空（int-isempty-stack-s-）：" class="headerlink" title="④检查栈是否为空（int isempty(stack s)）："></a>④检查栈是否为空（int isempty(stack s)）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">stack</span> s)</span>  <span class="comment">// 检查栈是否为空</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == <span class="number">-1</span>;  <span class="comment">// 栈顶索引为 -1 表示栈为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⑤检查栈是否已满（int-isfull-stack-s-）："><a href="#⑤检查栈是否已满（int-isfull-stack-s-）：" class="headerlink" title="⑤检查栈是否已满（int isfull(stack s)）："></a>⑤检查栈是否已满（int isfull(stack s)）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(<span class="built_in">stack</span> s)</span>  <span class="comment">// 检查栈是否已满</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == s-&gt;maxsize - <span class="number">1</span>;  <span class="comment">// 栈顶索引等于最大容量减 1 表示栈已满</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="3、示例代码：-2"><a href="#3、示例代码：-2" class="headerlink" title="3、示例代码："></a>3、示例代码：</h2><details class="folding-tag" ><summary> 示例代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> element;  <span class="comment">// 定义 element 类型为 int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">snode</span> *<span class="title">ptrs</span>;</span>  <span class="comment">// 定义指向 snode 结构体的指针类型 ptrs</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">snode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element *data;  <span class="comment">// 指向堆栈数据的指针</span></span><br><span class="line">    <span class="type">int</span> top;  <span class="comment">// 栈顶索引</span></span><br><span class="line">    <span class="type">int</span> maxsize;  <span class="comment">// 栈的最大容量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrs <span class="built_in">stack</span>;  <span class="comment">// 定义堆栈指针类型为 stack</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">creatS</span><span class="params">(<span class="type">int</span> max)</span>;  <span class="comment">// 函数声明：创建栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> s, element x)</span>;  <span class="comment">// 函数声明：入栈操作</span></span><br><span class="line">element <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span> s)</span>;  <span class="comment">// 函数声明：出栈操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">stack</span> s)</span>;  <span class="comment">// 函数声明：检查栈是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(<span class="built_in">stack</span> s)</span>;  <span class="comment">// 函数声明：检查栈是否已满</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">5</span>;  <span class="comment">// 定义栈的最大容量为 5</span></span><br><span class="line">    <span class="built_in">stack</span> s = creatS(max);  <span class="comment">// 创建一个最大容量为 5 的栈</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> k[max + <span class="number">1</span>] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>&#125;;  <span class="comment">// 初始化一个包含 6 个整数的数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max + <span class="number">1</span>; i++)</span><br><span class="line">    push(s, k[i]);  <span class="comment">// 将数组中的每个元素入栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max + <span class="number">1</span>; i++)  <span class="comment">// 尝试弹出比max更多的元素</span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="type">int</span> result = pop(s);  <span class="comment">// 从栈中弹出每个元素</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, result);  <span class="comment">// 如果结果不是错误标志则打印</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的顺序栈，参数为栈的最大容量</span></span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">creatS</span><span class="params">(<span class="type">int</span> max)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span> s = (<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> snode));  <span class="comment">// 分配堆栈节点内存</span></span><br><span class="line">    s-&gt;data = (element*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(element) * max);  <span class="comment">// 分配存储栈数据的内存</span></span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;  <span class="comment">// 初始化栈顶索引为 -1，表示栈为空</span></span><br><span class="line">    s-&gt;maxsize = max;  <span class="comment">// 设置栈的最大容量</span></span><br><span class="line">    <span class="keyword">return</span> s;  <span class="comment">// 返回创建的栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将元素 x 入栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> s, element x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isfull(s))  <span class="comment">// 检查栈是否已满</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈满\n&quot;</span>);  <span class="comment">// 栈满时打印提示信息</span></span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// 退出函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;data[++(s-&gt;top)] = x;  <span class="comment">// 将元素 x 入栈，栈顶索引加 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈中弹出一个元素</span></span><br><span class="line">element <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isempty(s))  <span class="comment">// 检查栈是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈空\n&quot;</span>);  <span class="comment">// 栈为空时打印提示信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回 -1 表示栈空错误标志</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;data[(s-&gt;top)--];  <span class="comment">// 返回栈顶元素，并将栈顶索引减 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查栈是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">stack</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == <span class="number">-1</span>;  <span class="comment">// 栈顶索引为 -1 表示栈为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查栈是否已满</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(<span class="built_in">stack</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == s-&gt;maxsize - <span class="number">1</span>;  <span class="comment">// 栈顶索引等于最大容量减 1 表示栈已满</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="4、题目运用示例（PTA）："><a href="#4、题目运用示例（PTA）：" class="headerlink" title="4、题目运用示例（PTA）："></a>4、题目运用示例（PTA）：</h2><details class="folding-tag" ><summary> 题目运用示例 </summary>              <div class='content'>              <h4 id="7-3-有趣的括号"><a href="#7-3-有趣的括号" class="headerlink" title="7-3 有趣的括号"></a>7-3 有趣的括号</h4><blockquote><p>作者 Drizzle</p><p>单位 山东科技大学</p></blockquote><p>括号<code>()</code>的组合千奇百怪，<strong>Drizzle</strong> 想知道各种组合的括号可以是否合法<br>合法要求：每个同类型的左括号必须有与之对应的同类的右括号以正确的顺序闭合</p><p><strong>要求:</strong></p><p>输入：输入一个括号字符串<br>输出：输出是否合法，是则<code>True</code>，否则<code>False</code></p><p><strong>示例:</strong></p><p><strong>输入：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">()&#123;&#125;[]</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure><p><strong>范围:</strong></p><p>对于 100% 的数据：括号字符串长度 ≤ 100</p><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案示例："><a href="#答案示例：" class="headerlink" title="答案示例："></a>答案示例：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> element;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">snode</span> *<span class="title">ptrs</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">snode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element *data;</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">    <span class="type">int</span> maxsize;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrs <span class="built_in">stack</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">creatS</span><span class="params">(<span class="type">int</span> max)</span>;<span class="comment">//建栈 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> s,element x)</span>;<span class="comment">//入栈</span></span><br><span class="line">element <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span> s)</span>;<span class="comment">//出栈</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sisempty</span><span class="params">(<span class="built_in">stack</span> s)</span>;<span class="comment">//检查空栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,f=<span class="number">1</span>,cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">1000</span>];</span><br><span class="line">    <span class="built_in">stack</span> s1=creatS(<span class="number">100</span>);</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="keyword">while</span>(s[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>||s[i]==<span class="string">&#x27;&#123;&#x27;</span>||s[i]==<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt1++;</span><br><span class="line">            push(s1,s[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;)&#x27;</span>||s[i]==<span class="string">&#x27;&#125;&#x27;</span>||s[i]==<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt2++;</span><br><span class="line">            c1=pop(s1);</span><br><span class="line">            c2=s[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(c1!=<span class="string">&#x27;(&#x27;</span>&amp;&amp;c2==<span class="string">&#x27;)&#x27;</span>||c1!=<span class="string">&#x27;&#123;&#x27;</span>&amp;&amp;c2==<span class="string">&#x27;&#125;&#x27;</span>||c1!=<span class="string">&#x27;[&#x27;</span>&amp;&amp;c2==<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">            f=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f&amp;&amp;cnt1==cnt2)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;True&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;False&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">creatS</span><span class="params">(<span class="type">int</span> max)</span><span class="comment">//建栈</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span> s=(<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> snode));</span><br><span class="line">    s-&gt;data=(element*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(element)*max);</span><br><span class="line">    s-&gt;top=<span class="number">-1</span>;</span><br><span class="line">    s-&gt;maxsize=max;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> s,element x)</span><span class="comment">//入栈</span></span><br><span class="line">&#123;</span><br><span class="line">    s-&gt;data[++(s-&gt;top)]=x;</span><br><span class="line">&#125;</span><br><span class="line">element <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span> s)</span><span class="comment">//出栈</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;data[(s-&gt;top)--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">stack</span> s)</span><span class="comment">//检查空栈</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top==<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h1 id="三、队列（顺式-amp-循环队列）："><a href="#三、队列（顺式-amp-循环队列）：" class="headerlink" title="三、队列（顺式&amp;循环队列）："></a><span id="jump3">三、队列（顺式&amp;循环队列）：</span></h1><details class="folding-tag" ><summary> 队列 </summary>              <div class='content'>              <h2 id="1、结构定义："><a href="#1、结构定义：" class="headerlink" title="1、结构定义："></a>1、结构定义：</h2><details class="folding-tag" ><summary> 结构定义 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> *<span class="title">ptrq</span>;</span>  <span class="comment">// 定义指向 qnode 结构体的指针类型 ptrq</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span>  // 定义队列节点结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element *data;  <span class="comment">// 指向队列数据的指针</span></span><br><span class="line">    <span class="type">int</span> front, rear;  <span class="comment">// 队列的头和尾索引</span></span><br><span class="line">    <span class="type">int</span> Maxsize;  <span class="comment">// 队列的最大容量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrq <span class="built_in">queue</span>;  <span class="comment">// 定义队列指针类型为 queue</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="2、基础操作集："><a href="#2、基础操作集：" class="headerlink" title="2、基础操作集："></a>2、基础操作集：</h2><details class="folding-tag" ><summary> 基础操作集 </summary>              <div class='content'>              <h3 id="①创建队列（queue-creat-int-max-）："><a href="#①创建队列（queue-creat-int-max-）：" class="headerlink" title="①创建队列（queue creat(int max)）："></a>①创建队列（queue creat(int max)）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span> <span class="title function_">creatQ</span><span class="params">(<span class="type">int</span> max)</span>  <span class="comment">// 创建一个新的队列，参数为队列的最大容量</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span> q = (<span class="built_in">queue</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> qnode));  <span class="comment">// 分配队列节点内存</span></span><br><span class="line">    q-&gt;data = (element*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(element) * max);  <span class="comment">// 分配存储队列数据的内存</span></span><br><span class="line">    q-&gt;front = <span class="number">0</span>;  <span class="comment">// 初始化队列的头索引为 0</span></span><br><span class="line">    q-&gt;rear = <span class="number">0</span>;  <span class="comment">// 初始化队列的尾索引为 0</span></span><br><span class="line">    q-&gt;Maxsize = max;  <span class="comment">// 设置队列的最大容量</span></span><br><span class="line">    <span class="keyword">return</span> q;  <span class="comment">// 返回创建的队列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②入队操作（void-add-queue-q-element-x-）："><a href="#②入队操作（void-add-queue-q-element-x-）：" class="headerlink" title="②入队操作（void add(queue q, element x)）："></a>②入队操作（void add(queue q, element x)）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="built_in">queue</span> q, element x)</span>  <span class="comment">// 将元素 x 入队</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isfull(q))  <span class="comment">// 检查队列是否已满</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队满&quot;</span>);  <span class="comment">// 队满时打印提示信息</span></span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// 退出函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % q-&gt;Maxsize;  <span class="comment">// 更新队尾索引，循环队列实现</span></span><br><span class="line">    q-&gt;data[q-&gt;rear] = x;  <span class="comment">// 将元素 x 入队</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③出队操作（element-deleteq-queue-q-）："><a href="#③出队操作（element-deleteq-queue-q-）：" class="headerlink" title="③出队操作（element deleteq(queue q)）："></a>③出队操作（element deleteq(queue q)）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">element <span class="title function_">deleteq</span><span class="params">(<span class="built_in">queue</span> q)</span>  <span class="comment">// 从队列中删除一个元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isempty(q))  <span class="comment">// 检查队列是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队空&quot;</span>);  <span class="comment">// 队列为空时打印提示信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 返回 0 表示删除失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;front = (q-&gt;front + <span class="number">1</span>) % q-&gt;Maxsize;  <span class="comment">// 更新队头索引，循环队列实现</span></span><br><span class="line">    <span class="keyword">return</span> q-&gt;data[q-&gt;front];  <span class="comment">// 返回队头元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="④检查队列是否已满（int-isfull-queue-q-）："><a href="#④检查队列是否已满（int-isfull-queue-q-）：" class="headerlink" title="④检查队列是否已满（int isfull(queue q)）："></a>④检查队列是否已满（int isfull(queue q)）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(<span class="built_in">queue</span> q)</span>  <span class="comment">// 检查队列是否已满</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % q-&gt;Maxsize == q-&gt;front)  <span class="comment">// 判断队尾索引加 1 后是否等于队头索引</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回 1 表示队列已满</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 返回 0 表示队列未满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="⑤检查队列是否为空（int-isempty-queue-q-）："><a href="#⑤检查队列是否为空（int-isempty-queue-q-）：" class="headerlink" title="⑤检查队列是否为空（int isempty(queue q)）："></a>⑤检查队列是否为空（int isempty(queue q)）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">queue</span> q)</span>  <span class="comment">// 检查队列是否为空</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;rear == q-&gt;front)  <span class="comment">// 判断队尾索引是否等于队头索引</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回 1 表示队列为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 返回 0 表示队列不为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="3、示例代码：-3"><a href="#3、示例代码：-3" class="headerlink" title="3、示例代码："></a>3、示例代码：</h2><details class="folding-tag" ><summary> 示例代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> element;  <span class="comment">// 定义 element 类型为 char</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> *<span class="title">ptrq</span>;</span>  <span class="comment">// 定义指向 qnode 结构体的指针类型 ptrq</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span>  // 定义队列节点结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element *data;  <span class="comment">// 指向队列数据的指针</span></span><br><span class="line">    <span class="type">int</span> front, rear;  <span class="comment">// 队列的头和尾索引</span></span><br><span class="line">    <span class="type">int</span> Maxsize;  <span class="comment">// 队列的最大容量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrq <span class="built_in">queue</span>;  <span class="comment">// 定义队列指针类型为 queue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span> <span class="title function_">creatQ</span><span class="params">(<span class="type">int</span> max)</span>;  <span class="comment">// 函数声明：创建队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="built_in">queue</span> q, element x)</span>;  <span class="comment">// 函数声明：入队操作</span></span><br><span class="line">element <span class="title function_">deleteq</span><span class="params">(<span class="built_in">queue</span> q)</span>;  <span class="comment">// 函数声明：出队操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(<span class="built_in">queue</span> q)</span>;  <span class="comment">// 函数声明：检查队列是否已满</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">queue</span> q)</span>;  <span class="comment">// 函数声明：检查队列是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">5</span>;  <span class="comment">// 定义队列的最大容量为 5</span></span><br><span class="line">    <span class="built_in">queue</span> q = creatQ(max);  <span class="comment">// 创建一个最大容量为 5 的队列</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> c[<span class="number">6</span>] = &#123;<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;%&#x27;</span>&#125;;  <span class="comment">// 初始化一个包含 6 个字符的数组</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i++)</span><br><span class="line">    add(q, c[i]);  <span class="comment">// 将数组中的每个元素入队</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, deleteq(q));  <span class="comment">// 从队列中删除每个元素并打印</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序队列：循环队列</span></span><br><span class="line"><span class="built_in">queue</span> <span class="title function_">creatQ</span><span class="params">(<span class="type">int</span> max)</span>  <span class="comment">// 创建一个新的队列，参数为队列的最大容量</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span> q = (<span class="built_in">queue</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> qnode));  <span class="comment">// 分配队列节点内存</span></span><br><span class="line">    q-&gt;data = (element*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(element) * max);  <span class="comment">// 分配存储队列数据的内存</span></span><br><span class="line">    q-&gt;front = <span class="number">0</span>;  <span class="comment">// 初始化队列的头索引为 0</span></span><br><span class="line">    q-&gt;rear = <span class="number">0</span>;  <span class="comment">// 初始化队列的尾索引为 0</span></span><br><span class="line">    q-&gt;Maxsize = max;  <span class="comment">// 设置队列的最大容量</span></span><br><span class="line">    <span class="keyword">return</span> q;  <span class="comment">// 返回创建的队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="built_in">queue</span> q, element x)</span>  <span class="comment">// 将元素 x 入队</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isfull(q))  <span class="comment">// 检查队列是否已满</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队满&quot;</span>);  <span class="comment">// 队满时打印提示信息</span></span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// 退出函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % q-&gt;Maxsize;  <span class="comment">// 更新队尾索引，循环队列实现</span></span><br><span class="line">    q-&gt;data[q-&gt;rear] = x;  <span class="comment">// 将元素 x 入队</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">element <span class="title function_">deleteq</span><span class="params">(<span class="built_in">queue</span> q)</span>  <span class="comment">// 从队列中删除一个元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isempty(q))  <span class="comment">// 检查队列是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队空&quot;</span>);  <span class="comment">// 队列为空时打印提示信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 返回 0 表示删除失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;front = (q-&gt;front + <span class="number">1</span>) % q-&gt;Maxsize;  <span class="comment">// 更新队头索引，循环队列实现</span></span><br><span class="line">    <span class="keyword">return</span> q-&gt;data[q-&gt;front];  <span class="comment">// 返回队头元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(<span class="built_in">queue</span> q)</span>  <span class="comment">// 检查队列是否已满</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % q-&gt;Maxsize == q-&gt;front)  <span class="comment">// 判断队尾索引加 1 后是否等于队头索引</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回 1 表示队列已满</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 返回 0 表示队列未满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">queue</span> q)</span>  <span class="comment">// 检查队列是否为空</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;rear == q-&gt;front)  <span class="comment">// 判断队尾索引是否等于队头索引</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回 1 表示队列为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 返回 0 表示队列不为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="4、题目运用示例（PTA）：-1"><a href="#4、题目运用示例（PTA）：-1" class="headerlink" title="4、题目运用示例（PTA）："></a>4、题目运用示例（PTA）：</h2><details class="folding-tag" ><summary> 题目运用示例 </summary>              <div class='content'>              <h4 id="7-2-队的基本操作"><a href="#7-2-队的基本操作" class="headerlink" title="7-2 队的基本操作"></a>7-2 队的基本操作</h4><blockquote><p>作者 唐艳琴</p><p>单位 中国人民解放军陆军工程大学</p></blockquote><p>给定一个初始为空的队（队存储空间长度为10）和一系列进队、出队操作，请编写程序输出经过这些操作后队中的元素。队中元素值均为整数。（采用循环队列完成，禁用一个空间方法）</p><p><strong>输入格式:</strong></p><p>输入第1行为1个正整数n，表示操作个数；</p><p>第2行为给出的n个整数，非0元素表示进队，且此非0值即为进队元素，0元素表示出队。</p><p><strong>输出格式:</strong></p><p>第一行按出队顺序输出所有出队元素，以一个空格隔开；如果队空时做出队操作会输出”EMPTY”，如果队满时做进队操作会输出”FULL”。</p><p>第二行中输出队中所有元素，以一个空格隔开。</p><p>末尾均有一个空格。</p><p><strong>输入样例:</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">5</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">-1</span> EMPTY <span class="number">4</span> </span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案示例："><a href="#答案示例：" class="headerlink" title="答案示例："></a>答案示例：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> *<span class="title">ptrq</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element *data;</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">    <span class="type">int</span> Maxsize;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrq <span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span> <span class="title function_">creatQ</span><span class="params">(<span class="type">int</span> max)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="built_in">queue</span> q, element x)</span>;</span><br><span class="line">element <span class="title function_">deleteq</span><span class="params">(<span class="built_in">queue</span> q)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(<span class="built_in">queue</span> q)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">queue</span> q)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">queue</span> q = creatQ(max);</span><br><span class="line">    <span class="type">int</span> i,s,m,l=<span class="number">0</span>,x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">        <span class="keyword">if</span>(s != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x = add(q, s);</span><br><span class="line">            <span class="keyword">if</span>(!x)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;FULL &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = deleteq(q);</span><br><span class="line">            <span class="keyword">if</span>(x != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,x);</span><br><span class="line">                l--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;EMPTY &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,deleteq(q));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span> <span class="title function_">creatQ</span><span class="params">(<span class="type">int</span> max)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span> q = (<span class="built_in">queue</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> qnode));</span><br><span class="line">    q-&gt;data = (element*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(element) * max);</span><br><span class="line">    q-&gt;front = <span class="number">0</span>;</span><br><span class="line">    q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    q-&gt;Maxsize = max;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="built_in">queue</span> q, element x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isfull(q))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % q-&gt;Maxsize;</span><br><span class="line">    q-&gt;data[q-&gt;rear] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">element <span class="title function_">deleteq</span><span class="params">(<span class="built_in">queue</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isempty(q))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;front = (q-&gt;front + <span class="number">1</span>) % q-&gt;Maxsize;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;data[q-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(<span class="built_in">queue</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % q-&gt;Maxsize == q-&gt;front)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">queue</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;rear == q-&gt;front)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h1 id="四、堆栈与队列的联合运用"><a href="#四、堆栈与队列的联合运用" class="headerlink" title="四、堆栈与队列的联合运用"></a><span id="jump4">四、堆栈与队列的联合运用</span></h1><details class="folding-tag" ><summary> 堆栈与队列的联合运用 </summary>              <div class='content'>              <blockquote><p>作者 幻梦</p><p>单位 无</p></blockquote><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>给定一个递增数列，利用堆栈和队列，分别将其中的奇数按降序输出，其中的偶数按增序输出。</p><p><strong>输入格式：</strong></p><p>输入第1行为1个正整数n，表示数列长度；</p><p>第2行为给出的长度为n个整数的递增数列。</p><p><strong>输出格式：</strong></p><p>第1行按降序输出数列中的所有奇数；</p><p>第2行按增序输出数列中的所有偶数；</p><p><strong>输入样例:</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">17</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">17</span> <span class="number">13</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">8</span> <span class="number">12</span> <span class="number">14</span> <span class="number">18</span> </span><br></pre></td></tr></table></figure><h2 id="答案示例："><a href="#答案示例：" class="headerlink" title="答案示例："></a>答案示例：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> element;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">snode</span> *<span class="title">ptrs</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">snode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element *data;</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">    <span class="type">int</span> maxsize;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrs <span class="built_in">stack</span>;</span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">creatS</span><span class="params">(<span class="type">int</span> max)</span>; </span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> s,element x)</span>;</span><br><span class="line">element <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span> s)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sisempty</span><span class="params">(<span class="built_in">stack</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> *<span class="title">ptrq</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element *data;</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line">    <span class="type">int</span> Maxsize;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> ptrq <span class="built_in">queue</span>;</span><br><span class="line"><span class="built_in">queue</span> <span class="title function_">creatQ</span><span class="params">(<span class="type">int</span> max)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="built_in">queue</span> q,element x)</span>;</span><br><span class="line">element <span class="title function_">deleteq</span><span class="params">(<span class="built_in">queue</span> q)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">qisfull</span><span class="params">(<span class="built_in">queue</span> q)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">1000</span>,n;</span><br><span class="line">    <span class="built_in">queue</span> q=creatQ(max);</span><br><span class="line">    <span class="built_in">stack</span> s=creatS(max);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m,i,scnt=<span class="number">0</span>,qcnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(m%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            push(s,m);</span><br><span class="line">            scnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            add(q,m);</span><br><span class="line">            qcnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;scnt;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,pop(s));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;qcnt;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,deleteq(q));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span> <span class="title function_">creatS</span><span class="params">(<span class="type">int</span> max)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span> s=(<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> snode));</span><br><span class="line">    s-&gt;data=(element*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(element)*max);</span><br><span class="line">    s-&gt;top=<span class="number">-1</span>;</span><br><span class="line">    s-&gt;maxsize=max;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="built_in">stack</span> s,element x)</span></span><br><span class="line">&#123;</span><br><span class="line">    s-&gt;data[++(s-&gt;top)]=x;</span><br><span class="line">&#125;</span><br><span class="line">element <span class="title function_">pop</span><span class="params">(<span class="built_in">stack</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;data[(s-&gt;top)--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">stack</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top==<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span> <span class="title function_">creatQ</span><span class="params">(<span class="type">int</span> max)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span> q=(<span class="built_in">queue</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> qnode));</span><br><span class="line">    q-&gt;data=(element*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(element)*max);</span><br><span class="line">    q-&gt;front=<span class="number">0</span>;</span><br><span class="line">    q-&gt;rear=<span class="number">0</span>;</span><br><span class="line">    q-&gt;Maxsize=max;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="built_in">queue</span> q,element x)</span></span><br><span class="line">&#123;</span><br><span class="line">    q-&gt;rear=(q-&gt;rear+<span class="number">1</span>)%q-&gt;Maxsize;</span><br><span class="line">    q-&gt;data[q-&gt;rear]=x;</span><br><span class="line">&#125;</span><br><span class="line">element <span class="title function_">deleteq</span><span class="params">(<span class="built_in">queue</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">    q-&gt;front=(q-&gt;front+<span class="number">1</span>)%q-&gt;Maxsize;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;data[q-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">qisfull</span><span class="params">(<span class="built_in">queue</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>((q-&gt;rear+<span class="number">1</span>)%q-&gt;Maxsize==q-&gt;front)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="五、二叉树"><a href="#五、二叉树" class="headerlink" title="五、二叉树"></a><span id="jump5">五、二叉树</span></h1><details class="folding-tag" ><summary> 二叉树 </summary>              <div class='content'>              <h2 id="（一）普通二叉树的创建"><a href="#（一）普通二叉树的创建" class="headerlink" title="（一）普通二叉树的创建"></a>（一）普通二叉树的创建</h2><details class="folding-tag" ><summary> 5.1普通二叉树的创建 </summary>              <div class='content'>              <h3 id="1、结构定义："><a href="#1、结构定义：" class="headerlink" title="1、结构定义："></a>1、结构定义：</h3><details class="folding-tag" ><summary> 5.1.1结构定义 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">ptrt</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> ptrt bintree;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> &#123;</span></span><br><span class="line">    element data;</span><br><span class="line">    bintree ltree;</span><br><span class="line">    bintree rtree;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="2、三种创建方法"><a href="#2、三种创建方法" class="headerlink" title="2、三种创建方法"></a>2、三种创建方法</h3><details class="folding-tag" ><summary> 三种创建方法 </summary>              <div class='content'>              <h3 id="（1）先序遍历-数组创建"><a href="#（1）先序遍历-数组创建" class="headerlink" title="（1）先序遍历+数组创建"></a>（1）先序遍历+数组创建</h3><details class="folding-tag" ><summary> 先序遍历+数组创建 </summary>              <div class='content'>              <h4 id="①函数定义："><a href="#①函数定义：" class="headerlink" title="①函数定义："></a>①函数定义：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">creatT</span><span class="params">(bintree &amp;T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        T=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bintree t=(bintree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tnode));</span><br><span class="line">    t-&gt;data=a;</span><br><span class="line">    T=t;</span><br><span class="line">    creatT(T-&gt;ltree);</span><br><span class="line">    creatT(T-&gt;rtree);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②示例代码（输出所有节点）："><a href="#②示例代码（输出所有节点）：" class="headerlink" title="②示例代码（输出所有节点）："></a>②示例代码（输出所有节点）：</h4><p><strong>输入样例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先序遍历创建树 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> element;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">ptrt</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> ptrt bintree;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    element data;</span><br><span class="line">    bintree rtree;</span><br><span class="line">    bintree ltree;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">creatT</span><span class="params">(bintree &amp;T)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">precheck</span><span class="params">(bintree T)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    bintree t;</span><br><span class="line">    creatT(t);</span><br><span class="line">    precheck(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">creatT</span><span class="params">(bintree &amp;T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        T=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bintree t=(bintree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tnode));</span><br><span class="line">    t-&gt;data=a;</span><br><span class="line">    T=t;</span><br><span class="line">    creatT(T-&gt;ltree);</span><br><span class="line">    creatT(T-&gt;rtree);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">precheck</span><span class="params">(bintree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,T-&gt;data);</span><br><span class="line">        precheck(T-&gt;ltree);</span><br><span class="line">        precheck(T-&gt;rtree);       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="（2）先序遍历-中序遍历"><a href="#（2）先序遍历-中序遍历" class="headerlink" title="（2）先序遍历+中序遍历"></a>（2）先序遍历+中序遍历</h3><details class="folding-tag" ><summary> 先序遍历+中序遍历 </summary>              <div class='content'>              <h4 id="①函数定义："><a href="#①函数定义：" class="headerlink" title="①函数定义："></a>①函数定义：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建二叉树函数，参数为前序遍历数组、中序遍历数组和数组大小</span></span><br><span class="line">bintree <span class="title function_">creatT</span><span class="params">(<span class="type">char</span> pre[], <span class="type">char</span> in[], <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)  <span class="comment">// 如果大小为0，返回空指针</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 分配新节点的内存</span></span><br><span class="line">    bintree t = (bintree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tnode));</span><br><span class="line">    <span class="comment">// 将先序遍历的第一个元素赋值给新节点的数据域</span></span><br><span class="line">    t-&gt;data = pre[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *p;  <span class="comment">// 用于遍历中序数组的指针</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;  <span class="comment">// 用于计算左子树的节点数</span></span><br><span class="line">    <span class="keyword">for</span> (p = in; p &lt; in + size; p++)  <span class="comment">// 遍历中序数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*p == pre[<span class="number">0</span>])  <span class="comment">// 找到根节点在中序数组中的位置</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        k++;  <span class="comment">// 计算左子树的节点数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归创建左子树</span></span><br><span class="line">    t-&gt;ltree = creatT(pre + <span class="number">1</span>, in, k);</span><br><span class="line">    <span class="comment">// 递归创建右子树</span></span><br><span class="line">    t-&gt;rtree = creatT(pre + k + <span class="number">1</span>, in + k + <span class="number">1</span>, size - k - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> t;  <span class="comment">// 返回创建的树节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②示例代码（输出其后序遍历）："><a href="#②示例代码（输出其后序遍历）：" class="headerlink" title="②示例代码（输出其后序遍历）："></a>②示例代码（输出其后序遍历）：</h4><p><strong>输入样例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line">ABDFGHIEC</span><br><span class="line">FDHGIBEAC</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FHIGDEBCA</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> element;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">ptrt</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> ptrt bintree;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> &#123;</span></span><br><span class="line">    element data;   <span class="comment">// 数据域</span></span><br><span class="line">    bintree ltree;  <span class="comment">// 左子树指针</span></span><br><span class="line">    bintree rtree;  <span class="comment">// 右子树指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二叉树函数，参数为前序遍历数组、中序遍历数组和数组大小</span></span><br><span class="line">bintree <span class="title function_">creatT</span><span class="params">(<span class="type">char</span> pre[], <span class="type">char</span> in[], <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)  <span class="comment">// 如果大小为0，返回空指针</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 分配新节点的内存</span></span><br><span class="line">    bintree t = (bintree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tnode));</span><br><span class="line">    <span class="comment">// 将先序遍历的一个元素赋值给新节点的数据域</span></span><br><span class="line">    t-&gt;data = pre[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *p;  <span class="comment">// 用于遍历中序数组的指针</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;  <span class="comment">// 用于计算左子树的节点数</span></span><br><span class="line">    <span class="keyword">for</span> (p = in; p &lt; in + size; p++)  <span class="comment">// 遍历中序数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*p == pre[<span class="number">0</span>])  <span class="comment">// 找到根节点在中序数组中的位置</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        k++;  <span class="comment">// 计算左子树的节点数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归创建左子树</span></span><br><span class="line">    t-&gt;ltree = creatT(pre + <span class="number">1</span>, in, k);</span><br><span class="line">    <span class="comment">// 递归创建右子树</span></span><br><span class="line">    t-&gt;rtree = creatT(pre + k + <span class="number">1</span>, in + k + <span class="number">1</span>, size - k - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> t;  <span class="comment">// 返回创建的树节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示二叉树的后序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(bintree t)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">    &#123;</span><br><span class="line">        show(t-&gt;ltree);   <span class="comment">// 递归遍历左子树</span></span><br><span class="line">        show(t-&gt;rtree);   <span class="comment">// 递归遍历右子树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, t-&gt;data);  <span class="comment">// 输出当前节点的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> pre[<span class="number">1000</span>], in[<span class="number">1000</span>];  <span class="comment">// 定义先序和中序遍历数组</span></span><br><span class="line">    <span class="type">int</span> m, i;  <span class="comment">// 定义节点数和循环变量</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);  <span class="comment">// 读取节点数</span></span><br><span class="line">    getchar();  <span class="comment">// 消耗换行符</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;pre[i]);  <span class="comment">// 读取先序遍历数组</span></span><br><span class="line">    getchar();  <span class="comment">// 消耗换行符</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;in[i]);  <span class="comment">// 读取中序遍历数组</span></span><br><span class="line">    <span class="comment">// 创建二叉树</span></span><br><span class="line">    bintree t = creatT(pre, in, m);</span><br><span class="line">    <span class="comment">// 显示二叉树的后序遍历</span></span><br><span class="line">    show(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）层序遍历"><a href="#（3）层序遍历" class="headerlink" title="（3）层序遍历"></a>（3）层序遍历</h3><details class="folding-tag" ><summary> 层序遍历 </summary>              <div class='content'>              <h4 id="①函数定义："><a href="#①函数定义：" class="headerlink" title="①函数定义："></a>①函数定义：</h4><p><strong>创建节点（bintree creatT(element x) ）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建二叉树节点</span></span><br><span class="line">bintree <span class="title function_">creatT</span><span class="params">(element x)</span></span><br><span class="line">&#123;</span><br><span class="line">    bintree tnode = (bintree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tnode)); <span class="comment">// 分配内存并创建新节点</span></span><br><span class="line">    tnode-&gt;data = x; <span class="comment">// 设置节点数据</span></span><br><span class="line">    tnode-&gt;ltree = <span class="literal">NULL</span>; <span class="comment">// 初始化左子树为空</span></span><br><span class="line">    tnode-&gt;rtree = <span class="literal">NULL</span>; <span class="comment">// 初始化右子树为空</span></span><br><span class="line">    <span class="keyword">return</span> tnode; <span class="comment">// 返回新创建的节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建二叉树（bintree buildTree(element arr[], int size)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据层序遍历序列构建完全二叉树</span></span><br><span class="line">bintree <span class="title function_">buildTree</span><span class="params">(element arr[], <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 如果序列为空，返回 NULL</span></span><br><span class="line">    bintree *tnode = (bintree*)<span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(bintree)); <span class="comment">// 分配指针数组空间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        tnode[i] = creatT(arr[i]); <span class="comment">// 为序列中的每个元素创建节点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size &amp;&amp; j &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tnode[i] != <span class="literal">NULL</span>) <span class="comment">// 如果当前节点不为空</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; size) tnode[i]-&gt;ltree = tnode[j++]; <span class="comment">// 设置左子树</span></span><br><span class="line">            <span class="keyword">if</span> (j &lt; size) tnode[i]-&gt;rtree = tnode[j++]; <span class="comment">// 设置右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bintree root = tnode[<span class="number">0</span>]; <span class="comment">// 根节点为第一个元素</span></span><br><span class="line">    <span class="built_in">free</span>(tnode);</span><br><span class="line">    <span class="keyword">return</span> root; <span class="comment">// 返回根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②示例代码"><a href="#②示例代码" class="headerlink" title="②示例代码"></a>②示例代码</h4><p><strong>输入样例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">91</span> <span class="number">71</span> <span class="number">2</span> <span class="number">34</span> <span class="number">10</span> <span class="number">15</span> <span class="number">55</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">91</span> <span class="number">71</span> <span class="number">34</span> <span class="number">18</span> <span class="number">10</span> <span class="number">2</span> <span class="number">15</span> <span class="number">55</span></span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max 1000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> element;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">ptrt</span>;</span> <span class="comment">// 定义指向 tnode 结构的指针类型 ptrt</span></span><br><span class="line"><span class="keyword">typedef</span> ptrt bintree; <span class="comment">// 定义 bintree 类型为指向 tnode 结构的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> &#123;</span> </span><br><span class="line">    element data; <span class="comment">// 节点数据</span></span><br><span class="line">    bintree ltree; <span class="comment">// 指向左子树的指针</span></span><br><span class="line">    bintree rtree; <span class="comment">// 指向右子树的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二叉树节点</span></span><br><span class="line">bintree <span class="title function_">creatT</span><span class="params">(element x)</span></span><br><span class="line">&#123;</span><br><span class="line">    bintree tnode = (bintree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tnode)); <span class="comment">// 分配内存并创建新节点</span></span><br><span class="line">    tnode-&gt;data = x; <span class="comment">// 设置节点数据</span></span><br><span class="line">    tnode-&gt;ltree = <span class="literal">NULL</span>; <span class="comment">// 初始化左子树为空</span></span><br><span class="line">    tnode-&gt;rtree = <span class="literal">NULL</span>; <span class="comment">// 初始化右子树为空</span></span><br><span class="line">    <span class="keyword">return</span> tnode; <span class="comment">// 返回新创建的节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据层序遍历序列构建完全二叉树</span></span><br><span class="line">bintree <span class="title function_">buildTree</span><span class="params">(element arr[], <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 如果序列为空，返回 NULL</span></span><br><span class="line">    bintree *tnode = (bintree*)<span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(bintree)); <span class="comment">// 分配指针数组空间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        tnode[i] = creatT(arr[i]); <span class="comment">// 为序列中的每个元素创建节点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size &amp;&amp; j &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tnode[i] != <span class="literal">NULL</span>) <span class="comment">// 如果当前节点不为空</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; size) tnode[i]-&gt;ltree = tnode[j++]; <span class="comment">// 设置左子树</span></span><br><span class="line">            <span class="keyword">if</span> (j &lt; size) tnode[i]-&gt;rtree = tnode[j++]; <span class="comment">// 设置右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bintree root = tnode[<span class="number">0</span>]; <span class="comment">// 根节点为第一个元素</span></span><br><span class="line">    <span class="built_in">free</span>(tnode);</span><br><span class="line">    <span class="keyword">return</span> root; <span class="comment">// 返回根节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序遍历二叉树并输出结果</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">precheck</span><span class="params">(bintree root)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data); <span class="comment">// 输出当前节点数据</span></span><br><span class="line">        precheck(root-&gt;ltree); <span class="comment">// 递归遍历左子树</span></span><br><span class="line">        precheck(root-&gt;rtree); <span class="comment">// 递归遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="comment">// 输入元素个数</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    element arr[max]; <span class="comment">// 定义存储元素的数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">    bintree root = buildTree(arr, n); <span class="comment">// 构建二叉树</span></span><br><span class="line">    precheck(root); <span class="comment">// 先序遍历并输出结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;oot = buildTree(arr, n);</span><br><span class="line">    precheck(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><h2 id="（二）平衡二叉树"><a href="#（二）平衡二叉树" class="headerlink" title="（二）平衡二叉树"></a>（二）平衡二叉树</h2><details class="folding-tag" ><summary> 平衡二叉树 </summary>              <div class='content'>              <h3 id="（1）基础操作集："><a href="#（1）基础操作集：" class="headerlink" title="（1）基础操作集："></a>（1）基础操作集：</h3><details class="folding-tag" ><summary> 基础操作集 </summary>              <div class='content'>              <p><strong>①创建新节点（avlt newNode(int val)）：</strong>  </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">avlt <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    avlt node = (avlt)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;val = val;</span><br><span class="line">    node-&gt;height = <span class="number">1</span>;</span><br><span class="line">    node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②获取树的高度（int getHeight(avlt node)）：</strong> </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(avlt node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> node-&gt;height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③辅助函数（int max(int a, int b)）：</strong> </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b)?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>④获取平衡因子（int getBalance(avlt node)）：</strong> </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getBalance</span><span class="params">(avlt node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getHeight(node-&gt;left) - getHeight(node-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑤先序遍历（void preOrder(avlt root)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">preOrder</span><span class="params">(avlt root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;val);</span><br><span class="line">    preOrder(root-&gt;left);</span><br><span class="line">    preOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑥中序遍历（void midOrder(avlt root)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">midOrder</span><span class="params">(avlt root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    midOrder(root-&gt;left);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;val);</span><br><span class="line">    midOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑦查找（avlt find(avlt root, int key, int* counter)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">avlt <span class="title function_">find</span><span class="params">(avlt root, <span class="type">int</span> key, <span class="type">int</span>* counter)</span>&#123;</span><br><span class="line">    avlt cur = root;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; cur-&gt;val)&#123;</span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">            (*counter)++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; cur-&gt;val) &#123;</span><br><span class="line">            cur = cur-&gt;right;</span><br><span class="line">            (*counter)++;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找了一圈，没找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑧左旋函数（void preOrder(avlt root)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">avlt <span class="title function_">leftRoate</span><span class="params">(avlt root)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.当前结点的右子树会作为新树的根结点</span></span><br><span class="line">    <span class="comment">// 2.当前结点root会作为新树的根结点newroot-&gt;left的左子树</span></span><br><span class="line">    <span class="comment">//如果，新的树根，原来有左子树，原来的左子树，就作为旧根结点的右子树</span></span><br><span class="line">    avlt newroot = root-&gt;right;</span><br><span class="line">    <span class="comment">// T2保存新树根原来的左子树</span></span><br><span class="line">    avlt T2 = newroot-&gt;left;</span><br><span class="line">    <span class="comment">// 当前结点会作为新树根的左子树</span></span><br><span class="line">    newroot-&gt;left = root;</span><br><span class="line">    root-&gt;right = T2;</span><br><span class="line">    <span class="comment">// 更新树高，root newroot</span></span><br><span class="line">    root-&gt;height = <span class="number">1</span> + max(getHeight(root-&gt;left), getHeight(root-&gt;right));</span><br><span class="line">    newroot-&gt;height = <span class="number">1</span> + max(getHeight(newroot-&gt;left), getHeight(newroot-&gt;right));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newroot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑨右旋函数（void preOrder(avlt root)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">avlt <span class="title function_">rightRotate</span><span class="params">(avlt root)</span>&#123;</span><br><span class="line">    avlt newroot = root-&gt;left;</span><br><span class="line">    avlt T2 = newroot-&gt;right;</span><br><span class="line">    newroot-&gt;right = root;</span><br><span class="line">    root-&gt;left = T2;</span><br><span class="line">    <span class="comment">//更新树高</span></span><br><span class="line">    root-&gt;height = <span class="number">1</span> + max(getHeight(root-&gt;left), getHeight(root-&gt;right));</span><br><span class="line">    newroot-&gt;height = <span class="number">1</span> + max(getHeight(newroot-&gt;left), getHeight(newroot-&gt;right));</span><br><span class="line">    <span class="keyword">return</span> newroot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑩插入结点（avlt insertNode(avlt node, int key)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">avlt <span class="title function_">insertNode</span><span class="params">(avlt node, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> newNode(key);</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node-&gt;val)</span><br><span class="line">        node-&gt;left = insertNode(node-&gt;left, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node-&gt;val)</span><br><span class="line">        node-&gt;right = insertNode(node-&gt;right, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="comment">//更新树高</span></span><br><span class="line">    node-&gt;height = <span class="number">1</span> + max(getHeight(node-&gt;left), getHeight(node-&gt;right));</span><br><span class="line">    <span class="comment">// 获取当前结点的平衡因子</span></span><br><span class="line">    <span class="type">int</span> balance = getBalance(node);</span><br><span class="line">    <span class="comment">// 我们是否需要调整这个树，是看平衡因子是不是绝对值大于1</span></span><br><span class="line">    <span class="comment">// LL型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalance(node-&gt;left) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    <span class="comment">// LR型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalance(node-&gt;left) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        node-&gt;left = leftRoate(node-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// RR型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt; <span class="number">-1</span> &amp;&amp; getBalance(node-&gt;right) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> leftRoate(node);</span><br><span class="line">    <span class="comment">// RL型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt; <span class="number">-1</span> &amp;&amp; getBalance(node-&gt;right) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        node-&gt;right = rightRotate(node-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> leftRoate(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑪删除结点（avlt deleteNode(avlt node,int key)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">avlt <span class="title function_">deleteNode</span><span class="params">(avlt node,<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">if</span>(key&lt;node-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        node-&gt;left=deleteNode(node-&gt;left,key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&gt;node-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        node-&gt;right=deleteNode(node-&gt;right,key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key==node-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//删除的是叶节点 </span></span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left==<span class="literal">NULL</span>&amp;&amp;node-&gt;right==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            avlt temp=node;</span><br><span class="line">            node=<span class="literal">NULL</span>;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除的是只有右孩子的节点 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;left==<span class="literal">NULL</span>&amp;&amp;node-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            avlt temp=node;</span><br><span class="line">            node=node-&gt;right;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除的是只有左孩子的节点 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>&amp;&amp;node-&gt;right==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            avlt temp=node;</span><br><span class="line">            node=node-&gt;left;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除的是有左右孩子的节点 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>&amp;&amp;node-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            avlt cur=node-&gt;right;</span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;left!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cur=cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            node-&gt;val=cur-&gt;val;</span><br><span class="line">            node-&gt;right=deleteNode(node-&gt;right,cur-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="comment">//更新树高</span></span><br><span class="line">    node-&gt;height = <span class="number">1</span> + max(getHeight(node-&gt;left), getHeight(node-&gt;right));</span><br><span class="line">    <span class="comment">// 获取当前结点的平衡因子</span></span><br><span class="line">    <span class="type">int</span> balance = getBalance(node);</span><br><span class="line">    <span class="comment">// 我们是否需要调整这个树，是看平衡因子是不是绝对值大于1</span></span><br><span class="line">    <span class="comment">// LL型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalance(node-&gt;left) &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    <span class="comment">// LR型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalance(node-&gt;left) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        node-&gt;left = leftRoate(node-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// RR型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt; <span class="number">-1</span> &amp;&amp; getBalance(node-&gt;right) &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> leftRoate(node);</span><br><span class="line">    <span class="comment">// RL型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt; <span class="number">-1</span> &amp;&amp; getBalance(node-&gt;right) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        node-&gt;right = rightRotate(node-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> leftRoate(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="（2）完整代码示例："><a href="#（2）完整代码示例：" class="headerlink" title="（2）完整代码示例："></a>（2）完整代码示例：</h3><details class="folding-tag" ><summary> 完整代码示例 </summary>              <div class='content'>              <p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">// 定义树结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">ptravlt</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> ptravlt avlt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> val;<span class="comment">// 数据域</span></span><br><span class="line">    <span class="type">int</span> height;<span class="comment">// 树高</span></span><br><span class="line">    avlt left;</span><br><span class="line">    avlt right;</span><br><span class="line">&#125;Node;</span><br><span class="line">avlt <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> val)</span>;<span class="comment">//定义函数生成新的结点，返回值是指向这个结点的指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(avlt node)</span>;<span class="comment">// 获取树的高度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getBalance</span><span class="params">(avlt node)</span>;<span class="comment">// 获取平衡因子</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrder</span><span class="params">(avlt root)</span>;<span class="comment">// 先序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">midOrder</span><span class="params">(avlt root)</span>;<span class="comment">// 中序遍历</span></span><br><span class="line">avlt <span class="title function_">find</span><span class="params">(avlt root, <span class="type">int</span> key, <span class="type">int</span>* counter)</span>;<span class="comment">// 查找</span></span><br><span class="line">avlt <span class="title function_">leftRoate</span><span class="params">(avlt root)</span>;<span class="comment">//左旋函数</span></span><br><span class="line">avlt <span class="title function_">rightRotate</span><span class="params">(avlt root)</span>;<span class="comment">//右旋函数</span></span><br><span class="line">avlt <span class="title function_">insertNode</span><span class="params">(avlt node, <span class="type">int</span> key)</span>;<span class="comment">// 插入结点</span></span><br><span class="line">avlt <span class="title function_">deleteNode</span><span class="params">(avlt node,<span class="type">int</span> key)</span>;<span class="comment">// 删除结点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    avlt root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">7</span>]=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        root = insertNode(root, a[i]);</span><br><span class="line">    <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    avlt result = find(root, <span class="number">70</span>, &amp;counter);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;找了几次:%d\n&quot;</span>, counter);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;查找到的地址:%d 该地址的值:%d \n&quot;</span>, result, result-&gt;val);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------先序遍历结果--------\n&quot;</span>);</span><br><span class="line">    preOrder(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n-------中序遍历结果--------\n&quot;</span>);</span><br><span class="line">    midOrder(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    counter = <span class="number">0</span>;</span><br><span class="line">    root = deleteNode(root, <span class="number">10</span>);</span><br><span class="line">    root = deleteNode(root, <span class="number">20</span>);</span><br><span class="line">    root = deleteNode(root, <span class="number">30</span>);</span><br><span class="line">    result = find(root, <span class="number">40</span>, &amp;counter);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;找了几次:%d\n&quot;</span>, counter);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;查找到的地址:%d 该地址的值:%d \n&quot;</span>, result, result-&gt;val);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------先序遍历结果--------\n&quot;</span>);</span><br><span class="line">    preOrder(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n-------中序遍历结果--------\n&quot;</span>);</span><br><span class="line">    midOrder(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义函数生成新的结点，返回值是指向这个结点的指针</span></span><br><span class="line">avlt <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    avlt node = (avlt)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;val = val;</span><br><span class="line">    node-&gt;height = <span class="number">1</span>;</span><br><span class="line">    node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取树的高度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(avlt node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> node-&gt;height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b)?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取平衡因子</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getBalance</span><span class="params">(avlt node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getHeight(node-&gt;left) - getHeight(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrder</span><span class="params">(avlt root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;val);</span><br><span class="line">    preOrder(root-&gt;left);</span><br><span class="line">    preOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义中序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">midOrder</span><span class="params">(avlt root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    midOrder(root-&gt;left);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;val);</span><br><span class="line">    midOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义函数查找</span></span><br><span class="line">avlt <span class="title function_">find</span><span class="params">(avlt root, <span class="type">int</span> key, <span class="type">int</span>* counter)</span>&#123;</span><br><span class="line">    avlt cur = root;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; cur-&gt;val)&#123;</span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">            (*counter)++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; cur-&gt;val) &#123;</span><br><span class="line">            cur = cur-&gt;right;</span><br><span class="line">            (*counter)++;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找了一圈，没找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义左旋函数</span></span><br><span class="line">avlt <span class="title function_">leftRoate</span><span class="params">(avlt root)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.当前结点的右子树会作为新树的根结点</span></span><br><span class="line">    <span class="comment">// 2.当前结点root会作为新树的根结点newroot-&gt;left的左子树</span></span><br><span class="line">    <span class="comment">//如果，新的树根，原来有左子树，原来的左子树，就作为旧根结点的右子树</span></span><br><span class="line">    avlt newroot = root-&gt;right;</span><br><span class="line">    <span class="comment">// T2保存新树根原来的左子树</span></span><br><span class="line">    avlt T2 = newroot-&gt;left;</span><br><span class="line">    <span class="comment">// 当前结点会作为新树根的左子树</span></span><br><span class="line">    newroot-&gt;left = root;</span><br><span class="line">    root-&gt;right = T2;</span><br><span class="line">    <span class="comment">// 更新树高，root newroot</span></span><br><span class="line">    root-&gt;height = <span class="number">1</span> + max(getHeight(root-&gt;left), getHeight(root-&gt;right));</span><br><span class="line">    newroot-&gt;height = <span class="number">1</span> + max(getHeight(newroot-&gt;left), getHeight(newroot-&gt;right));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newroot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义右旋函数</span></span><br><span class="line">avlt <span class="title function_">rightRotate</span><span class="params">(avlt root)</span>&#123;</span><br><span class="line">    avlt newroot = root-&gt;left;</span><br><span class="line">    avlt T2 = newroot-&gt;right;</span><br><span class="line">    newroot-&gt;right = root;</span><br><span class="line">    root-&gt;left = T2;</span><br><span class="line">    <span class="comment">//更新树高</span></span><br><span class="line">    root-&gt;height = <span class="number">1</span> + max(getHeight(root-&gt;left), getHeight(root-&gt;right));</span><br><span class="line">    newroot-&gt;height = <span class="number">1</span> + max(getHeight(newroot-&gt;left), getHeight(newroot-&gt;right));</span><br><span class="line">    <span class="keyword">return</span> newroot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义插入结点的函数</span></span><br><span class="line">avlt <span class="title function_">insertNode</span><span class="params">(avlt node, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> newNode(key);</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node-&gt;val)</span><br><span class="line">        node-&gt;left = insertNode(node-&gt;left, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node-&gt;val)</span><br><span class="line">        node-&gt;right = insertNode(node-&gt;right, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="comment">//更新树高</span></span><br><span class="line">    node-&gt;height = <span class="number">1</span> + max(getHeight(node-&gt;left), getHeight(node-&gt;right));</span><br><span class="line">    <span class="comment">// 获取当前结点的平衡因子</span></span><br><span class="line">    <span class="type">int</span> balance = getBalance(node);</span><br><span class="line">    <span class="comment">// 我们是否需要调整这个树，是看平衡因子是不是绝对值大于1</span></span><br><span class="line">    <span class="comment">// LL型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalance(node-&gt;left) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    <span class="comment">// LR型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalance(node-&gt;left) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        node-&gt;left = leftRoate(node-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// RR型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt; <span class="number">-1</span> &amp;&amp; getBalance(node-&gt;right) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> leftRoate(node);</span><br><span class="line">    <span class="comment">// RL型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt; <span class="number">-1</span> &amp;&amp; getBalance(node-&gt;right) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        node-&gt;right = rightRotate(node-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> leftRoate(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">avlt <span class="title function_">deleteNode</span><span class="params">(avlt node,<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">if</span>(key&lt;node-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        node-&gt;left=deleteNode(node-&gt;left,key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&gt;node-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        node-&gt;right=deleteNode(node-&gt;right,key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key==node-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//删除的是叶节点 </span></span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left==<span class="literal">NULL</span>&amp;&amp;node-&gt;right==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            avlt temp=node;</span><br><span class="line">            node=<span class="literal">NULL</span>;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除的是只有右孩子的节点 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;left==<span class="literal">NULL</span>&amp;&amp;node-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            avlt temp=node;</span><br><span class="line">            node=node-&gt;right;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除的是只有左孩子的节点 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>&amp;&amp;node-&gt;right==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            avlt temp=node;</span><br><span class="line">            node=node-&gt;left;</span><br><span class="line">            <span class="built_in">free</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除的是有左右孩子的节点 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;left!=<span class="literal">NULL</span>&amp;&amp;node-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            avlt cur=node-&gt;right;</span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;left!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cur=cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            node-&gt;val=cur-&gt;val;</span><br><span class="line">            node-&gt;right=deleteNode(node-&gt;right,cur-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="comment">//更新树高</span></span><br><span class="line">    node-&gt;height = <span class="number">1</span> + max(getHeight(node-&gt;left), getHeight(node-&gt;right));</span><br><span class="line">    <span class="comment">// 获取当前结点的平衡因子</span></span><br><span class="line">    <span class="type">int</span> balance = getBalance(node);</span><br><span class="line">    <span class="comment">// 我们是否需要调整这个树，是看平衡因子是不是绝对值大于1</span></span><br><span class="line">    <span class="comment">// LL型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalance(node-&gt;left) &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    <span class="comment">// LR型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalance(node-&gt;left) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        node-&gt;left = leftRoate(node-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// RR型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt; <span class="number">-1</span> &amp;&amp; getBalance(node-&gt;right) &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> leftRoate(node);</span><br><span class="line">    <span class="comment">// RL型失衡</span></span><br><span class="line">    <span class="keyword">if</span> (balance &lt; <span class="number">-1</span> &amp;&amp; getBalance(node-&gt;right) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        node-&gt;right = rightRotate(node-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> leftRoate(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><h2 id="（三）哈夫曼树"><a href="#（三）哈夫曼树" class="headerlink" title="（三）哈夫曼树"></a>（三）哈夫曼树</h2><details class="folding-tag" ><summary> 哈夫曼树 </summary>              <div class='content'>              <h3 id="（1）基础操作集："><a href="#（1）基础操作集：" class="headerlink" title="（1）基础操作集："></a>（1）基础操作集：</h3><details class="folding-tag" ><summary> 基础操作集 </summary>              <div class='content'>              <p><strong>①查找最小的权重（void select(htree ht,int x,int <em>m1,int </em>m2)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择赫夫曼树中权重最小的两个节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">select</span><span class="params">(htree ht, <span class="type">int</span> x, <span class="type">int</span> *m1, <span class="type">int</span> *m2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> min1 = <span class="number">99999999</span>;  <span class="comment">// 初始最小权重1</span></span><br><span class="line">    <span class="type">double</span> min2 = <span class="number">99999999</span>;  <span class="comment">// 初始最小权重2</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= x; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[j].weight &lt; min1 &amp;&amp; ht[j].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            min1 = ht[j].weight;</span><br><span class="line">            *m1 = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;= x; k++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[k].weight &lt; min2 &amp;&amp; k != *m1 &amp;&amp; ht[k].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            min2 = ht[k].weight;</span><br><span class="line">            *m2 = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②创建哈夫曼树（void creath(htree ht,int n)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建赫夫曼树</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creath</span><span class="params">(htree ht, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = n+<span class="number">1</span>; i &lt;= <span class="number">2</span>*n<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> m1, m2;</span><br><span class="line">        select(ht, i<span class="number">-1</span>, &amp;m1, &amp;m2);  <span class="comment">// 选择最小的两个节点</span></span><br><span class="line">        ht[i].weight = ht[m1].weight + ht[m2].weight;  <span class="comment">// 新节点权重为两个最小节点权重之和</span></span><br><span class="line">        ht[i].lchild = m1;  <span class="comment">// 左孩子为第一个最小节点</span></span><br><span class="line">        ht[i].rchild = m2;  <span class="comment">// 右孩子为第二个最小节点</span></span><br><span class="line">        ht[m1].parent = i;  <span class="comment">// 更新父节点</span></span><br><span class="line">        ht[m2].parent = i;  <span class="comment">// 更新父节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③编码（void hcode(htree ht,char </strong>hc,int n)）：<em>**</em></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成赫夫曼编码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hcode</span><span class="params">(htree ht, <span class="type">char</span> **hc, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *cd = (<span class="type">char</span>*)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">char</span>));  <span class="comment">// 动态分配存储编码的数组</span></span><br><span class="line">    cd[n<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// 编码字符串的末尾</span></span><br><span class="line">    <span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        start = n<span class="number">-1</span>;  <span class="comment">// 编码字符数组的末尾</span></span><br><span class="line">        now = i + <span class="number">1</span>;  <span class="comment">// 当前节点</span></span><br><span class="line">        p = ht[now].parent;  <span class="comment">// 获取当前节点的父节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成每个字符的赫夫曼编码</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            start--;</span><br><span class="line">            <span class="keyword">if</span> (ht[p].lchild == now)</span><br><span class="line">            &#123;</span><br><span class="line">                cd[start] = <span class="string">&#x27;0&#x27;</span>;  <span class="comment">// 左孩子编码为&#x27;0&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cd[start] = <span class="string">&#x27;1&#x27;</span>;  <span class="comment">// 右孩子编码为&#x27;1&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            now = p;</span><br><span class="line">            p = ht[now].parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为每个字符分配空间存储其赫夫曼编码</span></span><br><span class="line">        hc[i+<span class="number">1</span>] = (<span class="type">char</span>*)<span class="built_in">malloc</span>((n-start) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(hc[i+<span class="number">1</span>], &amp;cd[start]);  <span class="comment">// 拷贝编码到赫夫曼编码数组</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(cd);  <span class="comment">// 释放动态分配的编码数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>④先序打印（void printh(htree ht,char </strong>hc,int index)）：**</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印赫夫曼树</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printh</span><span class="params">(htree ht, <span class="type">char</span> **hc, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ht[index].lchild == <span class="number">0</span> &amp;&amp; ht[index].rchild == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 打印叶子节点的字符和对应的赫夫曼编码</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c:%s\n&quot;</span>, ht[index].s, hc[index]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        printh(ht, hc, ht[index].lchild);  <span class="comment">// 递归打印左子树</span></span><br><span class="line">        printh(ht, hc, ht[index].rchild);  <span class="comment">// 递归打印右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑤破译编码内容（void search(htree ht,int n,char *pwd)）：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析输入的赫夫曼编码并打印出对应的字符</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">search</span><span class="params">(htree ht, <span class="type">int</span> n, <span class="type">char</span> *pwd)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;译码为:&quot;</span>);  <span class="comment">// 输出译码提示</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(pwd);  <span class="comment">// 获取输入编码的长度</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> node = <span class="number">2</span> * n - <span class="number">1</span>;  <span class="comment">// 从根节点开始解析</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pwd[i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            node = ht[node].lchild;  <span class="comment">// 走向左孩子</span></span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (ht[node].lchild == <span class="number">0</span> &amp;&amp; ht[node].rchild == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 若到达叶子节点，打印对应字符并回到根节点继续解析</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ht[node].s);</span><br><span class="line">                node = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pwd[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            node = ht[node].rchild;  <span class="comment">// 走向右孩子</span></span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (ht[node].lchild == <span class="number">0</span> &amp;&amp; ht[node].rchild == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 若到达叶子节点，打印对应字符并回到根节点继续解析</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ht[node].s);</span><br><span class="line">                node = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="（2）完整代码示例：-1"><a href="#（2）完整代码示例：-1" class="headerlink" title="（2）完整代码示例："></a>（2）完整代码示例：</h3><details class="folding-tag" ><summary> 完整代码示例 </summary>              <div class='content'>              <p><strong>输入样例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line">c:<span class="number">4</span></span><br><span class="line">x:<span class="number">7</span></span><br><span class="line">z:<span class="number">1</span></span><br><span class="line">s:<span class="number">2</span></span><br><span class="line">a:<span class="number">8</span></span><br><span class="line"><span class="number">011110110001101</span></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a:<span class="number">0</span></span><br><span class="line">x:<span class="number">10</span></span><br><span class="line">z:<span class="number">1100</span></span><br><span class="line">s:<span class="number">1101</span></span><br><span class="line">c:<span class="number">111</span></span><br><span class="line">译码为:acxzas</span><br></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 30        <span class="comment">// 定义N为30</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max 2*N-1   <span class="comment">// 定义Max为2*N-1</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义赫夫曼树节点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">double</span> weight;        <span class="comment">// 节点权重</span></span><br><span class="line">    <span class="type">char</span> s;               <span class="comment">// 节点字符</span></span><br><span class="line">    <span class="type">int</span> parent, lchild, rchild;  <span class="comment">// 父节点，左孩子，右孩子</span></span><br><span class="line">&#125; Htnode, htree[Max+<span class="number">1</span>];  <span class="comment">// 定义Htode类型和赫夫曼树类型</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">select</span><span class="params">(htree ht, <span class="type">int</span> x, <span class="type">int</span> *m1, <span class="type">int</span> *m2)</span>;  <span class="comment">// 选择权重最小的两个节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creath</span><span class="params">(htree ht, <span class="type">int</span> n)</span>;                    <span class="comment">// 创建赫夫曼树</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hcode</span><span class="params">(htree ht, <span class="type">char</span> **hc, <span class="type">int</span> n)</span>;          <span class="comment">// 生成赫夫曼编码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printh</span><span class="params">(htree ht, <span class="type">char</span> **hc, <span class="type">int</span> index)</span>;     <span class="comment">// 打印赫夫曼树</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    htree ht;                <span class="comment">// 赫夫曼树数组</span></span><br><span class="line">    <span class="type">int</span> n;                   <span class="comment">// 字符数量</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);         <span class="comment">// 输入字符数量</span></span><br><span class="line">    getchar();               <span class="comment">// 吃掉换行符</span></span><br><span class="line">    <span class="type">char</span> *hc[n+<span class="number">1</span>];           <span class="comment">// 用于存储赫夫曼编码的数组</span></span><br><span class="line">    <span class="type">int</span> i;                   <span class="comment">// 循环变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入字符及其权重</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c:%lf&quot;</span>, &amp;ht[i].s, &amp;ht[i].weight);</span><br><span class="line">        getchar();           <span class="comment">// 吃掉换行符</span></span><br><span class="line">        ht[i].lchild = <span class="number">0</span>;    <span class="comment">// 初始化左孩子</span></span><br><span class="line">        ht[i].rchild = <span class="number">0</span>;    <span class="comment">// 初始化右孩子</span></span><br><span class="line">        ht[i].parent = <span class="number">0</span>;    <span class="comment">// 初始化父节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> pwd[<span class="number">99999</span>];          <span class="comment">// 存储输入编码的数组</span></span><br><span class="line">    creath(ht, n);            <span class="comment">// 创建赫夫曼树</span></span><br><span class="line">    hcode(ht, hc, n);         <span class="comment">// 生成赫夫曼编码</span></span><br><span class="line">    printh(ht, hc, <span class="number">2</span>*n<span class="number">-1</span>);    <span class="comment">// 打印赫夫曼树</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需要破译的编码:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, pwd);         <span class="comment">// 输入编码</span></span><br><span class="line">    search(ht, n, pwd);       <span class="comment">// 解析输入的编码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择赫夫曼树中权重最小的两个节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">select</span><span class="params">(htree ht, <span class="type">int</span> x, <span class="type">int</span> *m1, <span class="type">int</span> *m2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> min1 = <span class="number">99999999</span>;  <span class="comment">// 初始最小权重1</span></span><br><span class="line">    <span class="type">double</span> min2 = <span class="number">99999999</span>;  <span class="comment">// 初始最小权重2</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= x; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[j].weight &lt; min1 &amp;&amp; ht[j].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            min1 = ht[j].weight;</span><br><span class="line">            *m1 = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;= x; k++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[k].weight &lt; min2 &amp;&amp; k != *m1 &amp;&amp; ht[k].parent == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            min2 = ht[k].weight;</span><br><span class="line">            *m2 = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建赫夫曼树</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creath</span><span class="params">(htree ht, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = n+<span class="number">1</span>; i &lt;= <span class="number">2</span>*n<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> m1, m2;</span><br><span class="line">        select(ht, i<span class="number">-1</span>, &amp;m1, &amp;m2);  <span class="comment">// 选择最小的两个节点</span></span><br><span class="line">        ht[i].weight = ht[m1].weight + ht[m2].weight;  <span class="comment">// 新节点权重为两个最小节点权重之和</span></span><br><span class="line">        ht[i].lchild = m1;  <span class="comment">// 左孩子为第一个最小节点</span></span><br><span class="line">        ht[i].rchild = m2;  <span class="comment">// 右孩子为第二个最小节点</span></span><br><span class="line">        ht[m1].parent = i;  <span class="comment">// 更新父节点</span></span><br><span class="line">        ht[m2].parent = i;  <span class="comment">// 更新父节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成赫夫曼编码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hcode</span><span class="params">(htree ht, <span class="type">char</span> **hc, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *cd = (<span class="type">char</span>*)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">char</span>));  <span class="comment">// 动态分配存储编码的数组</span></span><br><span class="line">    cd[n<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// 编码字符串的末尾</span></span><br><span class="line">    <span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        start = n<span class="number">-1</span>;  <span class="comment">// 编码字符数组的末尾</span></span><br><span class="line">        now = i + <span class="number">1</span>;  <span class="comment">// 当前节点</span></span><br><span class="line">        p = ht[now].parent;  <span class="comment">// 获取当前节点的父节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成每个字符的赫夫曼编码</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            start--;</span><br><span class="line">            <span class="keyword">if</span> (ht[p].lchild == now)</span><br><span class="line">            &#123;</span><br><span class="line">                cd[start] = <span class="string">&#x27;0&#x27;</span>;  <span class="comment">// 左孩子编码为&#x27;0&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cd[start] = <span class="string">&#x27;1&#x27;</span>;  <span class="comment">// 右孩子编码为&#x27;1&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            now = p;</span><br><span class="line">            p = ht[now].parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为每个字符分配空间存储其赫夫曼编码</span></span><br><span class="line">        hc[i+<span class="number">1</span>] = (<span class="type">char</span>*)<span class="built_in">malloc</span>((n-start) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(hc[i+<span class="number">1</span>], &amp;cd[start]);  <span class="comment">// 拷贝编码到赫夫曼编码数组</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(cd);  <span class="comment">// 释放动态分配的编码数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印赫夫曼树</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printh</span><span class="params">(htree ht, <span class="type">char</span> **hc, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (ht[index].lchild == <span class="number">0</span> &amp;&amp; ht[index].rchild == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 打印叶子节点的字符和对应的赫夫曼编码</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c:%s\n&quot;</span>, ht[index].s, hc[index]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        printh(ht, hc, ht[index].lchild);  <span class="comment">// 递归打印左子树</span></span><br><span class="line">        printh(ht, hc, ht[index].rchild);  <span class="comment">// 递归打印右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析输入的赫夫曼编码并打印出对应的字符</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">search</span><span class="params">(htree ht, <span class="type">int</span> n, <span class="type">char</span> *pwd)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;译码为:&quot;</span>);  <span class="comment">// 输出译码提示</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(pwd);  <span class="comment">// 获取输入编码的长度</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> node = <span class="number">2</span> * n - <span class="number">1</span>;  <span class="comment">// 从根节点开始解析</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pwd[i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            node = ht[node].lchild;  <span class="comment">// 走向左孩子</span></span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (ht[node].lchild == <span class="number">0</span> &amp;&amp; ht[node].rchild == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 若到达叶子节点，打印对应字符并回到根节点继续解析</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ht[node].s);</span><br><span class="line">                node = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pwd[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            node = ht[node].rchild;  <span class="comment">// 走向右孩子</span></span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (ht[node].lchild == <span class="number">0</span> &amp;&amp; ht[node].rchild == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 若到达叶子节点，打印对应字符并回到根节点继续解析</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ht[node].s);</span><br><span class="line">                node = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><hr><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PTA作业集（大二下）</title>
    <link href="http://example.com/post/PTA%E4%BD%9C%E4%B8%9A%E9%9B%86/"/>
    <id>http://example.com/post/PTA%E4%BD%9C%E4%B8%9A%E9%9B%86/</id>
    <published>2024-02-29T07:13:12.000Z</published>
    <updated>2025-04-19T15:56:20.245Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="索引："><a href="#索引：" class="headerlink" title="索引："></a>索引：</h4><h4 id="1、Pyhthon"><a href="#1、Pyhthon" class="headerlink" title="1、Pyhthon"></a>1、<a href="#jump1">Pyhthon</a></h4><p>———<a href="#jump11">① 第1章 开启Python学习之旅</a></p><p>———<a href="#jump12">② 第2章 数字类型与字符串</a></p><p>———<a href="#jump13">③ 第3章 流程控制</a></p><p>———<a href="#jump14">④ 第4章 列表与元组</a></p><p>———<a href="#jump15">⑤ 第5章 字典和集合</a></p><p>———<a href="#jump16">⑥ 第6章 函数</a></p><p>———<a href="#jump17">⑦ 第7章 类与面向对象</a></p><p>———<a href="#jump18">⑧ 第8章 模块</a></p><p>———<a href="#jump19">⑨ Python编程练习</a></p><p>———<a href="#jump110">⑩ 23软工Python编程练习合集</a></p><hr><h1 id="Pyhthon"><a href="#Pyhthon" class="headerlink" title="Pyhthon"></a><span id="jump1">Pyhthon</span></h1><h2 id="十、23软工Python编程练习合集"><a href="#十、23软工Python编程练习合集" class="headerlink" title="十、23软工Python编程练习合集 "></a><span id="jump110">十、23软工Python编程练习合集 </span></h2><details class="folding-tag" ><summary> 23软工Python编程练习合集 </summary>              <div class='content'>              <h3 id="（一）判断题"><a href="#（一）判断题" class="headerlink" title="（一）判断题"></a>（一）判断题</h3><details class="folding-tag" ><summary> 判断题 </summary>              <div class='content'>              <p>1、(T)<br>Python是一种跨平台、开源、免费的动态编程语言。  </p><hr><p>2、(T)<br>math模块是python语言的数学模块。  </p><hr><p>3、(T)<br>在Python 3.x中，input()函数把用户的键盘输入作为字符串返回。  </p><hr><p>4、(T)<br>‘age’+23不是正确的表达式。  </p><hr><p>5、(T)<br>字符串和列表都是序列类型。  </p><hr><p>6、(F)<br>可以通过[]来访问字符串的某个字符，也可以将它修改成其他字符。  </p><hr><p>7、(T)<br>字符串对象和元组对象是不可变对象，列表对象为可变对象。  </p><hr><p>8、(T)<br>列表lst=[12, -5, -22, -10, -26, 35, 0, 49, 3, -21],lst[::-1]的结果是[-21, 3, 49, 0, 35, -26, -10, -22, -5, 12]。  </p><hr><p>9、(T)<br>列表lst=[12, -5, -22, -10, -26, 35, 0, 49, 3, -21],lst[3:8:2]的结果是[-10, 35, 49]。  </p><hr><p>10、(T)<br>在循环中continue语句的作用是退出循环的当前迭代。  </p>              </div>            </details><hr><h3 id="（二）单选题"><a href="#（二）单选题" class="headerlink" title="（二）单选题"></a>（二）单选题</h3><details class="folding-tag" ><summary> 单选题 </summary>              <div class='content'>              <p>1、(D)<br>表达式1+2*3.14&gt;0的结果类型是:<br>A.int<br>B.long<br>C.float<br>D.bool</p><hr><p>2、(C)<br>Python语言正确的标识符是<strong><em>_</em></strong>。<br>A.2you<br>B.my-name<br>C._item<br>D.abc*234</p><hr><p> 3、(D)<br><strong><em>_</em></strong>号表示同一行的后面部分是Python程序的注释。</p><p>A.*<br>B.%<br>C./<br>D.#</p><hr><p>4、(D)<br>如math模块已引入，Python 表达式 math.sqrt(4)*math.sqrt(9)的值为<strong><em>__</em></strong>。<br>A.36.0<br>B.6<br>C.13<br>D.6.0</p><hr><p>5、(D)<br>max((3, 5, 1, 7, 4))的结果是<em>__</em>。<br>A.1<br>B.3<br>C.5<br>D.7</p><hr><p>6、(A)<br>list(“abcd”)的结果是?<br>A.[‘a’, ‘b’, ‘c’, ‘d’]<br>B.[‘ab’]<br>C.[‘cd’]<br>D.[‘abcd’]</p><hr><p>7、(C)<br>如果list1 = [1, 2, 3, 4, 5, 4, 3, 2, 1]，那么以下那个是list1[:-1]？<br>A.0<br>B.[1, 2, 3, 4, 5, 4, 3, 2, 1]<br>C.[1, 2, 3, 4, 5, 4, 3, 2]<br>D.[0, 1, 2, 3, 4, 3, 2, 1, 0]</p><hr><p>8、(B)<br>要把5加到列表lst的末尾，用的是<em>_</em> 。<br>A.lst.add(5)<br>B.lst.append(5)<br>C.lst.addLast(5)<br>D.lst.addEnd(5)</p><hr><p>9、(A)<br>下面程序中 ，i的循环终值是<strong><strong>__</strong></strong>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>A.9<br>B.10<br>C.11<br>D.以上都不对</p><hr><p>10、(C)<br>下面程序的运行结果是什么？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="number">0</span></span><br><span class="line">a,b=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> a&gt;<span class="number">0</span>:</span><br><span class="line">    s=s+<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> b&gt;<span class="number">0</span>:</span><br><span class="line">    s=s+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>A.错误<br>B.0<br>C.1<br>D.2</p>              </div>            </details><hr><h3 id="（三）函数题"><a href="#（三）函数题" class="headerlink" title="（三）函数题"></a>（三）函数题</h3><details class="folding-tag" ><summary> 函数题 </summary>              <div class='content'>              <h4 id="1、jmu-python-组合数据类型-1-计算坐标点欧氏距离"><a href="#1、jmu-python-组合数据类型-1-计算坐标点欧氏距离" class="headerlink" title="1、jmu-python-组合数据类型-1.计算坐标点欧氏距离"></a>1、jmu-python-组合数据类型-1.计算坐标点欧氏距离</h4><details class="folding-tag" ><summary> 3-1 </summary>              <div class='content'>              <blockquote><p>作者 郑如滨</p><p>单位 集美大学</p></blockquote><p>读取若干个点，每个点放入元组。并将所有点的<strong>点信息、点的类型、点与原点的距离</strong>打印出来。</p><p><strong>函数接口定义</strong>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">readPoint() <span class="comment">#从一行以,分隔的数中读取坐标，放入元组并返回</span></span><br><span class="line">distance(point) <span class="comment">#计算point与原点的距离并返回，要math库中的函数</span></span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例</strong>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 请在这里填写答案 */</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    p = readPoint()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Point = &#123;&#125;, type = &#123;&#125;, distance = &#123;:.3f&#125;&#x27;</span>.<span class="built_in">format</span>(p,<span class="built_in">type</span>(p),distance(p)))</span><br></pre></td></tr></table></figure><p><strong>输入格式</strong>:</p><p>输入n，代表底下要输入n行点坐标。坐标全部为整数。<br>点坐标x,y,z以<code>,</code>分隔。坐标全部为整数。</p><p> <strong>注意：</strong>坐标以<code>,</code>分隔，相应位置可能无字符或者包含多个空格字符，读入时按照0进行处理。  </p><p><strong>输出格式</strong>:</p><p>见输出样例</p><p><strong>输入样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1,1,1</span><br><span class="line">,,</span><br><span class="line">2,,1</span><br><span class="line">3,1,3</span><br><span class="line">5,,</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Point = (1, 1, 1), type = &lt;class &#x27;tuple&#x27;&gt;, distance = 1.732</span><br><span class="line">Point = (0, 0, 0), type = &lt;class &#x27;tuple&#x27;&gt;, distance = 0.000</span><br><span class="line">Point = (2, 0, 1), type = &lt;class &#x27;tuple&#x27;&gt;, distance = 2.236</span><br><span class="line">Point = (3, 1, 3), type = &lt;class &#x27;tuple&#x27;&gt;, distance = 4.359</span><br><span class="line">Point = (5, 0, 0), type = &lt;class &#x27;tuple&#x27;&gt;, distance = 5.000</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readPoint</span>():</span><br><span class="line">    s=<span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(s[i])==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            s[i]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s[i]=<span class="built_in">int</span>(s[i])</span><br><span class="line">    <span class="keyword">return</span> (s[<span class="number">0</span>],s[<span class="number">1</span>],s[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">distance</span>(<span class="params">point</span>):</span><br><span class="line">    <span class="keyword">return</span> math.sqrt(<span class="built_in">sum</span>([<span class="built_in">int</span>(point[<span class="number">0</span>])**<span class="number">2</span>,<span class="built_in">int</span>(point[<span class="number">1</span>])**<span class="number">2</span>,<span class="built_in">int</span>(point[<span class="number">2</span>])**<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readPoint</span>():</span><br><span class="line">    s=<span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(s[i])==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            s[i]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s[i]=<span class="built_in">int</span>(s[i])</span><br><span class="line">    <span class="keyword">return</span> (s[<span class="number">0</span>],s[<span class="number">1</span>],s[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">distance</span>(<span class="params">point</span>):</span><br><span class="line">    <span class="keyword">return</span> math.sqrt(<span class="built_in">sum</span>([<span class="built_in">int</span>(point[<span class="number">0</span>])**<span class="number">2</span>,<span class="built_in">int</span>(point[<span class="number">1</span>])**<span class="number">2</span>,<span class="built_in">int</span>(point[<span class="number">2</span>])**<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    p = readPoint()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Point = &#123;&#125;, type = &#123;&#125;, distance = &#123;:.3f&#125;&#x27;</span>.<span class="built_in">format</span>(p,<span class="built_in">type</span>(p),distance(p)))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、判断素数函数"><a href="#2、判断素数函数" class="headerlink" title="2、判断素数函数"></a>2、判断素数函数</h4><details class="folding-tag" ><summary> 3-2 </summary>              <div class='content'>              <blockquote><p>作者 赵广辉</p><p>单位 武汉理工大学</p></blockquote><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p><strong>函数接口定义</strong>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">isPrime</span><span class="params">(n)</span>: </span></span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例</strong>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 请在这里填写答案 */</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())        #接收用户输入并转成整数</span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(num+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isPrime</span>(i):</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)  #在同一行内输出结果，不换行，中间用空格分隔</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong>：</p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 </span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n&lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">        <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isPrime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n&lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">        <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())        <span class="comment">#接收用户输入并转成整数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> isPrime(i):</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)  <span class="comment">#在同一行内输出结果，不换行，中间用空格分隔</span></span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="3、计算阶乘"><a href="#3、计算阶乘" class="headerlink" title="3、计算阶乘"></a>3、计算阶乘</h4><details class="folding-tag" ><summary> 3-3 </summary>              <div class='content'>              <blockquote><p>作者 郭堂瑞</p><p>单位 湖北文理学院</p></blockquote><p>本题要求实现一个函数，可计算参数num的阶乘，并将结果返回。</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">num</span>):</span><br></pre></td></tr></table></figure><p>num是用户传入的参数，为整数。</p><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 请在这里填写答案 */</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="built_in">abs</span>(<span class="built_in">int</span>(n))))</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">120</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">num</span>):</span><br><span class="line">    s=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        s*=(i+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">num</span>):</span><br><span class="line">    s=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        s*=(i+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="built_in">abs</span>(<span class="built_in">int</span>(n))))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="4、找出符合条件的三位数"><a href="#4、找出符合条件的三位数" class="headerlink" title="4、找出符合条件的三位数"></a>4、找出符合条件的三位数</h4><details class="folding-tag" ><summary> 3-4 </summary>              <div class='content'>              <blockquote><p>作者 python备课组</p><p>单位 福州大学至诚学院</p></blockquote><p>求出所有符合下列条件的三位正整数：<br>该数分别乘以3、4、5、6、7后得到的积的各位数字之和都相等。<br>如198：<br>198∗3=594<br>198∗4=792<br>198∗5=990<br>198∗6=1188<br>198∗7=1386<br>每个乘积的各位数字之和都是18。</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在这里描述函数接口。例如：</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">x</span>):</span><br></pre></td></tr></table></figure><p>函数参数x是一个正整数，函数要返回x各位数字的和。</p><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在这里给出函数被调用进行测试的例子。例如：</span><br><span class="line">/* 请在这里填写答案 */</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(i*<span class="number">3</span>)==<span class="built_in">sum</span>(i*<span class="number">4</span>)==<span class="built_in">sum</span>(i*<span class="number">5</span>)==<span class="built_in">sum</span>(i*<span class="number">6</span>)==<span class="built_in">sum</span>(i*<span class="number">7</span>):</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">180 198 297 360 396 450 495 549 594 639 693 792 819 891 900 909 918 936 945 990 999 </span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">x</span>):</span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(x):</span><br><span class="line">        s+=<span class="built_in">int</span>(i)</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">x</span>):</span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(x):</span><br><span class="line">        s+=<span class="built_in">int</span>(i)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(i*<span class="number">3</span>)==<span class="built_in">sum</span>(i*<span class="number">4</span>)==<span class="built_in">sum</span>(i*<span class="number">5</span>)==<span class="built_in">sum</span>(i*<span class="number">6</span>)==<span class="built_in">sum</span>(i*<span class="number">7</span>):</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="5、判断回文"><a href="#5、判断回文" class="headerlink" title="5、判断回文"></a>5、判断回文</h4><details class="folding-tag" ><summary> 3-5 </summary>              <div class='content'>              <blockquote><p>作者 cx</p><p>单位 福州大学至诚学院</p></blockquote><p>完成函数huiwen(s)，判断字符串s是否是回文，是回文返回1，不是返回0。在主程序中输入一个字符串，调用该函数判断该字符串是否回文。（回文是顺读逆读都相同的字符串）</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在这里描述函数接口。</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">huiwen</span>(<span class="params">s</span>):</span><br></pre></td></tr></table></figure><p>参数s是一个字符串，函数要返回1或者0。</p><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在这里给出函数被调用进行测试的例子。</span><br><span class="line"></span><br><span class="line">/* 请在这里填写答案 */</span><br><span class="line">s=<span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> huiwen(s)==<span class="number">1</span>:<span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;是回文&quot;</span>.<span class="built_in">format</span>(s))</span><br><span class="line"><span class="keyword">else</span>:<span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;不是回文&quot;</span>.<span class="built_in">format</span>(s))</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abccba</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abccba是回文</span><br></pre></td></tr></table></figure><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">huiwen</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> s[::-<span class="number">1</span>]==s:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">huiwen</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> s[::-<span class="number">1</span>]==s:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">s=<span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> huiwen(s)==<span class="number">1</span>:<span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;是回文&quot;</span>.<span class="built_in">format</span>(s))</span><br><span class="line"><span class="keyword">else</span>:<span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;不是回文&quot;</span>.<span class="built_in">format</span>(s))</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h3 id="（四）编程题"><a href="#（四）编程题" class="headerlink" title="（四）编程题"></a>（四）编程题</h3><details class="folding-tag" ><summary> 编程题 </summary>              <div class='content'>              <h4 id="1、jmu-python-分段函数"><a href="#1、jmu-python-分段函数" class="headerlink" title="1、jmu-python-分段函数"></a>1、jmu-python-分段函数</h4><details class="folding-tag" ><summary> 4-1 </summary>              <div class='content'>              <blockquote><p>作者 蔡莉白</p><p>单位 集美大学</p></blockquote><p>本题目要求计算下列分段函数f(x)的值（x为从键盘输入的一个任意实数）：</p><p><img src="https://images.ptausercontent.com/625099ce-3e8d-4a2f-a719-99929e1e027e.jpg" alt="分段函数.jpg"></p><p><strong>输入格式:</strong></p><p>输入在一行中给出实数 x。</p><p><strong>输出格式:</strong></p><p>在一行中按“f(x)=result”的格式输出，其中<strong>x与result都保留两位小数</strong>。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.76</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(0.76)=1.20</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> x&lt;<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f(&#123;:.2f&#125;)=&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(x,<span class="number">1.2</span>))</span><br><span class="line"><span class="keyword">elif</span> x==<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f(&#123;:.2f&#125;)=&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(x,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f(&#123;:.2f&#125;)=&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(x,<span class="number">2</span>*x+<span class="number">1</span>))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、-jmu-python-判断是否构成三角形"><a href="#2、-jmu-python-判断是否构成三角形" class="headerlink" title="2、 jmu-python-判断是否构成三角形"></a>2、 jmu-python-判断是否构成三角形</h4><details class="folding-tag" ><summary> 4-2 </summary>              <div class='content'>              <blockquote><p>作者 蔡莉白</p><p>单位 集美大学</p></blockquote><p>输入三角形的三边，判断是否能构成三角形。若能构成输出yes，否则输出no。</p><p><strong>输入格式:</strong></p><p>在一行中直接输入3个整数，3个整数之间各用一个空格间隔，没有其他任何附加字符。</p><p><strong>输出格式:</strong></p><p>直接输出yes或no，没有其他任何附加字符。</p><p><strong>输入样例</strong>1:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 4 5</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yes</span><br></pre></td></tr></table></figure><p><strong>输入样例2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p><strong>输出样例2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">no</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a+b&gt;c <span class="keyword">and</span> a+b&gt;c <span class="keyword">and</span> a+c&gt;c <span class="keyword">and</span> c+b&gt;a <span class="keyword">and</span> a-b&lt;c <span class="keyword">and</span> a-c&lt;b <span class="keyword">and</span> b-c&lt;a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="3、-jmu-python-随机生成密码"><a href="#3、-jmu-python-随机生成密码" class="headerlink" title="3、 jmu-python-随机生成密码"></a>3、 jmu-python-随机生成密码</h4><details class="folding-tag" ><summary> 4-3 </summary>              <div class='content'>              <blockquote><p>作者 郑如滨</p><p>单位 集美大学</p></blockquote><p>新建一个字符列表，这个列表中的内容从前到后依次包含小写字母、大写字母、数字。  形如<code>[&#39;a&#39;,...,&#39;z&#39;,&#39;A&#39;,...,&#39;Z&#39;,&#39;0&#39;,...&#39;9&#39;]</code><br><strong>建议：</strong>使用代码生成该字符列表。  </p><p>分别输入随机数的种子<code>x</code>(整型)，随机生成的密码个数n，每个密码长度m。<br>每个密码包含的m个字符是从上述字符列表中<strong>随机抽取</strong>    。<br><strong>注意：</strong>本题不要用<code>sample</code>函数，否则答案错误。</p><p><strong>输入格式:</strong></p><p>种子x (注意：需将x转换为整数型再进行设置)<br>密码个数n<br>每个密码的长度m</p><p><strong>输出格式:</strong></p><p>n行密码、每行m位。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">10</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iK2ZWeqh</span><br><span class="line">FWCEPyYn</span><br><span class="line">gFb51yBM</span><br><span class="line">WXaSCrUZ</span><br><span class="line">oL8g5ubb</span><br><span class="line">bPIa84yR</span><br><span class="line">nBUbHoWC</span><br><span class="line">8FJowoRo</span><br><span class="line">WD8s7bA1</span><br><span class="line">6J7PglOU</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">m=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">random.seed(x)</span><br><span class="line">li=<span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    r=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        r+=random.choice(li)</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="4、jmu-python-逆序输出"><a href="#4、jmu-python-逆序输出" class="headerlink" title="4、jmu-python-逆序输出"></a>4、jmu-python-逆序输出</h4><details class="folding-tag" ><summary> 4-4 </summary>              <div class='content'>              <blockquote><p>作者 郑如滨</p><p>单位 集美大学</p></blockquote><p>输入一行字符串，然后对其进行如下处理。  </p><p><strong>输入格式:</strong></p><p>字符串中的元素以空格或者多个空格分隔。</p><p><strong>输出格式:</strong></p><p>逆序输出字符串中的所有元素。<br>然后输出原列表。<br>然后逆序输出原列表每个元素，中间以1个空格分隔。注意：最后一个元素后面不能有空格。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a b  c e   f  gh</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ghfecba</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;gh&#x27;]</span><br><span class="line">gh f e c b a</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">input</span>().split()</span><br><span class="line">s1=s[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(s1))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(<span class="built_in">reversed</span>(s)))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="5、输入列表，求列表元素和-eval输入应用）"><a href="#5、输入列表，求列表元素和-eval输入应用）" class="headerlink" title="5、输入列表，求列表元素和(eval输入应用）"></a>5、输入列表，求列表元素和(eval输入应用）</h4><details class="folding-tag" ><summary> 4-5 </summary>              <div class='content'>              <blockquote><p>作者 陈春晖</p><p>单位 浙江大学</p></blockquote><p>在一行中输入列表，输出列表元素的和。</p><p><strong>输入格式:</strong></p><p>一行中输入列表。</p><p><strong>输出格式:</strong></p><p>在一行中输出列表元素的和。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3,8,-5]</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(l))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="6、列表去重"><a href="#6、列表去重" class="headerlink" title="6、列表去重"></a>6、列表去重</h4><details class="folding-tag" ><summary> 4-6 </summary>              <div class='content'>              <blockquote><p>作者 陈春晖</p><p>单位 浙江大学</p></blockquote><p>输入一个列表，去掉列表中重复的数字，按原来次序输出！</p><p><strong>输入格式:</strong></p><p>在一行中输入列表</p><p><strong>输出格式:</strong></p><p>在一行中输出不重复列表元素</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[4,7,5,6,8,6,9,5] </span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 7 5 6 8 9</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">d=&#123;&#125;</span><br><span class="line">l1=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    d[i]=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> d[i]==<span class="number">0</span>:</span><br><span class="line">        d[i]=d[i]+<span class="number">1</span></span><br><span class="line">        l1.append(<span class="built_in">str</span>(i))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(l1))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="7、人生苦短，我学python"><a href="#7、人生苦短，我学python" class="headerlink" title="7、人生苦短，我学python"></a>7、人生苦短，我学python</h4><details class="folding-tag" ><summary> 4-7 </summary>              <div class='content'>              <blockquote><p>作者 wangxj</p><p>单位 临沂大学</p></blockquote><p>输入一个人名，按照要求给出回应。</p><p><strong>输入格式:</strong></p><p>输入一个两个字或三个字的姓名，如 ：张丹枫</p><p><strong>输出格式:</strong></p><p>第一行输出：张丹枫同学,人生苦短,我学python</p><p>第二行输出： 张大侠,学好python,走遍天下也不怕</p><p>第三行输出： 丹枫小盆友,学好python,你最帅</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">郭靖</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">郭靖同学,人生苦短,我学python</span><br><span class="line">郭大侠,学好python,走遍天下也不怕</span><br><span class="line">靖小盆友,学好python,你最帅</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>同学,人生苦短,我学python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name[<span class="number">0</span>]&#125;</span>大侠,学好python,走遍天下也不怕&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name[<span class="number">1</span>:]&#125;</span>小盆友,学好python,你最帅&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="8、计算分段函数"><a href="#8、计算分段函数" class="headerlink" title="8、计算分段函数"></a>8、计算分段函数</h4><details class="folding-tag" ><summary> 4-8 </summary>              <div class='content'>              <blockquote><p>作者 陈春晖</p><p>单位 浙江大学</p></blockquote><p>本题目要求计算下列分段函数g(x)的值：</p><p><img src="https://pic1.imgdb.cn/item/6803c48458cb8da5c8b733a1.png" alt=""></p><p><strong>输入格式:</strong></p><p>在一行中输入实数x。</p><p><strong>输出格式:</strong></p><p>在一行中按“g(x) = result”的格式输出，其中x与result都保留3位小数。</p><p><strong>输入样例1:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">500</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g(500.000) = 0.001</span><br></pre></td></tr></table></figure><p><strong>输入样例2:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>输出样例2:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g(0.000) = 0.000</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> x==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;g(0.000) = 0.000&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;g(&#123;:.3f&#125;) = &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(x,<span class="number">1</span>/<span class="number">2</span>/x))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="9、阶梯电价"><a href="#9、阶梯电价" class="headerlink" title="9、阶梯电价"></a>9、阶梯电价</h4><details class="folding-tag" ><summary> 4-9 </summary>              <div class='content'>              <blockquote><p>作者 陈春晖</p><p>单位 浙江大学</p></blockquote><p>为了提倡居民节约用电，某省电力公司执行“阶梯电价”，安装一户一表的居民用户电价分为两个“阶梯”：月用电量50千瓦时（含50千瓦时）以内的，电价为0.53元/千瓦时；超过50千瓦时的，超出部分的用电量，电价上调<code>X</code>元/千瓦时。请编写程序计算电费。</p><p><strong>输入格式:</strong></p><p>一行中输入某用户的月用电量（单位：千瓦时）和电价上调的<code>X</code>值（单位：元），中间用空格分开。</p><p><strong>输出格式</strong>:</p><p>在一行中输出该用户应支付的电费（元），结果保留两位小数，格式如：“cost = 应付电费值”。</p><p><strong>输入样例1:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 0.05</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cost = 5.30</span><br></pre></td></tr></table></figure><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100 0.05</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cost = 55.50</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w,x=<span class="built_in">map</span>(<span class="built_in">float</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">if</span> w&lt;=<span class="number">50</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cost = &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(w*<span class="number">0.53</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cost = &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">50</span>*<span class="number">0.53</span>+(w-<span class="number">50</span>)*(x+<span class="number">0.53</span>)))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="10、求π的近似值"><a href="#10、求π的近似值" class="headerlink" title="10、求π的近似值"></a>10、求π的近似值</h4><details class="folding-tag" ><summary> 4-10 </summary>              <div class='content'>              <blockquote><p>作者 陈春晖</p><p>单位 浙江大学</p></blockquote><p>用公式求<em>π</em>的近似值：<em>π</em>2/6=1+1/22+1/32+1/42+。。。<br>当求和项小于误差时,结束求和。</p><p><strong>输入格式:</strong></p><p>在一行输入误差范围</p><p><strong>输出格式:</strong></p><p>在一行输出<em>π</em>的近似值（保留6位小数）。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.00000001</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.141497</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">x=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line">j=<span class="number">1</span></span><br><span class="line">s=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j&gt;x:</span><br><span class="line">    j=<span class="number">1</span>/<span class="built_in">pow</span>(i,<span class="number">2</span>)</span><br><span class="line">    s+=j</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.6f&#125;&quot;</span>.<span class="built_in">format</span>(math.sqrt(s*<span class="number">6</span>)))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="11、jmu-python-重复元素判定"><a href="#11、jmu-python-重复元素判定" class="headerlink" title="11、jmu-python-重复元素判定"></a>11、jmu-python-重复元素判定</h4><details class="folding-tag" ><summary> 4-11 </summary>              <div class='content'>              <blockquote><p>作者 郑如滨</p><p>单位 集美大学</p></blockquote><p>每一个列表中只要有一个元素出现两次，那么该列表即被判定为包含重复元素。<br>编写函数判定列表中是否包含重复元素，如果包含返回<code>True</code>，否则返回<code>False</code>。<br>然后使用该函数对n行字符串进行处理。最后统计包含重复元素的行数与不包含重复元素的行数。</p><p><strong>输入格式:</strong></p><p>输入n，代表接下来要输入n行字符串。<br>然后输入n行字符串，字符串之间的元素以空格相分隔。</p><p><strong>输出格式:</strong></p><p><strong>True=包含重复元素的行数， False=不包含重复元素的行数</strong><br><code>,</code>后面有空格。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">1 3 2 5 4</span><br><span class="line">1 2 3 6 1</span><br><span class="line">1 2 3 2 1</span><br><span class="line">1 1 1 1 1</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">True=3, False=2</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">false=<span class="number">0</span></span><br><span class="line">true=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s=<span class="built_in">input</span>().split()</span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        d[i]=d.get(i,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(d.values())&gt;<span class="number">1</span>:</span><br><span class="line">        true+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(d.values())==<span class="number">1</span>:</span><br><span class="line">        false+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;True=<span class="subst">&#123;true&#125;</span>, False=<span class="subst">&#123;false&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="12、通过两个列表构建字典"><a href="#12、通过两个列表构建字典" class="headerlink" title="12、通过两个列表构建字典"></a>12、通过两个列表构建字典</h4><details class="folding-tag" ><summary> 4-12 </summary>              <div class='content'>              <blockquote><p>作者 郭晓曦</p><p>单位 集美大学</p></blockquote><p>输入两行字符串，以空格为分隔，将每行字符串存储为列表形式。将第一个列表的元素值作为键，将第二个列表中对应顺序的元素作为值，构建一个字典，按键升序排列后输出字典的所有键值对列表。</p><p><strong>输入格式:</strong></p><p>输入两行字符串，分别以空格为分隔存为列表。</p><p><strong>输出格式:</strong></p><p>按键的升序，输出字典键值对列表。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学校 城市 邮编</span><br><span class="line">集美大学 厦门 361021</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[(&#x27;城市&#x27;, &#x27;厦门&#x27;), (&#x27;学校&#x27;, &#x27;集美大学&#x27;), (&#x27;邮编&#x27;, &#x27;361021&#x27;)]</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key=<span class="built_in">input</span>().split()</span><br><span class="line">value=<span class="built_in">input</span>().split()</span><br><span class="line"><span class="comment"># l=[(key[0],value[0]),(key[1],value[1]),(key[2],value[2])]</span></span><br><span class="line">d=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    d[key[i]]=value[i]</span><br><span class="line">l=<span class="built_in">sorted</span>(d.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="13、缩写期刊名"><a href="#13、缩写期刊名" class="headerlink" title="13、缩写期刊名"></a>13、缩写期刊名</h4><details class="folding-tag" ><summary> 4-13 </summary>              <div class='content'>              <blockquote><p>作者 黄龙军</p><p>单位 绍兴文理学院</p></blockquote><p>科研工作者经常要向不同的期刊投稿。但不同期刊的参考文献的格式往往各不相同。有些期刊要求参考文献所发表的期刊名必须采用缩写形式，否则直接拒稿。现对于给定的期刊名，要求按以下规则缩写：<br>（1）长度不超过4的单词不必缩写；<br>（2）长度超过4的单词仅取前4个字母，但其后要加“.”；<br>（3）所有字母都小写。</p><p><strong>输入格式:</strong></p><p>首先输入一个正整数T，表示测试数据的组数，然后是T组测试数据。<br>每组测试输入一个包含大小写字母和空格的字符串（长度不超过85），单词由若干字母构成，单词之间以一个空格间隔。</p><p><strong>输出格式:</strong></p><p>对于每组测试，在一行上输出缩写后的结果，单词之间以一个空格间隔。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">Ad Hoc Networks</span><br><span class="line">IEEE Transactions on Nanotechnology</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ad hoc netw.</span><br><span class="line">ieee tran. on nano.</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    l=[]</span><br><span class="line">    s=<span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(j)&lt;=<span class="number">4</span>:</span><br><span class="line">            l.append(j.lower())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.append(j[:<span class="number">4</span>].lower()+<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(l))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="14、成绩统计"><a href="#14、成绩统计" class="headerlink" title="14、成绩统计"></a>14、成绩统计</h4><details class="folding-tag" ><summary> 4-14 </summary>              <div class='content'>              <blockquote><p>作者 方启明</p><p>单位 杭州电子科技大学</p></blockquote><p>现有某班级Python考试成绩，请你帮老师做一下成绩统计，找出最高分、最低分，算出平均分，统计出不及格人数。</p><p><strong>输入格式:</strong></p><p>输入在第一行给出班级人数n，第二行为n个学生的成绩（0~100之间的整数），中间用空格分隔。</p><p><strong>输出格式:</strong></p><p>输出共四行，分别为最高分、最低分、平均分和不及格人数，其中平均分保留1位小数。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">80 95 75 85 90 55 66 88 100 58</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Max: 100</span><br><span class="line">Min: 55</span><br><span class="line">Ave: 79.2</span><br><span class="line">Fail: 2</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">p=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Max: <span class="subst">&#123;<span class="built_in">max</span>(p)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Min: <span class="subst">&#123;<span class="built_in">min</span>(p)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ave: &#123;:.1f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">sum</span>(p)/<span class="built_in">len</span>(p)))</span><br><span class="line">fail=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">  <span class="keyword">if</span> i&lt;<span class="number">60</span>:</span><br><span class="line">      fail+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Fail: <span class="subst">&#123;fail&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="15、字典应用—用户登录"><a href="#15、字典应用—用户登录" class="headerlink" title="15、字典应用—用户登录"></a>15、字典应用—用户登录</h4><details class="folding-tag" ><summary> 4-15 </summary>              <div class='content'>              <blockquote><p>作者 赵广辉</p><p>单位 武汉理工大学</p></blockquote><p>有字典如下：<br>dic = {‘admin’:’123456’,’administrator’:’12345678’,’root’:’password’}<br>实现用户输入用户名和密码，当用户名与密码和字典中的键值对匹配时，显示“登录成功”，否则显示“登录失败”，登录失败时允许重复输入三次。</p><p><strong>输入格式:</strong></p><p>在两行中分别输入用户名和密码</p><p><strong>输出格式:</strong></p><p>“登录成功”或”登录失败”</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin</span><br><span class="line">12345678</span><br><span class="line">admin</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录失败</span><br><span class="line">登录成功</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;admin&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;administrator&#x27;</span>:<span class="string">&#x27;12345678&#x27;</span>,<span class="string">&#x27;root&#x27;</span>:<span class="string">&#x27;password&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    name=<span class="built_in">input</span>()</span><br><span class="line">    password=<span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> dic.keys():</span><br><span class="line">        <span class="keyword">if</span> password==dic[name]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="16、分班统计最喜欢的节目"><a href="#16、分班统计最喜欢的节目" class="headerlink" title="16、分班统计最喜欢的节目"></a>16、分班统计最喜欢的节目</h4><details class="folding-tag" ><summary> 4-16 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>学校举办的了迎新晚会，1班，2班两个新生班各自统计好班里同学最喜欢的节目。节目编号由一个大写字母代表。统计结果分别已经存放到两个字典中。字典元素的键是节目编号，元素的值是相应节目获得的票数，没有人喜欢的节目不用记录。如：字典{‘Q’:10,’A’:22,’X’:28} 表示，喜欢Q节目的有10位同学，喜欢A节目的有22位同学，喜欢X节目的有28位同学。输入两个班级的统计结果。将合并后的统计结果按节目编号的字母顺序打印出来。（注意，如果1班有10个同学喜欢Q节目，2班有15个同学喜欢Q节目，则合并后，有25个同学喜欢Q节目）</p><p><strong>输入格式:</strong></p><p>输入两个字典，一行一个。字典元素的键是节目编号（大写字母），元素的值是相应节目获得的票数。</p><p><strong>输出格式:</strong></p><p>按字母顺序输出合并后的统计结果。每个节目占一行，以“节目编号:统计票数”的形式打印。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;Q&#x27;:10,&#x27;A&#x27;:22,&#x27;X&#x27;:28&#125; </span><br><span class="line">&#123;&#x27;A&#x27;:30,&#x27;D&#x27;:1,&#x27;Q&#x27;:15,&#x27;B&#x27;:13&#125;</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A:52</span><br><span class="line">B:13</span><br><span class="line">D:1</span><br><span class="line">Q:25</span><br><span class="line">X:28</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1_dic=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">c2_dic=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">s=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c1_dic.keys():</span><br><span class="line">    s[i]=c1_dic.get(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c2_dic.keys():</span><br><span class="line">    s[i]=s.get(i,<span class="number">0</span>)+c2_dic.get(i,<span class="number">0</span>)</span><br><span class="line">l=<span class="built_in">sorted</span>(s.items(),key=<span class="keyword">lambda</span> d:d[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i[<span class="number">0</span>]&#125;</span>:<span class="subst">&#123;i[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><hr><h2 id="九、Python编程练习"><a href="#九、Python编程练习" class="headerlink" title="九、Python编程练习"></a><span id="jump19">九、Python编程练习</span></h2><details class="folding-tag" ><summary> Python编程练习 </summary>              <div class='content'>              <h3 id="（一）函数题"><a href="#（一）函数题" class="headerlink" title="（一）函数题"></a>（一）函数题</h3><details class="folding-tag" ><summary> 函数题 </summary>              <div class='content'>              <h4 id="1、使用函数求素数和"><a href="#1、使用函数求素数和" class="headerlink" title="1、使用函数求素数和"></a>1、使用函数求素数和</h4><details class="folding-tag" ><summary> 1-1 </summary>              <div class='content'>              <blockquote><p>作者 陈春晖</p><p>单位 浙江大学</p></blockquote><p>使用函数求素数和</p><p>prime(p), 其中函数prime当用户传入参数p为素数时返回True，否则返回False.<br>PrimeSum(m,n),函数PrimeSum返回区间[m, n]内所有素数的和。题目保证用户传入的参数1&lt;=m&lt;n。</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在这里描述函数接口：</span><br><span class="line">prime(p)，返回<span class="literal">True</span>表示p是素数，返回<span class="literal">False</span>表示p不是素数</span><br><span class="line">PrimeSum(m,n)，函数返回素数和</span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 请在这里填写答案 */</span><br><span class="line"></span><br><span class="line">m,n=<span class="built_in">input</span>().split()</span><br><span class="line">m=<span class="built_in">int</span>(m)</span><br><span class="line">n=<span class="built_in">int</span>(n)</span><br><span class="line"><span class="built_in">print</span>(PrimeSum(m,n))</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 10</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PrimeSum</span>(<span class="params">m,n</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> prime(i):</span><br><span class="line">            <span class="built_in">sum</span>+=i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prime</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">if</span> p==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> p==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">int</span>(math.sqrt(p))+<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> p%i==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PrimeSum</span>(<span class="params">m,n</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> prime(i):</span><br><span class="line">            <span class="built_in">sum</span>+=i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prime</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">if</span> p==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> p==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">int</span>(math.sqrt(p))+<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> p%i==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">m,n=<span class="built_in">input</span>().split()</span><br><span class="line">m=<span class="built_in">int</span>(m)</span><br><span class="line">n=<span class="built_in">int</span>(n)</span><br><span class="line"><span class="built_in">print</span>(PrimeSum(m,n))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、人民币美元双向兑换"><a href="#2、人民币美元双向兑换" class="headerlink" title="2、人民币美元双向兑换"></a>2、人民币美元双向兑换</h4><details class="folding-tag" ><summary> 1-2 </summary>              <div class='content'>              <blockquote><p>作者 郭晓曦</p><p>单位 集美大学</p></blockquote><p>本题要求实现一个人民币与美元的双向兑换函数change(money)，可实现1美元=6.709人民币的双向兑换。输出兑换的结果保留2位小数。</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在这里描述函数接口。例如：</span><br><span class="line">change( money )</span><br></pre></td></tr></table></figure><p>其中 money都是用户传入的参数，表示待兑换的钱数。</p><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/* 请在这里填写答案 */</span><br><span class="line">x = <span class="built_in">input</span>()</span><br><span class="line">change(x)</span><br></pre></td></tr></table></figure><p><strong>输入样例1：</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$1</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1美元 = 6.71人民币</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">￥1</span><br></pre></td></tr></table></figure><p><strong>输出样例2</strong>：</p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1人民币 = 0.15美元</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">money</span>):</span><br><span class="line">    m=<span class="built_in">int</span>(money[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">if</span> money[<span class="number">0</span>]==<span class="string">&#x27;$&#x27;</span>:</span><br><span class="line">        mz=m*<span class="number">6.709</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;美元 = &#123;:.2f&#125;人民币&quot;</span>.<span class="built_in">format</span>(m,mz))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mm=m/<span class="number">6.709</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;人民币 = &#123;:.2f&#125;美元&quot;</span>.<span class="built_in">format</span>(m,mm))</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">money</span>):</span><br><span class="line">    m=<span class="built_in">int</span>(money[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">if</span> money[<span class="number">0</span>]==<span class="string">&#x27;$&#x27;</span>:</span><br><span class="line">        mz=m*<span class="number">6.709</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;美元 = &#123;:.2f&#125;人民币&quot;</span>.<span class="built_in">format</span>(m,mz))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mm=m/<span class="number">6.709</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;人民币 = &#123;:.2f&#125;美元&quot;</span>.<span class="built_in">format</span>(m,mm))</span><br><span class="line">x = <span class="built_in">input</span>()</span><br><span class="line">change(x)</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h3 id="（二）编程题"><a href="#（二）编程题" class="headerlink" title="（二）编程题"></a>（二）编程题</h3><details class="folding-tag" ><summary> 编程题 </summary>              <div class='content'>              <h4 id="1、jmu-python-分段函数"><a href="#1、jmu-python-分段函数" class="headerlink" title="1、jmu-python-分段函数"></a>1、jmu-python-分段函数</h4><details class="folding-tag" ><summary> 2-1 </summary>              <div class='content'>              <blockquote><p>作者 蔡莉白</p><p>单位 集美大学</p></blockquote><p>本题目要求计算下列分段函数f(x)的值（x为从键盘输入的一个任意实数）：</p><p><img src="https://images.ptausercontent.com/625099ce-3e8d-4a2f-a719-99929e1e027e.jpg" alt="分段函数.jpg"></p><p><strong>输入格式:</strong></p><p>输入在一行中给出实数 x。</p><p><strong>输出格式:</strong></p><p>在一行中按“f(x)=result”的格式输出，其中<strong>x与result都保留两位小数</strong>。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.76</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(0.76)=1.20</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> x&lt;<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f(&#123;:.2f&#125;)=&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(x,<span class="number">1.2</span>))</span><br><span class="line"><span class="keyword">elif</span> x==<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f(&#123;:.2f&#125;)=&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(x,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;f(&#123;:.2f&#125;)=&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(x,<span class="number">2</span>*x+<span class="number">1</span>))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、统计单词的个数"><a href="#2、统计单词的个数" class="headerlink" title="2、统计单词的个数"></a>2、统计单词的个数</h4><details class="folding-tag" ><summary> 2-2 </summary>              <div class='content'>              <blockquote><p>作者 陈春晖</p><p>单位 浙江大学</p></blockquote><p>输入一行字符，以回车结束，统计其中单词的个数。单词是中间没有空格的字符序列，各单词之间用空格分隔，单词间空格数可以是多个。</p><p><strong>输入格式:</strong></p><p>在一行中输入字符</p><p><strong>输出格式:</strong></p><p>在一行中输出单词的数量</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Let&#x27;s  go   to room  209</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count = 5</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">input</span>().split()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;count = <span class="subst">&#123;<span class="built_in">len</span>(s)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="3、简易计算器"><a href="#3、简易计算器" class="headerlink" title="3、简易计算器"></a>3、简易计算器</h4><details class="folding-tag" ><summary> 2-3 </summary>              <div class='content'>              <blockquote><p>作者 python课程组</p><p>单位 合肥师范学院</p></blockquote><p>简易计算器设计。</p><p><strong>输入格式:</strong></p><p>输入两个非零整数，并在4 行中按顺序输出两个数的加、减、乘、除的计算结果。</p><p><strong>输出格式:</strong></p><p>要求输出格式如下，符号前后各有一个空格,具体参考输出样例‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬：</p><p>整数1 + 整数2 = 和<br>整数1 - 整数2 = 差<br>整数1 * 整数2 = 积<br>整数1 / 整数2 = 商</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 + 2 = 3</span><br><span class="line">1 - 2 = -1</span><br><span class="line">1 * 2 = 2</span><br><span class="line">1 / 2 = 0.5</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">b=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span> + <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a+b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span> - <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a-b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a*b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span> / <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a/b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><hr><h2 id="八、第8章-模块"><a href="#八、第8章-模块" class="headerlink" title="八、第8章 模块"></a><span id="jump18">八、第8章 模块</span></h2><details class="folding-tag" ><summary> 第8章 </summary>              <div class='content'>              <h3 id="（一）判断题"><a href="#（一）判断题" class="headerlink" title="（一）判断题"></a>（一）判断题</h3><details class="folding-tag" ><summary> 判断题 </summary>              <div class='content'>              <p>1、(F)</p><p>计算<em>x**y</em>，有以下三种方法：<br>(1)    x**y；<br>(2)    pow(x,y)；<br>(3)    import random<br>      random.pow(x,y)  </p><hr><p>2、(T)</p><p>假设random模块已导入，那么表达式 random.sample(range(10), 7) 的作用是生成7个不重复的整数。</p><hr><p>3、(T)</p><p>使用random模块的函数randint(1, 100)获取随机数时，有可能会得到100。</p><hr><p>4、(F)</p><p>将列表中的元素顺序打乱的函数shuffle()不是random模块的函数或方法。</p><hr><p>5、(T)</p><p>每次用seed函数设置相同的种子后，random()都能产生相同的随机数。</p><hr><p>6、(F)</p><p>标准库random库中的随机函数randint(a,b)是用来生成一个大于等于a且小于b的整数的。</p><hr><p>7、将列表中的元素顺序打乱的函数shuffle()不是random模块的函数或方法。   （F）</p><hr><p>8、(T)</p><p>Python中，random模块是内置的标准模块，可以生成随机数。</p><hr><p>9、(T)</p><p>random模块主要用于生成随机数。</p><hr><p>10、(F)</p><p>首先import math，然后运行sqrt(4)就可以成功对4求开根号。</p>              </div>            </details><hr><h3 id="（二）单选题-1"><a href="#（二）单选题-1" class="headerlink" title="（二）单选题"></a>（二）单选题</h3><details class="folding-tag" ><summary> 单选题 </summary>              <div class='content'>              <p>1、(D)</p><p>下列指令执行后结果为（）。</p><p>import math</p><p>n=5</p><p>print(factorial(n))</p><p>A.120</p><p>B.24</p><p>C.5</p><p>D.出现错误</p><hr><p>2、(C)</p><p>要使用math库中的sqrt()函数，导入语句错误的是：（）</p><p>A.import math</p><p>B.from math import sqrt</p><p>C.from sqrt import math</p><p>D.from math import *</p><hr><p>3、(A)</p><p>以下关于random库的描述错误的是：</p><p>A.生成随机数之前必须要指定随机数种子</p><p>B.设定相同种子，每次调用随机函数生成的随机数相同</p><p>C.通过<code>from random import *</code>可以引入random随机库</p><p>D.通过<code>import random</code>可以引入random随机库</p><hr><p>4、(D)</p><p>python中，哪个选项是random库中用于生成随机小数的函数？</p><p>A.randrange()</p><p>B.randint()</p><p>C.getrandbits()</p><p>D.random()</p><hr><p>5、(B)</p><p>哪个选项能够最简单的在列表[‘apple’,’pear’,’peach’,’orange’]中随机选取一个元素？</p><p>A.shuffle()</p><p>B.choice()</p><p>C.sample()</p><p>D.random()</p><hr><p>6、(C)</p><p>Python中random模块的哪个函数可以产生一个指定区间的随机整数？</p><p>A.random</p><p>B.randrange</p><p>C.randint</p><p>D.choice</p><hr><p>7、(B)</p><p>给出如下代码:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import random as ran</span><br><span class="line">listv = []</span><br><span class="line">ran.seed(100)</span><br><span class="line">for  i in range(10):</span><br><span class="line">i = ran.randint( 100, 999)</span><br><span class="line">listv.append(i)</span><br></pre></td></tr></table></figure><p>以下选项中能输出随机列表元素最大值的是<strong>_</strong></p><p>A.print(listV.max())</p><p>B.print(max(listV))</p><p>C.print(listV.reverse(i))</p><p>D.print(listV.pop(i))</p><hr><p>8、(A)</p><p>关于random.uniform(a,b)的作用描述，以下选项中正确的是‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬<strong><strong><strong>__</strong></strong></strong></p><p>A.生成一个[a, b]之间的随机小数</p><p>B.生成一个均值为a，方差为b的正态分布</p><p>C.生成一个(a, b)之间的随机数</p><p>D.生成一个[a, b]之间的随机整数</p>              </div>            </details><hr><h3 id="（三）编程题"><a href="#（三）编程题" class="headerlink" title="（三）编程题"></a>（三）编程题</h3><details class="folding-tag" ><summary> 编程题 </summary>              <div class='content'>              <h4 id="1、产生m个4位数的验证码1"><a href="#1、产生m个4位数的验证码1" class="headerlink" title="1、产生m个4位数的验证码1"></a>1、产生m个4位数的验证码1</h4><details class="folding-tag" ><summary> 3-1 </summary>              <div class='content'>              <blockquote><p>作者 陈丹</p><p>单位 浙大城市学院</p></blockquote><p>同一行中输入m和n二个正整数，n作为seed种子，产生一个4位的随机数验证码，该随机数作为下一个seed种子，再产生一个4位随机数验证码……直至产生m个随机数验证码。产生的m个随机数验证码按样例输出。</p><p>m,n=input().split()        #同一行中输入m,n</p><p>randint(1000,9999)       #生成一个【1000，9999】之间的整数</p><p><strong>输入格式:</strong></p><p>同一行中输入m和n。二数之间用空隔隔开。</p><p><strong>输出格式:</strong></p><p>分m行输出。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2  8</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4714</span><br><span class="line">1142</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">m,n=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    random.seed(n)</span><br><span class="line">    n=random.randint(<span class="number">1000</span>,<span class="number">9999</span>)</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、随机小学加法题"><a href="#2、随机小学加法题" class="headerlink" title="2、随机小学加法题"></a>2、随机小学加法题</h4><details class="folding-tag" ><summary> 3-2 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>使用random库的randint()函数随机产生n道加法题（要求两个加数都是小于10的正整数），正整数n由用户输入。（注意：先要使用random库的seed(a)函数初始化随机数种子，种子参数为正整数a，由用户输入）</p><p><strong>输入格式</strong>:</p><p>在一行中输入初始化随机数种子参数a（正整数）和题目数量n（小于10的正整数）。</p><p><strong>输出格式:</strong></p><p>以x+y=的形式输出n道加法题，每行一题。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 5</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1+2=</span><br><span class="line">2+6=</span><br><span class="line">3+5=</span><br><span class="line">5+4=</span><br><span class="line">1+3=</span><br></pre></td></tr></table></figure><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">333 3</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9+6=</span><br><span class="line">6+4=</span><br><span class="line">7+2=</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">random.seed(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">    x=random.randint(<span class="number">1</span>,<span class="number">9</span>)</span><br><span class="line">    y=random.randint(<span class="number">1</span>,<span class="number">9</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;x&#125;</span>+<span class="subst">&#123;y&#125;</span>=&#x27;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><hr><h2 id="七、第7章-类与面向对象"><a href="#七、第7章-类与面向对象" class="headerlink" title="七、第7章 类与面向对象"></a><span id="jump17">七、第7章 类与面向对象</span></h2><details class="folding-tag" ><summary> 第7章 </summary>              <div class='content'>              <h3 id="（一）判断题"><a href="#（一）判断题" class="headerlink" title="（一）判断题"></a>（一）判断题</h3><details class="folding-tag" ><summary> 判断题 </summary>              <div class='content'>              <p>1、(F)</p><p>定义Python函数时必须指定函数返回值类型。 </p><hr><p>2、(T)</p><p>定义Python函数时，如果函数中没有return语句，则默认返回空值None。   </p><hr><p>3、(T)</p><p>Python允许将多个参数传递给函数。</p><hr><p>4、(T)</p><p>在Python类中，构造方法的名称为<code>__init__</code> 。 </p><hr><p>5、(F)</p><p>Python中，父类（超类）从子类继承方法。</p><hr><p>6、(F)</p><p>Python不允许类的多继承，即不允许一个子类拥有多个父类。</p><hr><p>7、(F)</p><p>在Python中定义类时实例方法的第一个参数名称必须是self。 </p><hr><p>8、(T)</p><p>在Python中，可以为自定义类的对象动态增加新成员。</p><hr><p>9、(T)</p><p>在Python中，函数定义必须在函数调用之前。</p><hr><p>10、(T)</p><p>在Python中，对象是类的实例。</p><hr><p>11、(F)</p><p>Python是一个面向过程的程序设计语言。 </p><hr><p>12、(F)</p><p>在Python中，类的所有属性（成员变量）都是可以直接修改的。</p>              </div>            </details><hr><h3 id="（二）单选题-2"><a href="#（二）单选题-2" class="headerlink" title="（二）单选题"></a>（二）单选题</h3><details class="folding-tag" ><summary> 单选题 </summary>              <div class='content'>              <p>1、(C)</p><p>在Python中，对于函数定义代码的理解，正确的是<strong><em>__</em></strong>.</p><p>A.必须存在形参</p><p>B.必须存在return语句</p><p>C.形参和return语句都是可有可无</p><p>D.形参和return语句要么都存在，要么都不存在</p><hr><p>2、(B)</p><p>关于Python的lambda函数，以下选项中描述错误的是 </p><p>A.lambda函数将函数名作为函数结果返回</p><p>B.f = lambda x,y:x+y 执行后，f的类型为数字类型</p><p>C.lambda用于定义简单的、能够在一行内表示的函数</p><p>D.可以使用lambda函数定义列表的排序原则</p><hr><p>3、(A)</p><p>Python定义函数时，<code>（    ）</code>参数类型。</p><p>A.不需要声明</p><p>B.必须声明（必须指定）</p><p>C.可声明也可不声明</p><p>D.设置</p><hr><p>4、(B)</p><p>以下关于Python函数的描述中，<strong>错误</strong>的是（    )。</p><p>A.函数是一段可重用的语句块</p><p>B.每次使用函数，需要提供相同的参数作为输入</p><p>C.函数通过函数名进行调用</p><p>D.函数是一段具有特定功能的语句块</p><hr><p>5、(D)</p><p>基本的Python内置函数range(a,b,s)的作用是（）。</p><p>A.返回组合类型的逆序迭代形式</p><p>B.返回a的四舍五入值，b表示保留小数的位数</p><p>C.返回a的b次幂</p><p>D.产生一个整数序列，从a到b（不含）以s为步长</p><hr><p>6、(A)</p><p>Python中，定义类的关键字是(    )。</p><p>A.class</p><p>B.strut</p><p>C.def</p><p>D.for</p><hr><p>7、(A)</p><p>在Python语言中，类的私有成员以(    )开头。</p><p>A.<code>__</code>（两个下划线）<br>B.<code>_</code>（一个下划线）<br>C.private<br>D.<code>#</code></p><hr><p>8、(C)</p><p>Python中，关于类中的<code>__init__()</code>函数，说法正确的是(    )。</p><p>A.第一个参数必须命名为self </p><p>B.必须显式调用 </p><p>C.创建对象时自动调用</p><p>D.属于保护成员</p><hr><p>9、(B)</p><p>Python定义类的构造方法是（    ）。</p><p>A.<code>__new__()</code></p><p>B.<code>__init__()</code></p><p>C.<code>__add__()</code></p><p>D.<code>__del__()</code></p><hr><p>10、(B)</p><p>Python类的方法的第一个参数 self 的作用不包括：</p><p>A.通过 self 可以访问对象的属性</p><p>B.代表类本身</p><p>C.传入对象本身</p><p>D.在方法内,self 就是对象的引用</p>              </div>            </details><hr><h3 id="（三）函数题-1"><a href="#（三）函数题-1" class="headerlink" title="（三）函数题"></a>（三）函数题</h3><details class="folding-tag" ><summary> 函数题 </summary>              <div class='content'>              <h4 id="1、二维平面上的点操作（Python3）"><a href="#1、二维平面上的点操作（Python3）" class="headerlink" title="1、二维平面上的点操作（Python3）"></a>1、二维平面上的点操作（Python3）</h4><details class="folding-tag" ><summary> 3-1 </summary>              <div class='content'>              <blockquote><p>作者 高礼彬</p><p>单位 浙江工贸职业技术学院</p></blockquote><p><strong>题目描述</strong></p><p>设计一个表示二维平面上点的类 <code>Point</code>。该类应该包含以下功能：</p><ul><li>两个私有属性 <code>_x</code> 和 <code>_y</code>，分别表示点的横坐标和纵坐标。</li><li>一个构造函数 <code>__init__</code>，用于初始化点的坐标。</li><li>一个方法 <code>distance_to_origin</code>，返回该点到原点 (0, 0) 的欧几几何距离。</li><li>一个方法 <code>move_by</code>，接受两个参数 <code>dx</code> 和 <code>dy</code>，将点的横坐标和纵坐标分别增加 <code>dx</code> 和 <code>dy</code>。</li><li>一个特殊方法 <code>__str__</code>，返回点的信息字符串，格式为 <code>&quot;Point(x, y)&quot;</code>。</li></ul><p><strong>函数接口定义（你实现）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Point:</span><br><span class="line">    def __init__(self, x, y):</span><br><span class="line">        # 初始化点的坐标</span><br><span class="line">        pass</span><br><span class="line">    </span><br><span class="line">    def distance_to_origin(self):</span><br><span class="line">        # 返回点到原点的距离</span><br><span class="line">        pass</span><br><span class="line">    </span><br><span class="line">    def move_by(self, dx, dy):</span><br><span class="line">        # 移动点的位置</span><br><span class="line">        pass</span><br><span class="line">    </span><br><span class="line">    def __str__(self):</span><br><span class="line">        # 返回点的信息字符串</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    # 用户输入点的初始坐标 (x, y)</span><br><span class="line">    # 使用 input() 读取一行输入，并用 split() 将其分割成两个字符串</span><br><span class="line">    # 使用 map(float, ...) 将这两个字符串转换为浮点数</span><br><span class="line">    x, y = map(float, input(&quot;请输入点的初始坐标 (x y): &quot;).split())</span><br><span class="line">    </span><br><span class="line">    # 创建 Point 类的实例，传入初始坐标 (x, y)</span><br><span class="line">    point = Point(x, y)</span><br><span class="line">    </span><br><span class="line">    # 调用 point 的 distance_to_origin 方法计算点到原点 (0, 0) 的距离</span><br><span class="line">    # 使用 f-string 格式化输出，保留两位小数</span><br><span class="line">    print(f&quot;Distance to origin: &#123;point.distance_to_origin():.2f&#125;&quot;)</span><br><span class="line">    </span><br><span class="line">    # 用户输入移动量 (dx, dy)</span><br><span class="line">    # 使用 input() 读取一行输入，并用 split() 将其分割成两个字符串</span><br><span class="line">    # 使用 map(float, ...) 将这两个字符串转换为浮点数</span><br><span class="line">    dx, dy = map(float, input(&quot;请输入移动量 (dx dy): &quot;).split())</span><br><span class="line">    </span><br><span class="line">    # 调用 point 的 move_by 方法，将点的位置按 (dx, dy) 移动</span><br><span class="line">    point.move_by(dx, dy)</span><br><span class="line">    </span><br><span class="line">    # 打印移动后的点的信息</span><br><span class="line">    # 调用 point 的 __str__ 方法，返回点的字符串表示</span><br><span class="line">    print(point)</span><br><span class="line"></span><br><span class="line">#执行 main 函数</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 4</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Distance to origin: 5.00</span><br><span class="line">Point(4.0, 6.0)</span><br></pre></td></tr></table></figure><p><strong>实现提示</strong></p><ul><li>使用 <code>math.sqrt</code> 来计算欧几里得距离(开根号）。</li><li>确保 <code>__str__</code> 方法返回正确的字符串格式。</li></ul><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    _x=<span class="number">0</span></span><br><span class="line">    _y=<span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self._x=x</span><br><span class="line">        self._y=y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distance_to_origin</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(self._x*self._x+self._y*self._y)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_by</span>(<span class="params">self, dx, dy</span>):</span><br><span class="line">        self._x+=dx</span><br><span class="line">        self._y+=dy</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Point(&#123;:.1f&#125;, &#123;:.1f&#125;)&quot;</span>.<span class="built_in">format</span>(self._x,self._y)</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    _x=<span class="number">0</span></span><br><span class="line">    _y=<span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self._x=x</span><br><span class="line">        self._y=y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distance_to_origin</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(self._x*self._x+self._y*self._y)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_by</span>(<span class="params">self, dx, dy</span>):</span><br><span class="line">        self._x+=dx</span><br><span class="line">        self._y+=dy</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Point(&#123;:.1f&#125;, &#123;:.1f&#125;)&quot;</span>.<span class="built_in">format</span>(self._x,self._y)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 用户输入点的初始坐标 (x, y)</span></span><br><span class="line">    <span class="comment"># 使用 input() 读取一行输入，并用 split() 将其分割成两个字符串</span></span><br><span class="line">    <span class="comment"># 使用 map(float, ...) 将这两个字符串转换为浮点数</span></span><br><span class="line">    x, y = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>(<span class="string">&quot;请输入点的初始坐标 (x y): &quot;</span>).split())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建 Point 类的实例，传入初始坐标 (x, y)</span></span><br><span class="line">    point = Point(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用 point 的 distance_to_origin 方法计算点到原点 (0, 0) 的距离</span></span><br><span class="line">    <span class="comment"># 使用 f-string 格式化输出，保留两位小数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Distance to origin: <span class="subst">&#123;point.distance_to_origin():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 用户输入移动量 (dx, dy)</span></span><br><span class="line">    <span class="comment"># 使用 input() 读取一行输入，并用 split() 将其分割成两个字符串</span></span><br><span class="line">    <span class="comment"># 使用 map(float, ...) 将这两个字符串转换为浮点数</span></span><br><span class="line">    dx, dy = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>(<span class="string">&quot;请输入移动量 (dx dy): &quot;</span>).split())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用 point 的 move_by 方法，将点的位置按 (dx, dy) 移动</span></span><br><span class="line">    point.move_by(dx, dy)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印移动后的点的信息</span></span><br><span class="line">    <span class="comment"># 调用 point 的 __str__ 方法，返回点的字符串表示</span></span><br><span class="line">    <span class="built_in">print</span>(point)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行 main 函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、图形面积计算（Python3）"><a href="#2、图形面积计算（Python3）" class="headerlink" title="2、图形面积计算（Python3）"></a>2、图形面积计算（Python3）</h4><details class="folding-tag" ><summary> 3-2 </summary>              <div class='content'>              <blockquote><p>作者 高礼彬</p><p>单位 浙江工贸职业技术学院</p></blockquote><p><strong>题目描述</strong></p><p>设计一个简单的图形编辑器系统，该系统包括以下类：</p><ul><li><code>Shape</code>：所有图形的基类。</li><li><code>Circle</code>：表示圆形，继承自 <code>Shape</code>。</li><li><code>Rectangle</code>：表示矩形，继承自 <code>Shape</code>。</li><li><code>Triangle</code>：表示三角形，继承自 <code>Shape</code>。</li></ul><p>每个图形类都需要实现以下方法：</p><ul><li><code>area()</code>：返回图形的面积。</li><li><code>perimeter()</code>：返回图形的周长。</li></ul><p>此外，**题目已经编写好了主程序和测试函数，学生只需实现上述这些方法即可。</p><p><strong>函数接口定义（你实现的部分）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;This method should be overridden by subclasses&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;This method should be overridden by subclasses&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius</span>):</span><br><span class="line">        self.radius = radius</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算并返回圆的面积</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算并返回圆的周长</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, width, height</span>):</span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算并返回矩形的面积</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算并返回矩形的周长</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.c = c</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算并返回三角形的面积</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算并返回三角形的周长</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例（判卷逻辑）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_shape_info</span>(<span class="params">shape</span>):</span><br><span class="line">    <span class="comment"># 打印给定形状的面积和周长</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Area: <span class="subst">&#123;shape.area():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Perimeter: <span class="subst">&#123;shape.perimeter():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 用户输入图形类型和相应的参数</span></span><br><span class="line">    shape_type = <span class="built_in">input</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> shape_type == <span class="string">&#x27;circle&#x27;</span>:</span><br><span class="line">        radius = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">        shape = Circle(radius)</span><br><span class="line">    <span class="keyword">elif</span> shape_type == <span class="string">&#x27;rectangle&#x27;</span>:</span><br><span class="line">        width, height = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>(<span class="string">&quot;&quot;</span>).split())</span><br><span class="line">        shape = Rectangle(width, height)</span><br><span class="line">    <span class="keyword">elif</span> shape_type == <span class="string">&#x27;triangle&#x27;</span>:</span><br><span class="line">        a, b, c = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>(<span class="string">&quot;&quot;</span>).split())</span><br><span class="line">        shape = Triangle(a, b, c)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未知的图形类型&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印图形的面积和周长</span></span><br><span class="line">    print_shape_info(shape)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>输入样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">circle</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p><strong>输出样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Area: 78.54</span><br><span class="line">Perimeter: 31.42</span><br></pre></td></tr></table></figure><p><strong>输入样例 2</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rectangle</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><p><strong>输出样例 2</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Area: 24.00</span><br><span class="line">Perimeter: 20.00</span><br></pre></td></tr></table></figure><p><strong>输入样例 3</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">triangle</span><br><span class="line">3 4 5</span><br></pre></td></tr></table></figure><p><strong>输出样例 3</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Area: 6.00</span><br><span class="line">Perimeter: 12.00</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><ul><li>你只需要实现接口部分即可。</li><li>使用 <code>math.pi</code> 来计算圆的面积和周长。</li><li>对于三角形，可以使用<strong>海伦公式（Heron’s formula）</strong>来计算面积：</li></ul><ol><li>首先计算半周长<code>s</code>：<br><em>s</em>=2<em>a</em>+<em>b</em>+<em>c</em>​</li><li>然后使用半周长<code>s</code> 计算三角形的面积 <code>A</code>：<br><em>A</em>=<em>s</em>(<em>s</em>−<em>a</em>)(<em>s</em>−<em>b</em>)(<em>s</em>−<em>c</em>)​</li></ol><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;This method should be overridden by subclasses&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;This method should be overridden by subclasses&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius</span>):</span><br><span class="line">        self.radius = radius</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.radius*self.radius*math.pi</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*self.radius*math.pi</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, width, height</span>):</span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.width*self.height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.height+self.width)*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.c = c</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        p=(self.a+self.b+self.c)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> math.sqrt(p*(p-self.a)*(p-self.b)*(p-self.c))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.a+self.b+self.c</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;This method should be overridden by subclasses&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;This method should be overridden by subclasses&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius</span>):</span><br><span class="line">        self.radius = radius</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.radius*self.radius*math.pi</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*self.radius*math.pi</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, width, height</span>):</span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.width*self.height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.height+self.width)*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.c = c</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        p=(self.a+self.b+self.c)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> math.sqrt(p*(p-self.a)*(p-self.b)*(p-self.c))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.a+self.b+self.c</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_shape_info</span>(<span class="params">shape</span>):</span><br><span class="line">    <span class="comment"># 打印给定形状的面积和周长</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Area: <span class="subst">&#123;shape.area():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Perimeter: <span class="subst">&#123;shape.perimeter():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 用户输入图形类型和相应的参数</span></span><br><span class="line">    shape_type = <span class="built_in">input</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> shape_type == <span class="string">&#x27;circle&#x27;</span>:</span><br><span class="line">        radius = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">        shape = Circle(radius)</span><br><span class="line">    <span class="keyword">elif</span> shape_type == <span class="string">&#x27;rectangle&#x27;</span>:</span><br><span class="line">        width, height = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>(<span class="string">&quot;&quot;</span>).split())</span><br><span class="line">        shape = Rectangle(width, height)</span><br><span class="line">    <span class="keyword">elif</span> shape_type == <span class="string">&#x27;triangle&#x27;</span>:</span><br><span class="line">        a, b, c = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>(<span class="string">&quot;&quot;</span>).split())</span><br><span class="line">        shape = Triangle(a, b, c)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未知的图形类型&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印图形的面积和周长</span></span><br><span class="line">    print_shape_info(shape)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h3 id="（四）编程题-1"><a href="#（四）编程题-1" class="headerlink" title="（四）编程题"></a>（四）编程题</h3><details class="folding-tag" ><summary> 编程题 </summary>              <div class='content'>              <h4 id="1、Python-求集合A和B的交集、并集和补集"><a href="#1、Python-求集合A和B的交集、并集和补集" class="headerlink" title="1、Python-求集合A和B的交集、并集和补集"></a>1、Python-求集合A和B的交集、并集和补集</h4><details class="folding-tag" ><summary> 4-1 </summary>              <div class='content'>              <blockquote><p>作者 gllypx</p><p>单位 桂林学院</p></blockquote><p>输入两个集合A和B，输出它们的交集、并集和补集。</p><p><strong>输入格式:</strong></p><p>以集合形式输入：第一行输入集合A，第二行输入集合B。</p><p><strong>输出格式:</strong></p><p>分行输出它们的交集、并集和补集。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3,6,7,8&#125;</span><br><span class="line">&#123;2,3,4&#125;</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A&amp;B: &#123;2, 3&#125;</span><br><span class="line">A|B: &#123;1, 2, 3, 4, 6, 7, 8&#125;</span><br><span class="line">A^B: &#123;1, 4, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">B=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;A&amp;B: <span class="subst">&#123;A&amp;B&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;A|B: <span class="subst">&#123;A|B&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;A^B: <span class="subst">&#123;A^B&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、单个身份证的校验-实验19-身份证校验-《Python编程基础及应用实验教程》-高教社"><a href="#2、单个身份证的校验-实验19-身份证校验-《Python编程基础及应用实验教程》-高教社" class="headerlink" title="2、单个身份证的校验 - 实验19 身份证校验 - 《Python编程基础及应用实验教程》 - 高教社"></a>2、单个身份证的校验 - 实验19 身份证校验 - 《Python编程基础及应用实验教程》 - 高教社</h4><details class="folding-tag" ><summary> 4-2 </summary>              <div class='content'>              <blockquote><p>作者 海洋饼干叔叔</p><p>单位 重庆大学</p></blockquote><p>一个合法的身份证号码由6位地区码、8位出生日期、3位顺序号加1位校验码组成。比如，在身份证号320124198808240056中，320124为地区码，19880824为出生日期，005则为顺序号，6则是根据前17数字生成的校验码。校验码可以帮助检查身份证号在转述，抄录的过程中是否出现错误。</p><p>校验码的计算规则如下：</p><ol><li>对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；</li><li>将加权和对11取模得到余数Z;</li><li>按下述Z-M对应关系取得校验码M。<br>Z: [0,1,2,3,4,5,6,7,8,9,10]<br>M: [1,0,X,9,8,7,6,5,4,3,2]。</li></ol><p><strong>输入格式:</strong></p><p>一个身份证字符串</p><p><strong>输出格式:</strong></p><p>正确/错误</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">320124198808240056</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正确</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=[<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line">m=<span class="string">&#x27;10X98765432&#x27;</span></span><br><span class="line">a=<span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a)!=<span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;错误&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    b=<span class="built_in">sum</span>(<span class="built_in">int</span>(a[i])*n[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>))</span><br><span class="line">    z=m[b%<span class="number">11</span>]</span><br><span class="line">    <span class="keyword">if</span> a[-<span class="number">1</span>]==z:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正确&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><hr><h2 id="六、第6章-函数"><a href="#六、第6章-函数" class="headerlink" title="六、第6章 函数"></a><span id="jump16">六、第6章 函数</span></h2><details class="folding-tag" ><summary> 第6章 </summary>              <div class='content'>              <h3 id="（一）程序填空题"><a href="#（一）程序填空题" class="headerlink" title="（一）程序填空题"></a>（一）程序填空题</h3><details class="folding-tag" ><summary> 程序填空题 </summary>              <div class='content'>              <h4 id="1、默认值参数-实验12-用函数实现模块化程序设计-《Python编程基础及应用实验教程》，高教社"><a href="#1、默认值参数-实验12-用函数实现模块化程序设计-《Python编程基础及应用实验教程》，高教社" class="headerlink" title="1、默认值参数 - 实验12 用函数实现模块化程序设计 《Python编程基础及应用实验教程》，高教社"></a>1、默认值参数 - 实验12 用函数实现模块化程序设计 《Python编程基础及应用实验教程》，高教社</h4><details class="folding-tag" ><summary> 1-1 </summary>              <div class='content'>              <blockquote><p>作者 海洋饼干叔叔</p><p>单位 重庆大学</p></blockquote><p>编写一个函数判断成绩是否及格。由于考试分数有百分制和一百五十分制的区别，如果是百分制，则及格分数为60分，一百五十分制及格分数为90分。<br>请将下述程序补充完整并上机调试，实现上述功能：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isPass</span>(<span class="params">【<span class="number">1</span>】</span>):</span><br><span class="line">    <span class="keyword">if</span> score&gt;=n:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;passed&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;failed&quot;</span></span><br><span class="line"></span><br><span class="line">stuA=<span class="number">80</span>    <span class="comment">#百分制得分80</span></span><br><span class="line"><span class="built_in">print</span>(isPass(stuA))</span><br><span class="line">stuB=<span class="number">120</span>  <span class="comment">#150分制得分120</span></span><br><span class="line"><span class="built_in">print</span>(isPass(【<span class="number">2</span>】))</span><br></pre></td></tr></table></figure><p>【解题提示】<br>isPass()函数中可以设置一个默认值为60的参数n，表示百分制情况下及格的分数为60分。</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>【1】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score,n=<span class="number">60</span></span><br></pre></td></tr></table></figure><p>【2】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stuB,<span class="number">90</span></span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isPass</span>(<span class="params">score,n=<span class="number">60</span></span>):</span><br><span class="line">    <span class="keyword">if</span> score&gt;=n:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;passed&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;failed&quot;</span></span><br><span class="line"></span><br><span class="line">stuA=<span class="number">80</span>    <span class="comment">#百分制得分80</span></span><br><span class="line"><span class="built_in">print</span>(isPass(stuA))</span><br><span class="line">stuB=<span class="number">120</span>  <span class="comment">#150分制得分120</span></span><br><span class="line"><span class="built_in">print</span>(isPass(stuB,<span class="number">90</span>))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、任意数量对象的加法-实验12-用函数实现模块化程序设计-《Python编程基础及应用实验教程》-高教社"><a href="#2、任意数量对象的加法-实验12-用函数实现模块化程序设计-《Python编程基础及应用实验教程》-高教社" class="headerlink" title="2、任意数量对象的加法 - 实验12 用函数实现模块化程序设计 《Python编程基础及应用实验教程》 - 高教社"></a>2、任意数量对象的加法 - 实验12 用函数实现模块化程序设计 《Python编程基础及应用实验教程》 - 高教社</h4><details class="folding-tag" ><summary> 1-2 </summary>              <div class='content'>              <blockquote><p>作者 海洋饼干叔叔</p><p>单位 重庆大学</p></blockquote><p>函数calc()，用于实现任意数量对象的加法操作。请将下述程序补充完整并上机调试，实现上述功能。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">【<span class="number">1</span>】</span>):</span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    【<span class="number">2</span>】</span><br><span class="line">        s=s+i</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">result1=calc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">result2=calc(<span class="number">12</span>,-<span class="number">1</span>,<span class="number">100</span>,<span class="number">30</span>,<span class="number">49</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(result1,result2)</span><br></pre></td></tr></table></figure><p>期望的执行结果为：</p><p>10 240<br>【思考】</p><p>num对象的类型是什么？<br>在一个函数中，带*号形参可以有几个，其位置应该放在何处？答案：</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>【1】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">*num</span><br></pre></td></tr></table></figure><p>【2】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">*num</span>):</span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">        s=s+i</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">result1=calc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">result2=calc(<span class="number">12</span>,-<span class="number">1</span>,<span class="number">100</span>,<span class="number">30</span>,<span class="number">49</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(result1,result2)</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h3 id="（二）函数题"><a href="#（二）函数题" class="headerlink" title="（二）函数题"></a>（二）函数题</h3><details class="folding-tag" ><summary> 函数题 </summary>              <div class='content'>              <h4 id="1、数据平均值（可变参数函数）"><a href="#1、数据平均值（可变参数函数）" class="headerlink" title="1、数据平均值（可变参数函数）"></a>1、数据平均值（可变参数函数）</h4><details class="folding-tag" ><summary> 2-1 </summary>              <div class='content'>              <blockquote><p>作者 田洪云</p><p>单位 临沂大学</p></blockquote><p>输4个用空格分割的数值，求这些数的平均值，保留2位小数，并输出。</p><p><strong>函数接口定义</strong>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">*x</span>):</span><br></pre></td></tr></table></figure><p>x是用户传入的参数，参数数量可以变化，函数根据参数计算其平均值，并返回。</p><p><strong>裁判测试程序样例</strong>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1,x2,x3,x4=<span class="built_in">map</span>(<span class="built_in">eval</span>,<span class="built_in">input</span>().split())</span><br><span class="line">b=average(x1,x2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;两个数平均值为：&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(b))</span><br><span class="line">b=average(x1,x2,x3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;三个数平均值为：&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(b))</span><br><span class="line">b=average(x1,x2,x3,x4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;四个数平均值为：&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(b))</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12 76 65 34</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两个数平均值为：44.00</span><br><span class="line">三个数平均值为：51.00</span><br><span class="line">四个数平均值为：46.75</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">*x</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="built_in">sum</span>+=i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>/<span class="built_in">len</span>(x)</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">*x</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="built_in">sum</span>+=i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>/<span class="built_in">len</span>(x)</span><br><span class="line">x1,x2,x3,x4=<span class="built_in">map</span>(<span class="built_in">eval</span>,<span class="built_in">input</span>().split())</span><br><span class="line">b=average(x1,x2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;两个数平均值为：&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(b))</span><br><span class="line">b=average(x1,x2,x3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;三个数平均值为：&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(b))</span><br><span class="line">b=average(x1,x2,x3,x4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;四个数平均值为：&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(b))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、函数求整数各位数字和"><a href="#2、函数求整数各位数字和" class="headerlink" title="2、函数求整数各位数字和"></a>2、函数求整数各位数字和</h4><details class="folding-tag" ><summary> 2-2 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>本题要求实现一个函数，计算一个整数各位数字的和。</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mysum</span>(<span class="params">x</span>):</span><br></pre></td></tr></table></figure><p>其中 <code>x</code> 是用户传入的参数。函数须返回 整数<code>x</code> 各位数字之和。</p><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#请在这里写答案</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(mysum(n))</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">65</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mysum</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">sum</span>+=x%<span class="number">10</span></span><br><span class="line">        x=x//<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mysum</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">sum</span>+=x%<span class="number">10</span></span><br><span class="line">        x=x//<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(mysum(n))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="3、给姓名加框"><a href="#3、给姓名加框" class="headerlink" title="3、给姓名加框"></a>3、给姓名加框</h4><details class="folding-tag" ><summary> 2-3 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>本题要求实现一个函数，打印带框的姓名。</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">name</span>):</span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#请在这里填写答案</span></span><br><span class="line"></span><br><span class="line">name=<span class="built_in">input</span>()</span><br><span class="line">tag(name)</span><br></pre></td></tr></table></figure><p><strong>输入样例 1：</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fiona</span><br></pre></td></tr></table></figure><p><strong>输出样例 1：</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*******</span><br><span class="line">*Fiona*</span><br><span class="line">*******</span><br></pre></td></tr></table></figure><p><strong>输入样例 2：</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello Kitty</span><br></pre></td></tr></table></figure><p><strong>输出样例 2：</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*************</span><br><span class="line">*Hello Kitty*</span><br><span class="line">*************</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*(<span class="built_in">len</span>(name)+<span class="number">2</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;*<span class="subst">&#123;name&#125;</span>*&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*(<span class="built_in">len</span>(name)+<span class="number">2</span>),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*(<span class="built_in">len</span>(name)+<span class="number">2</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;*<span class="subst">&#123;name&#125;</span>*&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*(<span class="built_in">len</span>(name)+<span class="number">2</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">name=<span class="built_in">input</span>()</span><br><span class="line">tag(name)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="4、三个数的最大值"><a href="#4、三个数的最大值" class="headerlink" title="4、三个数的最大值"></a>4、三个数的最大值</h4><details class="folding-tag" ><summary> 2-4 </summary>              <div class='content'>              <blockquote><p>作者 zhuo</p><p>单位 山东科技大学</p></blockquote><p>本题要求实现一个函数，可找出三个数中的最大值。</p><p><strong>函数接口定义</strong>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">在这里描述函数接口。例如：</span><br><span class="line"><span class="function">def <span class="title">MaxNumber</span><span class="params">(x,y,z)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例</strong>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 请在这里填写答案 */</span></span><br><span class="line">x,y,z=<span class="built_in">map</span>(<span class="type">int</span>,<span class="built_in">input</span>().<span class="built_in">split</span>(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">MaxNumber</span>(x,y,z))</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong>：</p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3,2,1</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MaxNumber</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    <span class="keyword">if</span> x&gt;y:</span><br><span class="line">        a=x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a=y</span><br><span class="line">    <span class="keyword">if</span> a&lt;z:</span><br><span class="line">        a=z</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MaxNumber</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    <span class="keyword">if</span> x&gt;y:</span><br><span class="line">        a=x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a=y</span><br><span class="line">    <span class="keyword">if</span> a&lt;z:</span><br><span class="line">        a=z</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">x,y,z=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(MaxNumber(x,y,z))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="5、信用卡-《Python编程基础及应用》第2版，习题3-7"><a href="#5、信用卡-《Python编程基础及应用》第2版，习题3-7" class="headerlink" title="5、信用卡 - 《Python编程基础及应用》第2版，习题3-7"></a>5、信用卡 - 《Python编程基础及应用》第2版，习题3-7</h4><details class="folding-tag" ><summary> 2-5 </summary>              <div class='content'>              <blockquote><p>作者 海洋饼干叔叔</p><p>单位 重庆大学</p></blockquote><p><strong>（信用卡）</strong>信用卡消费，超过免息期后一般按照日息万分之五计息。请按照如图所示的“功能黑箱”设计函数debt(amount, days)，并编写合适的代码调用测试该函数。<br><img src="https://images.ptausercontent.com/dcc82301-f176-4b0c-b99d-dfb1e44e2295.png" alt="image.png"></p><p>说明：信用卡债务通常是按月计复利（利滚利），简便起见，本函数不计复利，即借贷本金始终保持不变。</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">debt</span>(<span class="params">amount,days</span>)</span><br></pre></td></tr></table></figure><p>amount和days的含义如图。</p><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#请在此处定义debt函数</span></span><br><span class="line"></span><br><span class="line">amt = <span class="built_in">eval</span>(<span class="built_in">input</span>())    <span class="comment">#输入借贷额</span></span><br><span class="line">days = <span class="built_in">eval</span>(<span class="built_in">input</span>())   <span class="comment">#借贷天数</span></span><br><span class="line">amtNew = debt(amt,days)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;amtNew:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10000</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10025.00</span><br></pre></td></tr></table></figure><p>注意：只提交debt函数的定义，不要提交完整代码。系统后台会将提交的函数定义与测试代码自动合并，然后验证其正确性。代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">debt</span>(<span class="params">amount,days</span>):</span><br><span class="line">    <span class="keyword">return</span> amount*<span class="number">0.0005</span>*days+amount</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">debt</span>(<span class="params">amount,days</span>):</span><br><span class="line">    <span class="keyword">return</span> amount*<span class="number">0.0005</span>*days+amount</span><br><span class="line">amt = <span class="built_in">eval</span>(<span class="built_in">input</span>())    <span class="comment">#输入借贷额</span></span><br><span class="line">days = <span class="built_in">eval</span>(<span class="built_in">input</span>())   <span class="comment">#借贷天数</span></span><br><span class="line">amtNew = debt(amt,days)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;amtNew:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="6、海伦-秦九韶公式-《Python编程基础及应用》第2版，习题3-8"><a href="#6、海伦-秦九韶公式-《Python编程基础及应用》第2版，习题3-8" class="headerlink" title="6、海伦-秦九韶公式 - 《Python编程基础及应用》第2版，习题3-8"></a>6、海伦-秦九韶公式 - 《Python编程基础及应用》第2版，习题3-8</h4><details class="folding-tag" ><summary> 2-6 </summary>              <div class='content'>              <blockquote><p>作者 海洋饼干叔叔</p><p>单位 重庆大学</p></blockquote><p><strong>（海伦-秦九韶公式）</strong>编写程序，输入三角形的三条边边长，并使用海伦-秦九韶公式求三角形的面积，其中面积计算应通过自定义函数来实现。如果输入的三条边长不能构成合法的三角形，打印错误提示信息。</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="comment">#在此处实现area函数</span></span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line">a = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">b = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">c = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span>(a+b&gt;c <span class="keyword">and</span> a+c&gt;b <span class="keyword">and</span> b+c&gt;a <span class="keyword">and</span> a &gt; <span class="number">0</span> <span class="keyword">and</span> b &gt; <span class="number">0</span> <span class="keyword">and</span> c &gt; <span class="number">0</span>):</span><br><span class="line">    ans=area(a,b,c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ans:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据错误&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6.00</span><br></pre></td></tr></table></figure><p>相关公式定义如下图<br><img src="https://images.ptausercontent.com/3a46a04f-de7e-4fe1-857c-32a5c63c4b86.png" alt="image.png">代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    p=<span class="number">1</span>/<span class="number">2</span>*(a+b+c)</span><br><span class="line">    s=sqrt(p*(p-a)*(p-b)*(p-c))</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    p=<span class="number">1</span>/<span class="number">2</span>*(a+b+c)</span><br><span class="line">    s=sqrt(p*(p-a)*(p-b)*(p-c))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line">a = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">b = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">c = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span>(a+b&gt;c <span class="keyword">and</span> a+c&gt;b <span class="keyword">and</span> b+c&gt;a <span class="keyword">and</span> a &gt; <span class="number">0</span> <span class="keyword">and</span> b &gt; <span class="number">0</span> <span class="keyword">and</span> c &gt; <span class="number">0</span>):</span><br><span class="line">    ans=area(a,b,c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ans:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据错误&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="7、最短跑道长度-《Python编程基础及应用》第2版，习题3-9"><a href="#7、最短跑道长度-《Python编程基础及应用》第2版，习题3-9" class="headerlink" title="7、最短跑道长度 - 《Python编程基础及应用》第2版，习题3-9"></a>7、<strong>最短跑道长度 - 《Python编程基础及应用》第2版，习题3-9</strong></h4><details class="folding-tag" ><summary> 2-7 </summary>              <div class='content'>              <blockquote><p>作者 海洋饼干叔叔</p><p>单位 重庆大学</p></blockquote><p><strong>（最短跑道长度）</strong>假设某飞机的加速度是a，起飞速度是v，其该飞机起飞所需的最短跑道长度L = v²/(2a)。编写程序，提示用户输入起飞速度v（m/s）和加速度a（m/s²），计算并打印飞机起飞的最短跑道长度，计算过程应封装成一个函数。</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">v,a</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#length函数定义于此处</span></span><br><span class="line">v=<span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">a=<span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最短跑道长度为:<span class="subst">&#123;length(v,a):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">最短跑道长度为:1000.00</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>作为函数题，请只提交函数定义部分，不要提交整个程序。 后台会将函数部分与测试代码合并后进行验证。代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">v,a</span>):</span><br><span class="line">    <span class="keyword">return</span> v*v/(<span class="number">2</span>*a)</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">v,a</span>):</span><br><span class="line">    <span class="keyword">return</span> v*v/(<span class="number">2</span>*a)</span><br><span class="line">v=<span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">a=<span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最短跑道长度为:<span class="subst">&#123;length(v,a):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="8、调和平均-《Python编程基础及应用》第2版，习题7-2"><a href="#8、调和平均-《Python编程基础及应用》第2版，习题7-2" class="headerlink" title="8、调和平均 - 《Python编程基础及应用》第2版，习题7-2"></a>8、调和平均 - 《Python编程基础及应用》第2版，习题7-2</h4><details class="folding-tag" ><summary> 2-8 </summary>              <div class='content'>              <blockquote><p>作者 海洋饼干叔叔</p><p>单位 重庆大学</p></blockquote><p><strong>（调和平均）</strong>函数hmean(x,y)用于计算x和y的调和平均数。当x+y不等于0时，调和平均数z = 2xy/(x+y)；当x+y等于0时，调和平均数z无法计算。为了兼容两种不同的状态，函数总是返回一个元组(r,z)，其中r为布尔型，表示调和平均数是否被成功计算，z为计算结果。当r为假时，z值规定为-1。请实现该函数并编写恰当的代码来测试它。</p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">define hmean(x,y):</span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在此处定义hmean函数</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">b = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">r,v = hmean(a,b)</span><br><span class="line"><span class="keyword">if</span> r:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;调和平均:<span class="subst">&#123;v:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无法计算&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调和平均:2.40</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>只提交函数定义部分代码！</p><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hmean</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">if</span> x+y==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">False</span>,-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">True</span>,<span class="number">2</span>*x*y/(x+y))</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hmean</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">if</span> x+y==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">False</span>,-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">True</span>,<span class="number">2</span>*x*y/(x+y))</span><br><span class="line">a = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">b = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">r,v = hmean(a,b)</span><br><span class="line"><span class="keyword">if</span> r:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;调和平均:<span class="subst">&#123;v:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无法计算&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="9、符号函数-《Python编程基础及应用》第2版，习题7-4"><a href="#9、符号函数-《Python编程基础及应用》第2版，习题7-4" class="headerlink" title="9、符号函数 - 《Python编程基础及应用》第2版，习题7-4"></a>9、符号函数 - 《Python编程基础及应用》第2版，习题7-4</h4><details class="folding-tag" ><summary> 2-9 </summary>              <div class='content'>              <blockquote><p>作者 海洋饼干叔叔</p><p>单位 重庆大学</p></blockquote><p><strong>（符号函数）</strong>定义函数sign(x)，并编写合适的代码对其进行测试。</p><p><img src="https://images.ptausercontent.com/695e0ccd-48ed-491f-ae6b-65f17e082c05.png" alt="image.png"></p><p><strong>函数接口定义：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">x</span>)</span><br></pre></td></tr></table></figure><p><strong>裁判测试程序样例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在这里定义sign函数</span></span><br><span class="line"></span><br><span class="line">v = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(sign(v))</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-9.78</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>仅提交函数定义部分代码！</p><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">v = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(sign(v))</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h3 id="（三）编程题-1"><a href="#（三）编程题-1" class="headerlink" title="（三）编程题"></a>（三）编程题</h3><details class="folding-tag" ><summary> 编程题 </summary>              <div class='content'>              <h4 id="1、lambda表达式的使用"><a href="#1、lambda表达式的使用" class="headerlink" title="1、lambda表达式的使用"></a>1、lambda表达式的使用</h4><details class="folding-tag" ><summary> 3-1 </summary>              <div class='content'>              <blockquote><p>作者 聂作先</p><p>单位 福建理工大学</p></blockquote><p> 输入若干学生数据，包括姓名，以及ds,db,c 三门课程的成绩，存放到序列中，然后按总成绩由高到低输出所有学生的信息，使用内置函数sorted及lambda表达式实现。</p><p><strong>输入格式:</strong></p><p>先输入学生数量n，再输入n行学生数据，每行一个学生的信息，包括：姓名，以及ds,db,c 三门课程的成绩。</p><p><strong>输出格式:</strong></p><p>按总成绩由高到低排序后的学生信息。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">张三 70 75 80</span><br><span class="line">李四 80 80 85</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">李四 80 80 85</span><br><span class="line">张三 70 75 80</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">score=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s=<span class="built_in">input</span>().split()</span><br><span class="line">    name=s[<span class="number">0</span>]</span><br><span class="line">    ds,db,c=<span class="built_in">map</span>(<span class="built_in">int</span>,s[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line">    score.append((name,ds,db,c))</span><br><span class="line">stu=<span class="built_in">sorted</span>(score,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]+x[<span class="number">2</span>]+x[<span class="number">3</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stu:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,i)))</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><hr><h2 id="五、第5章-字典和集合"><a href="#五、第5章-字典和集合" class="headerlink" title="五、第5章 字典和集合"></a><span id="jump15">五、第5章 字典和集合</span></h2><details class="folding-tag" ><summary> 第5章 </summary>              <div class='content'>              <h3 id="（一）编程题"><a href="#（一）编程题" class="headerlink" title="（一）编程题"></a>（一）编程题</h3><details class="folding-tag" ><summary> 编程题 </summary>              <div class='content'>              <h4 id="1、查询国家面积和人数"><a href="#1、查询国家面积和人数" class="headerlink" title="1、查询国家面积和人数"></a>1、查询国家面积和人数</h4><details class="folding-tag" ><summary> 1-1 </summary>              <div class='content'>              <blockquote><p>作者 巨同升</p><p>单位 山东理工大学</p></blockquote><p>编写程序实现：首先从键盘输入若干个国家名称、国土面积（平方千米）、人口数量（万人）的对应关系，以空行作结束标记。然后输入一个国名和整数，若整数为1，则输出对应的国土面积；若整数为2，则输出对应的人口数量；若找不到该国名或者整数不是1或2，则输出“没有相应的信息”。</p><p>提示：字典键值对中的值可以是列表或元组。</p><p><strong>输入格式:</strong></p><p>前面每行输入一个国名及其面积和人口，以分号分隔。</p><p>最后输入国名和整数，以分号分隔。</p><p><strong>输出格式:</strong></p><p>在一行中输出结果。</p><p><strong>输入样例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">China;9600000;142567</span><br><span class="line">India;2980000;142862</span><br><span class="line">United States;9370000;33999</span><br><span class="line">Indonesia;1900000;27753</span><br><span class="line">Brazil;8540000;21642</span><br><span class="line">Russia;17090000;14444</span><br><span class="line">Japan;377973;12329</span><br><span class="line">Australia;7690000;2644</span><br><span class="line">Canada;9980000;3878</span><br><span class="line"></span><br><span class="line">Australia;1</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">该国面积为7690000平方千米</span><br></pre></td></tr></table></figure><p><strong>输入样例2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">China;9600000;142567</span><br><span class="line">India;2980000;142862</span><br><span class="line">United States;9370000;33999</span><br><span class="line">Indonesia;1900000;27753</span><br><span class="line">Brazil;8540000;21642</span><br><span class="line">Russia;17090000;14444</span><br><span class="line">Japan;377973;12329</span><br><span class="line">Australia;7690000;2644</span><br><span class="line">Canada;9980000;3878</span><br><span class="line"></span><br><span class="line">Brazil;2</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">该国人口为21642万人</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=<span class="built_in">input</span>()</span><br><span class="line">info=&#123;&#125;</span><br><span class="line"><span class="keyword">while</span> l!=<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    arr=l.split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">    info[arr[<span class="number">0</span>]]=[arr[<span class="number">1</span>],arr[<span class="number">2</span>]]</span><br><span class="line">    l=<span class="built_in">input</span>()</span><br><span class="line">s=<span class="built_in">input</span>().split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(s[<span class="number">1</span>])==<span class="number">1</span>:</span><br><span class="line">    area=info.get(s[<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> area!=<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;该国面积为<span class="subst">&#123;info[s[<span class="number">0</span>]][<span class="number">0</span>]&#125;</span>平方千米&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有相应的信息&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(s[<span class="number">1</span>])==<span class="number">2</span>:</span><br><span class="line">    people=info.get(s[<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> people!=<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;该国人口为<span class="subst">&#123;info[s[<span class="number">0</span>]][<span class="number">1</span>]&#125;</span>万人&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有相应的信息&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没有相应的信息&#x27;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、根据输入创建字典"><a href="#2、根据输入创建字典" class="headerlink" title="2、根据输入创建字典"></a>2、根据输入创建字典</h4><details class="folding-tag" ><summary> 1-2 </summary>              <div class='content'>              <blockquote><p>作者 巨同升</p><p>单位 山东理工大学</p></blockquote><p>编写程序实现：从键盘输入若干个国名与首都的偶对，以空行作结束标记。要求将上述信息存入一个字典中，最后输出该字典的内容。</p><p><strong>输入格式:</strong></p><p>每行输入一对国名与首都，以分号分隔；最后输入一个空行。</p><p><strong>输出格式:</strong></p><p>以字典的形式输出结果。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">中国;北京</span><br><span class="line">日本;东京</span><br><span class="line">美国;华盛顿</span><br><span class="line">英国;伦敦</span><br><span class="line">德国;柏林</span><br><span class="line">法国;巴黎</span><br><span class="line">俄罗斯;莫斯科</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;中国&#x27;: &#x27;北京&#x27;, &#x27;日本&#x27;: &#x27;东京&#x27;, &#x27;美国&#x27;: &#x27;华盛顿&#x27;, &#x27;英国&#x27;: &#x27;伦敦&#x27;, &#x27;德国&#x27;: &#x27;柏林&#x27;, &#x27;法国&#x27;: &#x27;巴黎&#x27;, &#x27;俄罗斯&#x27;: &#x27;莫斯科&#x27;&#125;</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ne=&#123;&#125;</span><br><span class="line">l=<span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">while</span> l!=<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    gj=l.split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    sd=l.split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    ne[gj]=sd</span><br><span class="line">    l=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(ne)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="3、输入数字1-7输出对应的星期几"><a href="#3、输入数字1-7输出对应的星期几" class="headerlink" title="3、输入数字1-7输出对应的星期几"></a>3、输入数字1-7输出对应的星期几</h4><details class="folding-tag" ><summary> 1-3 </summary>              <div class='content'>              <blockquote><p>作者 吴呈瑜</p><p>单位 浙江理工大学</p></blockquote><p>输入一个表示星期几的数字（1—7），输出对应的“星期一、星期二、星期三、星期四、星期五、星期六、星期日”的中文字符串。</p><p><strong>输入格式:</strong></p><p>1</p><p><strong>输出格式:</strong></p><p>星期一</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">星期日</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;星期一&#x27;</span>,<span class="string">&#x27;星期二&#x27;</span>,<span class="string">&#x27;星期三&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;星期六&#x27;</span>,<span class="string">&#x27;星期日&#x27;</span>]</span><br><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(arr[x])</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="4、统计最多的单词个数"><a href="#4、统计最多的单词个数" class="headerlink" title="4、统计最多的单词个数"></a>4、统计最多的单词个数</h4><details class="folding-tag" ><summary> 1-4 </summary>              <div class='content'>              <blockquote><p>作者 沈炜</p><p>单位 浙江理工大学</p></blockquote><p>输入一串文本，统计出现最多的单词个数。</p><p><strong>输入格式:</strong></p><p>一行文本</p><p><strong>输出格式:</strong></p><p>一个整数，是最大的单词出现个数</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is a test, which is a easy problem.</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp=<span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line"><span class="built_in">max</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp :</span><br><span class="line">    cnt=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> tmp :</span><br><span class="line">        <span class="keyword">if</span> i==j :</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">max</span>&lt;cnt :</span><br><span class="line">            <span class="built_in">max</span>=cnt</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="5、非重复数字"><a href="#5、非重复数字" class="headerlink" title="5、非重复数字"></a>5、非重复数字</h4><details class="folding-tag" ><summary> 1-5 </summary>              <div class='content'>              <blockquote><p>作者 mjye</p><p>单位 北京师范大学珠海校区</p></blockquote><p>给定 <em>n</em> 个整数，输出第一个没有重复的数字。</p><p><strong>输入格式:</strong></p><p>第一行一个整数 <em>n</em>(1≤<em>n</em>≤105)，接下来一行输入 <em>n</em> 个整数 <em>a**i</em>(−109≤<em>a**i</em>≤109)，每个整数用一个空格分隔。</p><p><strong>输出格式:</strong></p><p>输出一个整数，表示第一个没有重复的数字，如果没有输出 −1。</p><p><strong>输入样例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">-1 2 -1 3 0</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>输入样例2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">-1 2 -1 2 3 3</span><br></pre></td></tr></table></figure><p><strong>输出样例2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s=<span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">numd=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    numd[i]=numd.get(i,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">flag=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> numd.items():</span><br><span class="line">    <span class="keyword">if</span> j==<span class="number">1</span>:</span><br><span class="line">        flag=<span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="6、点咖啡，买单"><a href="#6、点咖啡，买单" class="headerlink" title="6、点咖啡，买单"></a>6、点咖啡，买单</h4><details class="folding-tag" ><summary> 1-6 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>下面的字典中存放着咖啡的价格：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coffee=&#123;&#x27;意式&#x27;:10,&#x27;美式&#x27;:12,&#x27;拿铁&#x27;:15,&#x27;摩卡&#x27;:16&#125;</span><br></pre></td></tr></table></figure><p>输入订单的咖啡种类喝数量，输出订单和价格。</p><p><strong>输入格式:</strong></p><p>在第一行中输入一个整数<code>n</code>，表示订单中有几种咖啡。接下来的<code>n</code>行，每一行输入一种咖啡及其杯数，空格分隔。</p><p><strong>输出格式:</strong></p><p>输出所点咖啡和订单的价格。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">拿铁 3</span><br><span class="line">摩卡 5</span><br><span class="line">美式 1</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3杯拿铁咖啡</span><br><span class="line">5杯摩卡咖啡</span><br><span class="line">1杯美式咖啡</span><br><span class="line">合计137元</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">coffee=&#123;<span class="string">&#x27;意式&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;美式&#x27;</span>:<span class="number">12</span>,<span class="string">&#x27;拿铁&#x27;</span>:<span class="number">15</span>,<span class="string">&#x27;摩卡&#x27;</span>:<span class="number">16</span>&#125;</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">money=<span class="number">0</span></span><br><span class="line">tolmoney=<span class="number">0</span></span><br><span class="line">li1=[]</span><br><span class="line">li2=[]</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line">    cof=<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    count=<span class="built_in">int</span>(<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    money=coffee[cof]</span><br><span class="line">    tolmoney=<span class="built_in">int</span>(money)*count+tolmoney</span><br><span class="line">    li1.append(cof)</span><br><span class="line">    li2.append(count)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;li2[i]&#125;</span>杯<span class="subst">&#123;li1[i]&#125;</span>咖啡&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;合计<span class="subst">&#123;tolmoney&#125;</span>元&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="7、众数-《Python编程基础及应用》第2版，习题6-1"><a href="#7、众数-《Python编程基础及应用》第2版，习题6-1" class="headerlink" title="7、众数 - 《Python编程基础及应用》第2版，习题6-1"></a>7、众数 - 《Python编程基础及应用》第2版，习题6-1</h4><details class="folding-tag" ><summary> 1-7 </summary>              <div class='content'>              <blockquote><p>作者 海洋饼干叔叔</p><p>单位 重庆大学</p></blockquote><p><strong>（众数）</strong>从键盘读入数量不确定的正整数，然后从中找出出现次数最多的数。操作者输入-1表示结束输入。后台测试数据将确保至少输入一个正整数，则出现次数最多的数是唯一的。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">33</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">众数:3</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numd=&#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">if</span> i==-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    numd[i]=numd.get(i,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">maxv=<span class="number">0</span></span><br><span class="line">maxk=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> numd.items():</span><br><span class="line">    <span class="keyword">if</span> maxv&lt;=j:</span><br><span class="line">        maxv=j</span><br><span class="line">        maxk=i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;众数:<span class="subst">&#123;maxk&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="8、列表去重重复人名"><a href="#8、列表去重重复人名" class="headerlink" title="8、列表去重重复人名"></a>8、列表去重重复人名</h4><details class="folding-tag" ><summary> 1-8 </summary>              <div class='content'>              <blockquote><p>作者 刘琦</p><p>单位 天津城建大学</p></blockquote><p>输入一系列以逗号分隔的英文人名，其中包含重复的名字，请将其中重复的名字去掉，输出包含不重复人名的列表，名字出现顺序与输入顺序相同。</p><p><strong>输入格式:</strong></p><p>一系列英文人名，以逗号间隔。</p><p><strong>输出格式:</strong></p><p>包含不重复人名的列表，名字出现顺序与输入顺序相同。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Calvin,bob,ada,McCord,Smith,Babbs,Calvin,Smith</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;Calvin&#x27;, &#x27;bob&#x27;, &#x27;ada&#x27;, &#x27;McCord&#x27;, &#x27;Smith&#x27;, &#x27;Babbs&#x27;]</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nameList=[]</span><br><span class="line">nameSet=<span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line">nameList=<span class="built_in">str</span>.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nameList:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> nameSet:</span><br><span class="line">        <span class="keyword">del</span> nameList[j]</span><br><span class="line">    nameSet.add(i)</span><br><span class="line">    j+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> nameList[j-<span class="number">1</span>] <span class="keyword">in</span> nameSet:</span><br><span class="line">        <span class="keyword">del</span> nameList[j-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(nameList)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="9、zust-sy8-2能被3-5和7整除的数的个数"><a href="#9、zust-sy8-2能被3-5和7整除的数的个数" class="headerlink" title="9、zust-sy8-2能被3,5和7整除的数的个数"></a>9、zust-sy8-2能被3,5和7整除的数的个数</h4><details class="folding-tag" ><summary> 1-9 </summary>              <div class='content'>              <blockquote><p>作者 张银南</p><p>单位 浙江科技大学</p></blockquote><p>求指定区间内能被3,5和7整除的数的个数（用集合实现）。</p><p><strong>输入格式</strong>:</p><p>输入2个正整数a,b（1&lt;=a&lt;b&lt;=10000000），用空格分隔。</p><p><strong>输出格式</strong>:</p><p>输出大于等于a且小于等于b的能被3,5和7整除的数的个数。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1000 100000</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">943</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">totalSet=<span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a,b+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">3</span>==<span class="number">0</span> <span class="keyword">and</span> i%<span class="number">5</span>==<span class="number">0</span> <span class="keyword">and</span> i%<span class="number">7</span>==<span class="number">0</span>:</span><br><span class="line">        totalSet.add(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(totalSet))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="10、找出相同的和不同的班级"><a href="#10、找出相同的和不同的班级" class="headerlink" title="10、找出相同的和不同的班级"></a>10、找出相同的和不同的班级</h4><details class="folding-tag" ><summary> 1-10 </summary>              <div class='content'>              <blockquote><p>作者 巨同升</p><p>单位 山东理工大学</p></blockquote><p>从键盘输入两行以分号或逗号分隔的班级名称，然后找出同时出现于两行中的班级名称以及只出现于第一行中的班级名称，最后按升序输出找到的班级名称。</p><p><strong>输入格式:</strong></p><p>在第1行输入一组班级名称，之间以分号分隔。</p><p>在第2行输入另一组班级名称，之间以逗号分隔。</p><p><strong>输出格式:</strong></p><p>在两行中分别按升序输出符合条件的班级名称。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">金科2301;金融2301;金融2302;金融2303;金融本2304;经济2301;国贸2301;国贸2302;国贸2303;经济2302;经济2303</span><br><span class="line">会计2301,会计2302,会计2303,会计2304,智能会计2301(实验),经济2301,经济2302,经济2303,金科2301, 信管2301,信管本2302,数管2301,数管2302</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">经济2301,经济2302,经济2303,金科2301</span><br><span class="line">国贸2301,国贸2302,国贸2303,金融2301,金融2302,金融2303,金融本2304</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class1List=<span class="built_in">input</span>().split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">class2List=<span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">class1Set=<span class="built_in">set</span>(class1List)</span><br><span class="line">class2Set=<span class="built_in">set</span>(class2List)</span><br><span class="line"></span><br><span class="line">list1=<span class="built_in">sorted</span>(<span class="built_in">list</span>(class1Set&amp;class2Set))</span><br><span class="line">list2=<span class="built_in">sorted</span>(<span class="built_in">list</span>(class1Set-class2Set))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">    <span class="built_in">print</span>(list1[i],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="built_in">len</span>(list1)-<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list2)):</span><br><span class="line">    <span class="built_in">print</span>(list2[i],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="built_in">len</span>(list2)-<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="11、统计省份数量"><a href="#11、统计省份数量" class="headerlink" title="11、统计省份数量"></a>11、统计省份数量</h4><details class="folding-tag" ><summary> 1-11 </summary>              <div class='content'>              <blockquote><p>作者 巨同升</p><p>单位 山东理工大学</p></blockquote><p>编写程序实现：从键盘输入一批学生所属的省份名称，统计他们总共来自于几个不同的省份。</p><p><strong>输入格式:</strong></p><p>每行输入一个省份名称，以空行作为输入结束标志。</p><p><strong>输出格式:</strong></p><p>在一行中输出结果。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">山东</span><br><span class="line">北京</span><br><span class="line">上海</span><br><span class="line">新疆</span><br><span class="line">山东</span><br><span class="line">江苏</span><br><span class="line">上海</span><br><span class="line">新疆</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">来自于5个省份。</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_set=<span class="built_in">set</span>()</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    <span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> num_set:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    num_set.add(<span class="built_in">str</span>)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>.strip() == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;来自于<span class="subst">&#123;count-<span class="number">1</span>&#125;</span>个省份。&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="12、统计相同的与不同的省份"><a href="#12、统计相同的与不同的省份" class="headerlink" title="12、统计相同的与不同的省份"></a>12、统计相同的与不同的省份</h4><details class="folding-tag" ><summary> 1-12 </summary>              <div class='content'>              <blockquote><p>作者 巨同升</p><p>单位 山东理工大学</p></blockquote><p>编写程序实现：从键盘输入两批学生所属的省份名称，统计出两批中相同的省份与不同的省份分别有哪些，要求按升序输出省份名称。</p><p><strong>输入格式</strong>:</p><p>每行输入一批以空格分隔的省份名称，共两行。</p><p><strong>输出格式</strong>:</p><p>分两行输出结果。</p><p><strong>输入样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">山东 北京 上海 新疆 山东 江苏 上海 新疆</span><br><span class="line">山东 山西 江苏 山西 上海 山东</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">相同的省份：上海 山东 江苏</span><br><span class="line">不同的省份：北京 山西 新疆</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stu1=<span class="built_in">input</span>().split()</span><br><span class="line">stu2=<span class="built_in">input</span>().split()</span><br><span class="line">stu1_set=<span class="built_in">set</span>(stu1)</span><br><span class="line">stu2_set=<span class="built_in">set</span>(stu2)</span><br><span class="line"></span><br><span class="line">same=<span class="built_in">sorted</span>(stu1_set&amp;stu2_set)</span><br><span class="line">diff=<span class="built_in">sorted</span>(stu1_set^stu2_set)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;相同的省份：&quot;</span>+<span class="string">&#x27; &#x27;</span>.join(same))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;不同的省份：&quot;</span>+<span class="string">&#x27; &#x27;</span>.join(diff))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="13、-zust-sl8-1去掉重复数字"><a href="#13、-zust-sl8-1去掉重复数字" class="headerlink" title="13、 zust-sl8-1去掉重复数字"></a>13、 zust-sl8-1去掉重复数字</h4><details class="folding-tag" ><summary> 1-13 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>呼入一个整数列表，去掉列表中的重复数字，输出升序排列后的列表。</p><p><strong>输入格式:</strong></p><p>输入一个列表。</p><p><strong>输出格式:</strong></p><p>输出结果列表。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[4, 2, 1, 2, 8, 4, 5, 3, 8]</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 8]</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">num=<span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    num.add(i)</span><br><span class="line">li2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">    li2.append(i)</span><br><span class="line">li2.sort()</span><br><span class="line"><span class="built_in">print</span>(li2)</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><hr><h2 id="四、第4章-列表与元组"><a href="#四、第4章-列表与元组" class="headerlink" title="四、第4章 列表与元组"></a><span id="jump14">四、第4章 列表与元组</span></h2><details class="folding-tag" ><summary> 第4章 </summary>              <div class='content'>              <h3 id="（一）编程题"><a href="#（一）编程题" class="headerlink" title="（一）编程题"></a>（一）编程题</h3><details class="folding-tag" ><summary> 编程题 </summary>              <div class='content'>              <h4 id="1、保研资格"><a href="#1、保研资格" class="headerlink" title="1、保研资格"></a>1、保研资格</h4><details class="folding-tag" ><summary> 1-1 </summary>              <div class='content'>              <blockquote><p>作者 mjye</p><p>单位 北京师范大学珠海校区</p></blockquote><p>教育部学信网于2018年09月05日公布了《2019年具有推荐优秀应届本科毕业生免试攻读硕士研究生资格院校名单》中北京师范大学具有研究生保送资格。在保研类别中，主要有基于学习成绩的免试直推、特长生免试直推、校际间免试直推和免试推荐而保留入学资格等。但不管哪种类型，通过如果学生有挂科记录，则失去了保研资格。</p><p>现在给定一个班四门课程的学生成绩，请你统计具有保研资格的学生人数。</p><p><strong>输入格式:</strong></p><p>第一个行一个整数 <em>n</em>(1≤<em>n</em>≤100)，表示有 <em>n</em> 个学生；<br>接下来 <em>n</em> 行，每一行四个整数，表示四门课程的成绩。</p><p><strong>输出格式:</strong></p><p>输出一个整数，表示具有保研资格的学生人数。</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">100 100 100 100</span><br><span class="line">80 90 100 100</span><br><span class="line">60 60 60 60</span><br><span class="line">100 100 100 59</span><br><span class="line">59 59 59 59 59</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">count=m</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    n=<span class="built_in">input</span>()</span><br><span class="line">    <span class="built_in">list</span>=[]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="built_in">list</span>.append(n.split(<span class="string">&#x27; &#x27;</span>)[j])</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(k) &lt; <span class="number">60</span>:</span><br><span class="line">            count-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、核心价值观"><a href="#2、核心价值观" class="headerlink" title="2、核心价值观"></a>2、核心价值观</h4><details class="folding-tag" ><summary> 1-2 </summary>              <div class='content'>              <blockquote><p>作者 田洪云</p><p>单位 临沂大学</p></blockquote><p>社会主义核心价值观24个字分成3个层面：</p><p>国家层面的价值目标：</p><p>富强、民主、文明、和谐</p><p>社会层面的价值取向：</p><p>自由、平等、公正、法治</p><p>公民个人层面的价值准则：</p><p>爱国、敬业、诚信、友善</p><p>请用列表存储24字社会主义核心价值观，并按照三个层面进行输出。</p><p><strong>输入格式:</strong></p><p>无输入</p><p><strong>输出格式:</strong></p><p>按照三个层面输出</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     国家层面     </span><br><span class="line">富强、民主、文明、和谐</span><br><span class="line">     社会层面     </span><br><span class="line">自由、平等、公正、法治</span><br><span class="line">     个人层面     </span><br><span class="line">爱国、敬业、诚信、友善</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;国家层面&#x27;</span>,<span class="string">&#x27;社会层面&#x27;</span>,<span class="string">&#x27;个人层面&#x27;</span>]</span><br><span class="line">list2=[<span class="string">&quot;富强&quot;</span>,<span class="string">&quot;民主&quot;</span>,<span class="string">&quot;文明&quot;</span>,<span class="string">&quot;和谐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;自由&quot;</span>,<span class="string">&quot;平等&quot;</span>,<span class="string">&#x27;公正&#x27;</span>,<span class="string">&#x27;法治&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;爱国&quot;</span>,<span class="string">&#x27;敬业&#x27;</span>,<span class="string">&#x27;诚信&#x27;</span>,<span class="string">&#x27;友善&#x27;</span>]</span><br><span class="line">x=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;     &quot;</span>+i+<span class="string">&quot;     &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="built_in">print</span>(list2[x],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> j &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;、&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        x+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="3、列表元素编号"><a href="#3、列表元素编号" class="headerlink" title="3、列表元素编号"></a>3、列表元素编号</h4><details class="folding-tag" ><summary> 1-3 </summary>              <div class='content'>              <blockquote><p>作者 冰冰</p><p>单位 广东东软学院</p></blockquote><p>要求输入一个列表，输出结果中为每个列表元素编号，要求每行显示一个元素。</p><p><strong>输入样例1:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;alice&#x27;, &#x27;david&#x27;, &#x27;carolina&#x27;]</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.alice</span><br><span class="line">2.david</span><br><span class="line">3.carolina</span><br></pre></td></tr></table></figure><p><strong>输入样例2:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;张三&#x27;, &#x27;李四&#x27;]</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.张三</span><br><span class="line">2.李四</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>=[]</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line">x=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>[i]!=<span class="string">&#x27;[&#x27;</span> <span class="keyword">and</span> <span class="built_in">str</span>[i]!=<span class="string">&quot;&#x27;&quot;</span> <span class="keyword">and</span> <span class="built_in">str</span>[i]!=<span class="string">&quot; &quot;</span> <span class="keyword">and</span> <span class="built_in">str</span>[i]!=<span class="string">&quot;]&quot;</span> <span class="keyword">and</span> <span class="built_in">str</span>[i]!=<span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>[i]!=<span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">            x=x+<span class="string">&#x27;&#x27;</span>+<span class="built_in">str</span>[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">list</span>.append(x)</span><br><span class="line">            x=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>[i]==<span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">        <span class="built_in">list</span>.append(x)</span><br><span class="line">k=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>.<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    k+=<span class="number">1</span></span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="4、小动物造句"><a href="#4、小动物造句" class="headerlink" title="4、小动物造句"></a>4、小动物造句</h4><details class="folding-tag" ><summary> 1-4 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>已知有三个列表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">who=[&#x27;小羊羔&#x27;,&#x27;小猪仔&#x27;,&#x27;小兔子&#x27;,&#x27;小马驹&#x27;]</span><br><span class="line">where=[&#x27;草地上&#x27;,&#x27;游乐园里&#x27;,&#x27;操场上&#x27;,&#x27;教室里&#x27;]</span><br><span class="line">what=[&#x27;学习&#x27;,&#x27;看书&#x27;,&#x27;听歌&#x27;,&#x27;睡觉&#x27;]</span><br></pre></td></tr></table></figure><p>每个列表有4个元素，试编写程序，输入三个0~3范围内的整数（输入时用空格分隔），将其作为索引分别访问三个列表中的对应元素，然后进行造句。例如，输入的三个整数分别为<code>1 0 3</code>，则输出句子<code>小猪仔在草地上睡觉</code>。</p><p><strong>输入格式:</strong></p><p>在一行中输入三个整数，空格分隔。整数的范围必须在0~3之间。</p><p><strong>输出格式:</strong></p><p>输出相应的句子。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 3 0</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小兔子在教室里学习</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">who=[<span class="string">&#x27;小羊羔&#x27;</span>,<span class="string">&#x27;小猪仔&#x27;</span>,<span class="string">&#x27;小兔子&#x27;</span>,<span class="string">&#x27;小马驹&#x27;</span>]</span><br><span class="line">where=[<span class="string">&#x27;草地上&#x27;</span>,<span class="string">&#x27;游乐园里&#x27;</span>,<span class="string">&#x27;操场上&#x27;</span>,<span class="string">&#x27;教室里&#x27;</span>]</span><br><span class="line">what=[<span class="string">&#x27;学习&#x27;</span>,<span class="string">&#x27;看书&#x27;</span>,<span class="string">&#x27;听歌&#x27;</span>,<span class="string">&#x27;睡觉&#x27;</span>]</span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">list</span>=&#123;&#125;</span><br><span class="line"><span class="built_in">list</span>=<span class="built_in">str</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(who[<span class="built_in">int</span>(<span class="built_in">list</span>[<span class="number">0</span>])]+<span class="string">&quot;在&quot;</span>+where[<span class="built_in">int</span>(<span class="built_in">list</span>[<span class="number">1</span>])]+what[<span class="built_in">int</span>(<span class="built_in">list</span>[<span class="number">2</span>])])</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="5、判断完数"><a href="#5、判断完数" class="headerlink" title="5、判断完数"></a>5、判断完数</h4><details class="folding-tag" ><summary> 1-5 </summary>              <div class='content'>              <blockquote><p>作者 成坤</p><p>单位 金华职业技术大学</p></blockquote><p>判断一个正整数是否为完数。完数定义：一个数的所有因子（包括1）之和等于它自身，这个数就是完数。比如6=1+2+3，6是完数</p><p><strong>输入格式:</strong></p><p>例如：输入一个正整数 6</p><p><strong>输出格式:</strong></p><p>如果输入的正整数是一个完数，则例如：6=1+2+3</p><p>如果输入的正整数不是一个完数例如10，则输出“10不是一个完数。”</p><p><strong>输入样例1:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6=1+2+3</span><br></pre></td></tr></table></figure><p><strong>输入样例2:</strong> </p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>输出样例2:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10不是一个完数。</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="built_in">list</span>=[]</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> x==<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1=1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">int</span>(x/<span class="number">2</span>)+<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> x%i==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">sum</span>+=i</span><br><span class="line">            <span class="built_in">list</span>.append(i)</span><br><span class="line">    <span class="keyword">if</span> x==<span class="built_in">sum</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>=<span class="subst">&#123;<span class="built_in">list</span>[<span class="number">0</span>]&#125;</span>&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">            <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;+<span class="subst">&#123;i&#125;</span>&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>不是一个完数。&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="6、输入数字1-7输出对应的星期几"><a href="#6、输入数字1-7输出对应的星期几" class="headerlink" title="6、输入数字1-7输出对应的星期几"></a>6、输入数字1-7输出对应的星期几</h4><details class="folding-tag" ><summary> 1-6 </summary>              <div class='content'>              <blockquote><p>作者 吴呈瑜</p><p>单位 浙江理工大学</p></blockquote><p>输入一个表示星期几的数字（1—7），输出对应的“星期一、星期二、星期三、星期四、星期五、星期六、星期日”的中文字符串。</p><p><strong>输入格式:</strong></p><p>1</p><p><strong>输出格式:</strong></p><p>星期一</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">星期日</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=[<span class="string">&quot;星期一&quot;</span>,<span class="string">&quot;星期二&quot;</span>,<span class="string">&quot;星期三&quot;</span>,<span class="string">&quot;星期四&quot;</span>,<span class="string">&quot;星期五&quot;</span>,<span class="string">&quot;星期六&quot;</span>,<span class="string">&quot;星期日&quot;</span>]</span><br><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(data[x-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="7、输出中等成绩及序号"><a href="#7、输出中等成绩及序号" class="headerlink" title="7、输出中等成绩及序号"></a>7、输出中等成绩及序号</h4><details class="folding-tag" ><summary> 1-7 </summary>              <div class='content'>              <blockquote><p>作者 python备课组</p><p>单位 福州大学至诚学院</p></blockquote><p>编写程序实现：输入一个小组若干个学生成绩，统计这个小组位于[70,79]区间的所有成绩及序号。</p><p><strong>输入格式及样例1:</strong></p><p>在同一行若干个数，以英文逗号,分隔，其中有[70,79]的成绩。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80,50,60,70,80,75,94</span><br></pre></td></tr></table></figure><p><strong>输出格式及样例1:</strong></p><p>每行输出一个学生的序号和成绩，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第4个学生的成绩是70</span><br><span class="line">第6个学生的成绩是75</span><br></pre></td></tr></table></figure><p><strong>输入格式及样例2:</strong></p><p>在同一行若干个数，以英文逗号,分隔，其中没有[70,79]的成绩。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">55,80,94,53</span><br></pre></td></tr></table></figure><p><strong>输出格式及样例2:</strong></p><p>输出“没有这个区间的成绩”，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">没有这个区间的成绩</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>=[]</span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">list</span>=<span class="built_in">str</span>.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(i) &gt;= <span class="number">70</span> <span class="keyword">and</span> <span class="built_in">int</span>(i) &lt;= <span class="number">79</span>:</span><br><span class="line">        flag=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>个学生的成绩是<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> flag==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有这个区间的成绩&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="8、根据学号输出信息"><a href="#8、根据学号输出信息" class="headerlink" title="8、根据学号输出信息"></a>8、根据学号输出信息</h4><details class="folding-tag" ><summary> 1-8 </summary>              <div class='content'>              <blockquote><p>作者 殷伟凤</p><p>单位 浙江传媒学院</p></blockquote><p>学号中包含了一个学生的相关信息，现有一学校的学号由8位数字组成，前两位表示学生入学年份，第3位和第4位表示学院代号，第5位表示某专业，第6位表示班级，最后两位表示在班级中的序号。该校共有11个学院，代号表示如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代号        学院名称</span><br><span class="line">01      播音主持艺术学院</span><br><span class="line">02      新闻与传播学院</span><br><span class="line">03      电视艺术学院</span><br><span class="line">04      动画与数字艺术学院</span><br><span class="line">05      国际文化传播学院</span><br><span class="line">06      华策电影学院</span><br><span class="line">07      媒体工程学院</span><br><span class="line">08      设计艺术学院</span><br><span class="line">09      文化创意与管理学院</span><br><span class="line">10      文学院</span><br><span class="line">11      音乐学院</span><br></pre></td></tr></table></figure><p>要求编程实现对学号进行分析，并输出相应信息。</p><p><strong>输入格式</strong>:</p><p>输入学生姓名和学号，以空格隔开</p><p><strong>输出格式</strong>:</p><p>输出学生的学院专业及班级信息</p><p><strong>输入样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">王雪梅 20071203</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">王雪梅是2020级媒体工程学院1号专业2班第03号学生</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">college=[<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;播音主持艺术学院&#x27;</span>,<span class="string">&#x27;新闻与传播学院&#x27;</span>,<span class="string">&#x27;电视艺术学院&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;动画与数字艺术学院&#x27;</span>,<span class="string">&#x27;国际文化传播学院&#x27;</span>,<span class="string">&#x27;华策电影学院&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;媒体工程学院&#x27;</span>,<span class="string">&#x27;设计艺术学院&#x27;</span>,<span class="string">&#x27;文化创意与管理学院&#x27;</span>,<span class="string">&#x27;文学院&#x27;</span>,<span class="string">&#x27;音乐学院&#x27;</span>]</span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line">arr=[]</span><br><span class="line">arr=<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">sid=arr[<span class="number">1</span>]</span><br><span class="line">name=arr[<span class="number">0</span>]</span><br><span class="line">year=<span class="string">&#x27;20&#x27;</span>+sid[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> sid[<span class="number">2</span>]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">    cid=<span class="built_in">int</span>(sid[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    cid=<span class="built_in">int</span>(sid[<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">zy=sid[<span class="number">4</span>]</span><br><span class="line">bj=sid[<span class="number">5</span>]</span><br><span class="line">hs=sid[<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>是<span class="subst">&#123;year&#125;</span>级<span class="subst">&#123;college[cid]&#125;</span><span class="subst">&#123;zy&#125;</span>号专业<span class="subst">&#123;bj&#125;</span>班第<span class="subst">&#123;hs&#125;</span>号学生&#x27;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="9、点咖啡"><a href="#9、点咖啡" class="headerlink" title="9、点咖啡"></a>9、点咖啡</h4><details class="folding-tag" ><summary> 1-9 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>根据顾客输入的数字形成咖啡订单。已知有两个元组：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coffee=(&#x27;意式&#x27;,&#x27;美式&#x27;,&#x27;拿铁&#x27;,&#x27;摩卡&#x27;)</span><br><span class="line">ch=(&#x27;冰&#x27;,&#x27;冷&#x27;,&#x27;热&#x27;,&#x27;烫&#x27;)</span><br></pre></td></tr></table></figure><p>每个列表有4个元素，试编写程序，输入三个数，前两个肯定在0~3范围内的整数（输入时用空格分隔），将其作为索引分别访问两个元组中的对应元素，表示咖啡的种类和冷热程度；最后一个整数表示咖啡的杯数。例如，输入的三个整数分别为<code>1 0 2</code>，则输出<code>2杯冰美式</code>。</p><p><strong>输入格式:</strong></p><p>在一行中输入三个整数，空格分隔。前两个整数的范围必须在0~3之间，最后一个是正整数。</p><p><strong>输出格式:</strong></p><p>输出相应的订单。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 3 3</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3杯烫拿铁</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line">arr=<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">coffee=(<span class="string">&#x27;意式&#x27;</span>,<span class="string">&#x27;美式&#x27;</span>,<span class="string">&#x27;拿铁&#x27;</span>,<span class="string">&#x27;摩卡&#x27;</span>)</span><br><span class="line">ch=(<span class="string">&#x27;冰&#x27;</span>,<span class="string">&#x27;冷&#x27;</span>,<span class="string">&#x27;热&#x27;</span>,<span class="string">&#x27;烫&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;arr[<span class="number">2</span>]&#125;</span>杯<span class="subst">&#123;ch[<span class="built_in">int</span>(arr[<span class="number">1</span>])]&#125;</span><span class="subst">&#123;coffee[<span class="built_in">int</span>(arr[<span class="number">0</span>])]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="10、求出歌手的得分"><a href="#10、求出歌手的得分" class="headerlink" title="10、求出歌手的得分"></a>10、求出歌手的得分</h4><details class="folding-tag" ><summary> 1-10 </summary>              <div class='content'>              <blockquote><p>作者 陈春晖</p><p>单位 浙江大学</p></blockquote><p>输入一个正整数n (n&gt;4)，再输入n个实数，求出歌手的得分（保留2位小数）。设一歌唱评奖晚会上有n(n&gt;4)个评委为歌手打分.评分规则:每个评委依次打分,再去掉2个最高分和2个最低分,计算余下的分数平均值为歌手的得分.</p><p><strong>输入格式:</strong></p><p>在第一行中输入n<br>在第二行中输入n个分数</p><p><strong>输出格式:</strong></p><p>在一行中输出平均分数</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">10 10 9 9 9 8 8 8 7 7</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aver=8.50</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line">arr=<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">score=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">    score.append(<span class="built_in">int</span>(arr[i]))</span><br><span class="line">score.sort()</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n-<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span>+=<span class="built_in">int</span>(score[i])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aver=&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">sum</span>/(n-<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><hr><h2 id="三、第3章-流程控制"><a href="#三、第3章-流程控制" class="headerlink" title="三、第3章 流程控制"></a><span id="jump13">三、第3章 流程控制</span></h2><details class="folding-tag" ><summary> 第3章 </summary>              <div class='content'>              <h3 id="（一）编程题"><a href="#（一）编程题" class="headerlink" title="（一）编程题"></a>（一）编程题</h3><details class="folding-tag" ><summary> 编程题 </summary>              <div class='content'>              <h4 id="1、设置变量age表示年龄，通过判断age的值打印不同的内容"><a href="#1、设置变量age表示年龄，通过判断age的值打印不同的内容" class="headerlink" title="1、设置变量age表示年龄，通过判断age的值打印不同的内容"></a>1、设置变量age表示年龄，通过判断age的值打印不同的内容</h4><details class="folding-tag" ><summary> 1-1 </summary>              <div class='content'>              <blockquote><p>作者 王宇</p><p>单位 集美大学诚毅学院</p></blockquote><p>设置变量age表示年龄，通过判断age的值打印不同的内容。age大于等于18，即输出成年人；age小于18则输出未成年人，age小于0则输出非法输入。尝试分别用两种方式来编写。（1、用单分支结构 2、用二分支结构）</p><p><strong>输入格式:</strong></p><p>输入年龄</p><p><strong>输出格式:</strong></p><p>根据输入，输出相应的情况</p><p><strong>输入样例1:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">成年人</span><br></pre></td></tr></table></figure><p><strong>输入样例2:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>输出样例2:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">未成年人</span><br></pre></td></tr></table></figure><p><strong>输入样例3:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><p><strong>输出样例3:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">非法输入</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span>&lt;=age&lt;<span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未成年人&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age&gt;=<span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成年人&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;非法输入&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、判断是否闰年"><a href="#2、判断是否闰年" class="headerlink" title="2、判断是否闰年"></a>2、判断是否闰年</h4><details class="folding-tag" ><summary> 1-2 </summary>              <div class='content'>              <blockquote><p>作者 王宇</p><p>单位 集美大学诚毅学院</p></blockquote><p>根据输入的年份，判断该年份是否闰年，并将结果显示出来。判断是否闰年的标准为：如果年份能被4整除、但不能被100整除或者能被400整除就是闰年。</p><p><strong>输入格式:</strong></p><p>输入年份</p><p><strong>输出格式:</strong></p><p>根据年份输入闰年或者非闰年</p><p><strong>输入样例1:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1900</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1900 不是闰年</span><br></pre></td></tr></table></figure><p><strong>输入样例2:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2000</span><br></pre></td></tr></table></figure><p><strong>输出样例2:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2000 是闰年</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> year%<span class="number">4</span>==<span class="number">0</span> <span class="keyword">and</span> year%<span class="number">100</span>!=<span class="number">0</span> <span class="keyword">or</span> year%<span class="number">400</span>==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span> 是闰年&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span> 不是闰年&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="3、设计一个“计算器“"><a href="#3、设计一个“计算器“" class="headerlink" title="3、设计一个“计算器“"></a>3、设计一个“计算器“</h4><details class="folding-tag" ><summary> 1-3 </summary>              <div class='content'>              <blockquote><p>作者 王宇</p><p>单位 集美大学诚毅学院</p></blockquote><p>设计一个“计算器”，输入两个运算数x和y和运算符，实现加、减、乘、除四则运算，当进行除法运算时，若除数为0，则显示“除数不能为0！”。</p><p><strong>输入格式:</strong></p><p>输入两个运算数与运算符</p><p><strong>输出格式:</strong></p><p>输出表达式与结果</p><p><strong>输入样例1:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">+</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1+0=1</span><br></pre></td></tr></table></figure><p><strong>输入样例2:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">-</span><br></pre></td></tr></table></figure><p><strong>输出样例2:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1-0=1</span><br></pre></td></tr></table></figure><p><strong>输入样例3:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">*</span><br></pre></td></tr></table></figure><p><strong>输出样例3:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1*0=0</span><br></pre></td></tr></table></figure><p><strong>输入样例4:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">/</span><br></pre></td></tr></table></figure><p><strong>输出样例4:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">除数不能为0！</span><br></pre></td></tr></table></figure><p><strong>输入样例5:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">/</span><br></pre></td></tr></table></figure><p><strong>输出样例5:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1/2=0.5</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">num2=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">symbol=<span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> symbol!=<span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> symbol==<span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;+&#123;&#125;=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(num1,num2,num1+num2))</span><br><span class="line">    <span class="keyword">elif</span> symbol==<span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(num1,num2,num1-num2))</span><br><span class="line">    <span class="keyword">elif</span> symbol==<span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;*&#123;&#125;=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(num1,num2,num1*num2))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> num2==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;除数不能为0！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;/&#123;&#125;=&#123;:.1f&#125;&quot;</span>.<span class="built_in">format</span>(num1,num2,num1/num2))</span><br><span class="line">        </span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="4、温度转换"><a href="#4、温度转换" class="headerlink" title="4、温度转换"></a>4、温度转换</h4><details class="folding-tag" ><summary> 1-4 </summary>              <div class='content'>              <blockquote><p>作者 王宇</p><p>单位 集美大学诚毅学院</p></blockquote><p>根据华氏和摄氏温度定义，转换公式如下：<br><em>C</em>=(<em>F</em>−32)/1.8​<em>F</em>=1.8<em>C</em>+32<br>这里，<em>C</em> 表示摄氏温度，而 <em>F</em> 表示华氏温度。<br>请写程序根据温度的单位换算成另一种温度。</p><p><strong>输入格式:</strong></p><p>输入两行，<br>第一行输入一个大写字母 <code>C</code> 或 <code>F</code>，表示输入温度的单位；<br>第二行输入一个实数，表示温度。</p><p><strong>输出格式:</strong></p><p>输出两行，<br>第一行输出一个大写字母 <code>C</code> 或 <code>F</code>，表示输入温度的单位；<br>第二行输出一个数，表示对应单位的温度，保留两位小数。</p><p><strong>输入样例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C</span><br><span class="line">32</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F</span><br><span class="line">89.60</span><br></pre></td></tr></table></figure><p><strong>输入样例2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F</span><br><span class="line">97.7</span><br></pre></td></tr></table></figure><p><strong>输出样例2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C</span><br><span class="line">36.50</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">symbol=<span class="built_in">input</span>()</span><br><span class="line">temperature=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> symbol==<span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">    c=<span class="number">1.8</span>*temperature+<span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(c))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    f=(temperature-<span class="number">32</span>)/<span class="number">1.8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(f))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="5、闰年次数"><a href="#5、闰年次数" class="headerlink" title="5、闰年次数"></a>5、闰年次数</h4><details class="folding-tag" ><summary> 1-5 </summary>              <div class='content'>              <blockquote><p>作者 mjye</p><p>单位 北京师范大学珠海校区</p></blockquote><p>计算两个给定年份之间的闰年次数。</p><p>闰年的规则是：四年一闰，百年不闰，四百年再闰。（年份能够被4整除但不能被100整除算是闰年，年份能被400整除也是闰年）。</p><p><strong>输入格式</strong>:</p><p>输入两行，第一行一个整数，表示起始年份 <em>L</em>，第二行一个整数表示终止年份 <em>R</em>，其中 1582&lt;<em>L</em>&lt;<em>R</em>&lt;2050。</p><p><strong>输出格式</strong>:</p><p>输出一个数，表示年份区间 [<em>L</em>,<em>R</em>] 之间的闰年次数。</p><p><strong>输入样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2000</span><br><span class="line">2020</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">end=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start,end+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">4</span>==<span class="number">0</span> <span class="keyword">and</span> i%<span class="number">100</span>!=<span class="number">0</span> <span class="keyword">or</span> i%<span class="number">400</span>==<span class="number">0</span>:</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="6、Addition-and-subtraction"><a href="#6、Addition-and-subtraction" class="headerlink" title="6、Addition and subtraction"></a>6、Addition and subtraction</h4><details class="folding-tag" ><summary> 1-6 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>Write a program to realize the basic arithmetic operation. Input two integers and an operator(<code>+</code> or <code>-</code>), calculate the result and output it.</p><p><strong>Sample Input #1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 + 4</span><br></pre></td></tr></table></figure><p><strong>Sample Output #1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 + 4 = 6</span><br></pre></td></tr></table></figure><p><strong>Sample Input #2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 - 4</span><br></pre></td></tr></table></figure><p><strong>Sample Output #2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 - 4 = -2</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line">num1=<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">num2=<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">2</span>]</span><br><span class="line">symbol=<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">result=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> symbol==<span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">    result=<span class="built_in">int</span>(num1)+<span class="built_in">int</span>(num2)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    result=<span class="built_in">int</span>(num1)-<span class="built_in">int</span>(num2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>,result))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="7、求和"><a href="#7、求和" class="headerlink" title="7、求和"></a>7、求和</h4><details class="folding-tag" ><summary> 1-7 </summary>              <div class='content'>              <blockquote><p>作者 王宇</p><p>单位 集美大学诚毅学院</p></blockquote><p>对用户输入的数据求和，直到输入数据等于0时，结束循环。</p><p><strong>输入格式:</strong></p><p>连续输入多个数据，每行输入一个，当输入0时，结束输入</p><p><strong>输出格式:</strong></p><p>输出所有数据之和</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">sum</span>+=i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="8、求斐波那契数列"><a href="#8、求斐波那契数列" class="headerlink" title="8、求斐波那契数列"></a>8、求斐波那契数列</h4><details class="folding-tag" ><summary> 1-8 </summary>              <div class='content'>              <blockquote><p>作者 王宇</p><p>单位 集美大学诚毅学院</p></blockquote><p>根据斐波那契数列的定义，F(0)=0，F(1)=1, F(n)=F(n–1)+F(n–2)(n≥2)，输出不大于x的整数序列元素，元素之间用空格分隔,x的值由用户从键盘输入。 ‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬</p><p><strong>输入格式:</strong></p><p>从键盘输入一个不大于100的整数x</p><p><strong>输出格式:</strong></p><p>输出所有小于等于x的斐波那契数列</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 1 1 2 3 5 8 </span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line">b=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x==<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0 1 1 &quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0 1 &quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> a+b&lt;=x:</span><br><span class="line">        a=a+b</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span> &quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        b=a+b</span><br><span class="line">        <span class="keyword">if</span> b&lt;=x:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span> &quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="9、奇偶求和"><a href="#9、奇偶求和" class="headerlink" title="9、奇偶求和"></a>9、奇偶求和</h4><details class="folding-tag" ><summary> 1-9 </summary>              <div class='content'>              <blockquote><p>作者 zhuo</p><p>单位 山东科技大学</p></blockquote><p>输入n个整数，分别输出奇数的和和偶数的和。</p><p><strong>输入格式:</strong></p><p>先输入一个正整数n, 然后依次输入n个整数，每个数占一行。</p><p><strong>输出格式:</strong></p><p>分别输出奇数的和和偶数的和（若没有则输出0），每个占一行。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">sd=<span class="number">0</span></span><br><span class="line">so=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">    x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        sd+=x</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        so+=x</span><br><span class="line"><span class="built_in">print</span>(so)</span><br><span class="line"><span class="built_in">print</span>(sd)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="10、按格式输出九九乘法表"><a href="#10、按格式输出九九乘法表" class="headerlink" title="10、按格式输出九九乘法表"></a>10、按格式输出九九乘法表</h4><details class="folding-tag" ><summary> 1-10 </summary>              <div class='content'>              <blockquote><p>作者 dyx</p><p>单位 临沂大学</p></blockquote><p>按照格式设计一个“九九乘法口诀表”，并打印出来。</p><p><strong>输入格式:</strong></p><p>无输入</p><p><strong>输出格式:</strong></p><p>注意：每个等式后跟一个空格</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1*1=1 </span><br><span class="line">1*2=2 2*2=4 </span><br><span class="line">1*3=3 2*3=6 3*3=9 </span><br><span class="line">1*4=4 2*4=8 3*4=12 4*4=16 </span><br><span class="line">1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 </span><br><span class="line">1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 </span><br><span class="line">1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 </span><br><span class="line">1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 </span><br><span class="line">1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81 </span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;j+<span class="number">1</span>&#125;</span>*<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>=<span class="subst">&#123;(i+<span class="number">1</span>)*(j+<span class="number">1</span>)&#125;</span>&quot;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><hr><h2 id="二、第2章-数字类型与字符串"><a href="#二、第2章-数字类型与字符串" class="headerlink" title="二、第2章 数字类型与字符串"></a><span id="jump12">二、第2章 数字类型与字符串</span></h2><details class="folding-tag" ><summary> 第2章 </summary>              <div class='content'>              <h3 id="（一）程序填空题"><a href="#（一）程序填空题" class="headerlink" title="（一）程序填空题"></a>（一）程序填空题</h3><details class="folding-tag" ><summary> 程序填空题 </summary>              <div class='content'>              <h4 id="1、补充以下程序，以便实现计算圆环的面积："><a href="#1、补充以下程序，以便实现计算圆环的面积：" class="headerlink" title="1、补充以下程序，以便实现计算圆环的面积："></a>1、补充以下程序，以便实现计算圆环的面积：</h4><details class="folding-tag" ><summary> 1-1 </summary>              <div class='content'>              <blockquote><p>作者 python课程组</p><p>单位 福州大学至诚学院</p></blockquote><p>补充以下程序，以便实现计算圆环的面积，并保留3位小数输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line">R=<span class="built_in">eval</span>(<span class="built_in">input</span>()) <span class="comment">#外圆半径</span></span><br><span class="line">r=<span class="built_in">eval</span>(<span class="built_in">input</span>()) <span class="comment">#内圆半径</span></span><br><span class="line">s=【<span class="number">1</span>】</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;圆环面积为：【2】&quot;</span>.<span class="built_in">format</span>(s))</span><br></pre></td></tr></table></figure><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">16.2</span><br><span class="line">9.4</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">圆环面积为：546.888</span><br></pre></td></tr></table></figure><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>【1】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pi*R**<span class="number">2</span>-pi*r**<span class="number">2</span></span><br></pre></td></tr></table></figure><p>【2】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;:<span class="number">.3</span>f&#125;</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line">R=<span class="built_in">eval</span>(<span class="built_in">input</span>()) <span class="comment">#外圆半径</span></span><br><span class="line">r=<span class="built_in">eval</span>(<span class="built_in">input</span>()) <span class="comment">#内圆半径</span></span><br><span class="line">s=pi*R**<span class="number">2</span>-pi*r**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;圆环面积为：&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(s))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2、计算三位数每位上数字的和"><a href="#2、计算三位数每位上数字的和" class="headerlink" title="2、计算三位数每位上数字的和"></a>2、计算三位数每位上数字的和</h4><details class="folding-tag" ><summary> 1-2 </summary>              <div class='content'>              <blockquote><p>作者 python课程组</p><p>单位 福州大学至诚学院</p></blockquote><p>补充程序实现计算：<br>输入一个三位的整数（不接受实数），求这个三位数每一位上数字的和是多少？例如：输入：382，输出：和为13。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=(<span class="built_in">input</span>())</span><br><span class="line">a=【<span class="number">1</span>】 <span class="comment">#百位上的数字</span></span><br><span class="line">b=【<span class="number">2</span>】 <span class="comment">#十位上的数字</span></span><br><span class="line">c=【<span class="number">3</span>】 <span class="comment">#个位上的数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;三个位数上数字和为：【4】&#x27;</span> )</span><br></pre></td></tr></table></figure><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">382</span><br></pre></td></tr></table></figure><p><strong>输出样例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三个位数上数字和为： 13</span><br></pre></td></tr></table></figure><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>【1】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span></span><br></pre></td></tr></table></figure><p>【2】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num//<span class="number">100</span></span><br></pre></td></tr></table></figure><p>【3】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num//<span class="number">10</span>%<span class="number">10</span></span><br></pre></td></tr></table></figure><p>【4】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num%<span class="number">10</span></span><br></pre></td></tr></table></figure><p>【5】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">,a+b+c</span><br></pre></td></tr></table></figure><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">a=num//<span class="number">100</span> <span class="comment">#百位上的数字</span></span><br><span class="line">b=num//<span class="number">10</span>%<span class="number">10</span> <span class="comment">#十位上的数字</span></span><br><span class="line">c=num%<span class="number">10</span> <span class="comment">#个位上的数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;三个位数上数字和为：&#x27;</span>,a+b+c )</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><hr><h3 id="（二）编程题-1"><a href="#（二）编程题-1" class="headerlink" title="（二）编程题"></a>（二）编程题</h3><details class="folding-tag" ><summary> 编程题 </summary>              <div class='content'>              <h4 id="1、学生入学年份"><a href="#1、学生入学年份" class="headerlink" title="1、学生入学年份"></a>1、<strong>学生入学年份</strong></h4><details class="folding-tag" ><summary> 2-1 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>学生的学号中包含这该学生的入学年份，如学号为<code>1230204032</code>的同学就是2023年入学的（第2位和第3位表示年份的后两位）。输入学号，输出学生的入学年份。</p><p><strong>输入格式:</strong></p><p>输入学生的学号，学号长度为10，假设所有的学生都是2000年~2099年间入学的。</p><p><strong>输出格式</strong>:</p><p>输出该同学的入学年份，年份包含4位数字。</p><p><strong>输入样例</strong>:</p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1230204032</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year=<span class="built_in">input</span>()</span><br><span class="line">year=year[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;20&quot;</span>+year)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2-、身份证读取出生地区"><a href="#2-、身份证读取出生地区" class="headerlink" title="2 、身份证读取出生地区"></a>2 、<strong>身份证读取出生地区</strong></h4><details class="folding-tag" ><summary> 2-2 </summary>              <div class='content'>              <blockquote><p>作者 田洪云</p><p>单位 临沂大学</p></blockquote><p>我国18位身份证号码的1-6位表示出生地编码，15-16位表示在该地区的出生序号，请输入一个18位的身份证号，获取该身份证所在地区及在该地区出生人口的序号，并输出：当天出生于XXXXXX地区的第XX个人。</p><p><strong>输入格式</strong>:</p><p>18位整数</p><p><strong>输出格式</strong>:</p><p>当天出生于XXXXXX地区的第XX个人</p><p><strong>输入样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">110101200104057856</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当天出生于110101地区的第78个人</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key=<span class="built_in">input</span>()</span><br><span class="line">area=key[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line">num=key[<span class="number">14</span>:<span class="number">16</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当天出生于%s地区的第%s个人&quot;</span>%(area,num))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="3-、将千克转换为磅"><a href="#3-、将千克转换为磅" class="headerlink" title="3 、将千克转换为磅"></a>3 、<strong>将千克转换为磅</strong></h4><details class="folding-tag" ><summary> 2-3 </summary>              <div class='content'>              <blockquote><p>作者 mjye</p><p>单位 北京师范大学珠海校区</p></blockquote><p>编写一个程序，要求用户输入一个以千克为单位的重量，然后将其转换为磅并输出。转换公式为：<br>Pounds=Kilograms×2.2</p><p><strong>输入格式:</strong></p><p>输入一个不超过100的非负数，表示以千克为单位的重量。</p><p><strong>输出格式</strong>:</p><p>输出单位为磅的重量，四舍五入保留一位小数。</p><p><strong>输入样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.4</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Kilograms=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">Pounds=Kilograms*<span class="number">2.2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.1f&#125;&quot;</span>.<span class="built_in">format</span>(Pounds))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="4、计算矩形的周长和面积"><a href="#4、计算矩形的周长和面积" class="headerlink" title="4、计算矩形的周长和面积"></a>4、<strong>计算矩形的周长和面积</strong></h4><details class="folding-tag" ><summary> 2-4 </summary>              <div class='content'>              <blockquote><p>作者 mjye</p><p>单位 北京师范大学珠海校区</p></blockquote><p>编写一个程序，要求用户输入矩形的长度 <em>l</em> 和宽度 <em>w</em>，然后计算并输出矩形的周长和面积。<br>公式：<br>Perimeter=2×(<em>l</em>+<em>w</em>)Area=<em>l</em>×<em>w</em></p><p><strong>输入格式</strong>:</p><p>输入两行，第一行一个正整数，表示矩形的长度 <em>l</em>，第二行一个正整数，表示矩形的宽度 <em>w</em>。</p><p><strong>输出格式</strong>:</p><p>输出两行，第一行一个整数，表示矩形的周长，第二行一个整数，表示矩形的面积。</p><p><strong>输入样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">w=<span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">Perimeter=<span class="number">2</span>*(l+w)</span><br><span class="line">Area=l*w</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d\n%d&quot;</span>%(Perimeter,Area))</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="5、统计单词的个数"><a href="#5、统计单词的个数" class="headerlink" title="5、统计单词的个数"></a>5、<strong>统计单词的个数</strong></h4><details class="folding-tag" ><summary> 2-5 </summary>              <div class='content'>              <blockquote><p>作者 陈春晖</p><p>单位 浙江大学</p></blockquote><p>输入一行字符，以回车结束，统计其中单词的个数。单词是中间没有空格的字符序列，各单词之间用空格分隔，单词间空格数可以是多个。</p><p><strong>输入格式</strong>:</p><p>在一行中输入字符</p><p><strong>输出格式</strong>:</p><p>在一行中输出单词的数量</p><p><strong>输入样例</strong>:</p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Let&#x27;s  go   to room  209</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count = 5</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag=<span class="number">0</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>()+<span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="keyword">while</span>(i!=<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">str</span>[i]&lt;=<span class="string">&#x27;z&#x27;</span> <span class="keyword">and</span> <span class="built_in">str</span>[i]&gt;=<span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> <span class="built_in">str</span>[i]&lt;=<span class="string">&#x27;Z&#x27;</span> <span class="keyword">and</span> <span class="built_in">str</span>[i]&gt;=<span class="string">&#x27;A&#x27;</span> <span class="keyword">or</span> <span class="built_in">str</span>[i]&lt;=<span class="string">&#x27;9&#x27;</span> <span class="keyword">and</span> <span class="built_in">str</span>[i]&gt;=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> <span class="built_in">str</span>[i]==<span class="string">&quot;&#x27;&quot;</span>):</span><br><span class="line">        flag=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>):</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        flag=<span class="number">0</span></span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;count =&quot;</span>,count)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="6、split函数分隔数据"><a href="#6、split函数分隔数据" class="headerlink" title="6、split函数分隔数据"></a>6、<strong>split函数分隔数据</strong></h4><details class="folding-tag" ><summary> 2-6 </summary>              <div class='content'>              <blockquote><p>作者 田洪云</p><p>单位 临沂大学</p></blockquote><p>输入购买的3种商品的金额，计算应付钱数。</p><p><strong>输入格式</strong>:</p><p>3种商品金额以空格间隔</p><p><strong>输出格式</strong>:</p><p>应付钱数</p><p><strong>输入样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">35.2 36 34.5</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">应付105.7元</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">money=<span class="built_in">input</span>()</span><br><span class="line">money1=money.split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]</span><br><span class="line">money2=money.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">money3=money.split(<span class="string">&quot; &quot;</span>)[<span class="number">2</span>]</span><br><span class="line">total=<span class="built_in">float</span>(money1)+<span class="built_in">float</span>(money2)+<span class="built_in">float</span>(money3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;应付<span class="subst">&#123;total&#125;</span>元&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="7、计算矩形的周长和面积"><a href="#7、计算矩形的周长和面积" class="headerlink" title="7、计算矩形的周长和面积"></a>7、<strong>计算矩形的周长和面积</strong></h4><details class="folding-tag" ><summary> 2-7 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>输入一个电话号码，将中间的4位号码隐藏替换为4个星号，只保留前面3位数字和4位尾号。</p><p><strong>输入格式</strong>:</p><p>输入一个电话号码。</p><p><strong>输出格式</strong>:</p><p>隐藏后的号码。</p><p><strong>输入样例</strong>:</p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13839283902</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>:</p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">138****3902</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=<span class="built_in">input</span>()</span><br><span class="line">str1=num[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">str2=num[<span class="number">7</span>:<span class="number">12</span>]</span><br><span class="line"><span class="built_in">str</span>=str1+<span class="string">&quot;****&quot;</span>+str2</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="8、Print-x-n-times"><a href="#8、Print-x-n-times" class="headerlink" title="8、Print x n times"></a>8、<strong>Print x n times</strong></h4><details class="folding-tag" ><summary> 2-8 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>Enter <code>n</code> and <code>x</code>, and print <code>x</code> <code>n</code> times.</p><p><strong>Input Specification:</strong></p><p>Input an integer <code>n</code> and a character <code>x</code> .</p><p><strong>Output Specification:</strong></p><p>Print <code>x</code> repeatedly <code>n</code> times .</p><p><strong>Sample Input:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 *</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*****</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>()</span><br><span class="line">n=<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">x=<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(n)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><hr><h2 id="一、第1章-开启Python学习之旅"><a href="#一、第1章-开启Python学习之旅" class="headerlink" title="一、第1章 开启Python学习之旅"></a><span id="jump11">一、第1章 开启Python学习之旅</span></h2><details class="folding-tag" ><summary> 第1章 </summary>              <div class='content'>              <h3 id="（一）编程题"><a href="#（一）编程题" class="headerlink" title="（一）编程题"></a>（一）编程题</h3><details class="folding-tag" ><summary> 编程题 </summary>              <div class='content'>              <h4 id="1、Hello-Python"><a href="#1、Hello-Python" class="headerlink" title="1、Hello Python"></a>1、<strong>Hello Python</strong></h4><details class="folding-tag" ><summary> 1-1 </summary>              <div class='content'>              <blockquote><p>作者 马杨珲</p><p>单位 浙江科技大学</p></blockquote><p>Just print this sentence: <code>Hello Python!</code></p><p><strong>Sample Input:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello Python!</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello Python!&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="2-直接输出hello-china"><a href="#2-直接输出hello-china" class="headerlink" title="2 直接输出hello,china!"></a>2 <strong>直接输出hello,china!</strong></h4><details class="folding-tag" ><summary> 1-2 </summary>              <div class='content'>              <blockquote><p>作者 dcq</p><p>单位 湖南工学院</p></blockquote><p>本题无输入，直接输出hello,china!</p><p><strong>输入格式:</strong></p><p>无。</p><p><strong>输出格式:</strong></p><p>直接输出hello,china!。</p><p><strong>输入样例:</strong></p><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello,china!</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello,china!&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h4 id="3、输入姓氏"><a href="#3、输入姓氏" class="headerlink" title="3、输入姓氏"></a>3、<strong>输入姓氏</strong></h4><details class="folding-tag" ><summary> 3-3 </summary>              <div class='content'>              <blockquote><p>作者 thy</p><p>单位 临沂大学</p></blockquote><p>编写一个程序，运行时用户输入姓氏后，输出，“您好，某同学！”</p><p><strong>输入格式:</strong></p><p>输入姓氏</p><p><strong>输出格式:</strong></p><p>您好，x同学！</p><p><strong>输入样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">孙</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">您好，孙同学！</span><br></pre></td></tr></table></figure><p>代码长度限制：16 KB</p><p>时间限制：400 ms</p><p>内存限制：64 MB</p><p>栈限制：8192 KB</p><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您好，&quot;</span>,a,<span class="string">&quot;同学！&quot;</span>,sep=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="PTA" scheme="http://example.com/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>2024虚拟形象的食用方法及桌面部署（1）</title>
    <link href="http://example.com/post/2024%E8%99%9A%E6%8B%9F%E5%BD%A2%E8%B1%A1%E7%9A%84%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E6%A1%8C%E9%9D%A2%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/post/2024%E8%99%9A%E6%8B%9F%E5%BD%A2%E8%B1%A1%E7%9A%84%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E6%A1%8C%E9%9D%A2%E9%83%A8%E7%BD%B2/</id>
    <published>2024-02-25T07:37:55.000Z</published>
    <updated>2024-05-23T05:25:59.634Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>想要得到一只像这样能在桌面上跟着你一块动的虚拟形象吗？</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.1.png" alt=""></p><p>跟着我的教程，让你的虚拟形象也部署在电脑桌面上٩( ╹▿╹ )۶</p><h2 id="二、准备清单"><a href="#二、准备清单" class="headerlink" title="二、准备清单"></a>二、准备清单</h2><p>（1）一个装有live2d模型的文件夹（怎么找？下面有教程）</p><p>（2）一个正版的Steam</p><p>（3）在Steam下载Animaze（免费的）</p><p><img title="Animaze" src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.2.png" alt="" style="zoom:80%;"></p><p>（4）班迪录屏（链接：<a href="https://pan.baidu.com/wap/init?surl=lPyt59mOkWyo_7kTZPkAFw">https://pan.baidu.com/wap/init?surl=lPyt59mOkWyo_7kTZPkAFw</a>，提取码：d648）</p><p><img title="班迪录屏" src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.3.png" alt="" style="zoom:67%;"></p><h2 id="三、开始部署"><a href="#三、开始部署" class="headerlink" title="三、开始部署"></a>三、开始部署</h2><h3 id="1-得到live2d"><a href="#1-得到live2d" class="headerlink" title="1.得到live2d"></a>1.得到live2d</h3><p>众所周知，要想拥有一个专属于自己的虚拟形象是需要找人约稿建模的，得花费不少钱。但是，有的大佬将他们制作的live2d免费公布出来，让大家都可以用。（向这些大佬致敬ε (๑&gt; ₃ &lt;) з）那么我们应该如何找到大佬发布的免费live2d呢？</p><p>其实很简单。打开B站，搜索“免费live2d“，在一众视频当中找到你心仪的那个模型，按照up主提供的下载方法把它下载到一个你<strong>找得到的</strong>文件夹。这样第一步就完成啦o(〃＾▽＾〃)o</p><p>——&gt;我在用的虚拟形象是（b站up主）”赤煜不爱吃鱼“这位大佬做的，这只天使猫猫特可爱！！！</p><p>如果你也想用这个模型，可以到b站关注他，然后在私信里发送“天使猫猫”，即可得到链接（<a href="https://pan.baidu.com/wap/init?surl=WmYmzGh67thJy0FOaQplug&amp;pwd=n7u8，提取码：n7u8）">https://pan.baidu.com/wap/init?surl=WmYmzGh67thJy0FOaQplug&amp;pwd=n7u8，提取码：n7u8）</a></p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.0.jpg" alt="" title="0"></p><h3 id="2-Animaze"><a href="#2-Animaze" class="headerlink" title="2.Animaze"></a>2.Animaze</h3><p>（1）打开Animaze后，你会看到左侧有个头像区，点击它，然后点击导入头像</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.4%20.png" alt="" title="1">（2）点击导入头像后，会让你打开live2d模型的文件，如果你用的是和我一样的live2d模型，那么按照图中所示的路径，便可找到模型的文件（后缀名为.json的那个）</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.5.png" alt="" title="2"></p><p>（3）选中并打开模型文件后，就会看到原来的默认模型被替换成你的模型了。接着就是点击左侧的背景，选择绿幕（Green screen），将背景图替换成绿幕</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.6.png" alt="" title="3"></p><p>然后可以看到画面变成这样</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.7.png" alt="" title="4"></p><p>（4）点击左下角的设置，再点击网络摄像头</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.8.png" alt="" title="5"></p><p>（6）点击网络摄像头，在下列可选项中找到一个可以用的摄像头（用电脑上自带的摄像头就行，记得把摄像头的遮挡板挪开（如果有的话），如果电脑上没有装一些直播相关的软件，一般是不会像我这样有一堆杂七杂八的虚拟摄像头）。</p><p>怎么知道是不是可用的呢？当下面的框中出现你的帅/漂亮脸时，就说明这个摄像头是可用的</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.9.1.png" alt="" title="6"></p><p>（7）点击显示网络相机<img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.9.jpg" alt="" title="7"></p><p>（8）点击下方的启用虚拟相机，然后坐好，脸正对着摄像头，再点击右边的校准，等待校准完成即可</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.10.jpg" alt="" title="8"></p><p>（9）试着眨眨眼，转一下头，张一张嘴巴，你会发现你的虚拟形象也会跟着动。如果觉得虚拟形象的动作怪怪的，可以调整一下坐姿，再次点击上一步的校准</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.10.png" alt="" title="9"></p><p>（10）把鼠标对着绿幕，滚动鼠标滚轮，让虚拟形象调整到合适的尺寸，再按住ctrl键，通过方向键将虚拟形象挪到右下角</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.10.1.png" alt="" title="10.1"></p><p>至此，Animaze的设置基本完成。等之后需要的时候再微调。</p><h3 id="3-班迪录屏"><a href="#3-班迪录屏" class="headerlink" title="3.班迪录屏"></a>3.班迪录屏</h3><p>（1）通过百度网盘下载班迪录屏破解版（链接：<a href="https://pan.baidu.com/wap/init?surl=lPyt59mOkWyo_7kTZPkAFw">https://pan.baidu.com/wap/init?surl=lPyt59mOkWyo_7kTZPkAFw</a>，提取码：d648）</p><p>（2）找到文件后，从这里打开软件</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.10.2.png" alt="" title="1"></p><p>（3）打开软件后，点击小箭头，选择全屏</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.11.png" alt="" title="2"></p><p>（4）点击摄像头的标志</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.12.png" alt="" title="3"></p><p>（5）按图中所示，调好设置</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/P3.13.png" alt="" title="4"></p><p>（6）勾选使用色度键，再点击高级设置</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.14.png" alt="" title="5"></p><p>（7）点击选择<img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.15.png" alt="" title="6"></p><p>（8）将吸管（鼠标）挪到绿幕上，点击后会发现右边的颜色那块从白色变成了绿色<img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.16.png" alt="" title="7"></p><p>（9）滑动”相似“右边的进度条，直至虚拟形象周围的绿幕消失（注意：不要拉得太过，否则会导致虚拟形象的部分区域消失）<img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.17.png" alt="" title="8"></p><p>（10）点击确定，回到上一个页面后继续点确定</p><p>（11）先点击红色的REC开始录制，<strong>再点击旁边的暂停键</strong>（这是个录屏软件，录制视频需要占用内存，暂停下来才能避免占用太多的内存，不用的时候直接关了就行），这样就可以在屏幕右下角看到你的虚拟形象了（虚拟形象周围会有Animaze的水印在跳动，这是正常的，如果给Animaze充钱买高级版的就会消失）。需要注意的是，当你想关掉虚拟形象时，直接把Animaze和班迪录屏关掉即可，之前调好的设置都会保存下来。关掉后，你会在电脑桌面上发现多出来一个视频文件，那个就是用班迪录屏录下来的视频，记得把它删掉！！！</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.18.png" alt="" title="9"></p><p>（如果觉得虚拟形象的尺寸不合你的期望，可以在Animaze通过鼠标滚轮调整大小，或者是从步骤（9）的界面中的叠加尺寸那调整大小，个人更推荐第一种）</p><p>（12）注意，此时有可能会发现右下角的虚拟形象上下有像这样的黑边（这是经常会有的）</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.19.png" alt="" title="10"></p><p>解决方法：</p><p>①先点击停止录制</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.21.png" alt="" title="11"></p><p>②再回到这个界面，向右拉动“叠加尺寸”的进度条，拉至70%以上，再点击确定，重新录制，发现黑边消失后，再将“叠加尺寸”的进度条拉至你期望的尺寸大小。（先往大的调，再调成小的）如果黑边仍然存在，则重复解决方法的操作。</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p3.20.png" alt="" title="12"></p><h2 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h2><p>怎么样？一步步地做下来是不是很简单呢(。・ω・。)</p><p>之后我还会再出一篇在用obs直播时如何使用虚拟形象的教程，敬请期待。。。</p><p>如果有什么问题欢迎在评论区留言ヾ(＾-＾)ノ</p><h4 id="参考视频：https-b23-tv-wHsOe30"><a href="#参考视频：https-b23-tv-wHsOe30" class="headerlink" title="参考视频：https://b23.tv/wHsOe30"></a>参考视频：<a href="https://b23.tv/wHsOe30">https://b23.tv/wHsOe30</a></h4><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>这是什么</title>
    <link href="http://example.com/post/%E8%BF%99%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://example.com/post/%E8%BF%99%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2024-02-23T14:19:56.000Z</published>
    <updated>2024-04-11T05:01:13.940Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="My第一篇blog-笑～"><a href="#My第一篇blog-笑～" class="headerlink" title="My第一篇blog(笑～"></a>My第一篇blog(笑～</h1><h4 id="随便发点怪东西（以下都是一些没啥用的唠嗑"><a href="#随便发点怪东西（以下都是一些没啥用的唠嗑" class="headerlink" title="随便发点怪东西（以下都是一些没啥用的唠嗑"></a>随便发点怪东西（以下都是一些没啥用的唠嗑</h4><p> 偷偷告诉你，其实下面啥也没有哦，但往下翻翻，没准会发现什么呢～（会是什么呢？？？）<del>（目光闪躲～）</del> </p><p>（先说一下，没有彩蛋哦（〃｀ 3′〃））<br>（如果想要更多地了解本博客，可以来到<a href="https://huanmen.github.io/about/">about</a>页面哦）</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>来都来了，给下面这只猫猫喂点小鱼干吧</p><p>　　　　　　＿＿＿<br>　　　　　 ／＞　　フ<br>　　　　　| 　<em>　 </em> l<br>　 　　　／` ミ＿xノ<br>　　 　 /　　　 　 |<br>　　　 /　 ヽ　　 ﾉ<br>　 　 │　　|　|　|<br>　／￣|　　 |　|　|<br>　| (￣ヽ＿＿ヽ＿)__)<br>　＼二つ </p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>。　Ｏ　　　ｏ<br>　 ｏ　　　。<br>○。<br>　　　ﾎｯｺﾘｰﾅ　　 Ｏ<br>。　 　 ＿<br>　　 ,.’´　　｀゛、　ｏ<br>　（ ＿´ ∀ ｀ _ ）</p><p> 　　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>／￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣</p><p>脑洞实验室一：　 </p><p>   　　　　</p><p>脑洞打开： 人类的思维具有唯一性 or 人类的思维在一定程度上是平行的（可以重合） or 人类的思维是平行的，但结果是唯一的 or 人类的思维是完全平行的（不重合） or ……？</p><p>脑洞测试：当人类克隆技术完善时，假设有这么一个人，叫他小鱼吧，他刚出生时就有若干个克隆体（出生时间一样），两人在完全相同且</p><p>独立的环境下成长（比一起生活的双胞胎的那种完全相同哦），他们之间没有任何接触。有一天，有人分别问了他们同一个问题——1 + 1 = ？</p><p>以下是我能想到的几种情况：</p><p>1、他们的答案一模一样，且他们的思路也是一模一样。例如：小鱼想的是：“好简单的问题啊，不就是2嘛。”( -‘`-; )，克隆体1号想的也是：“</p><p>好简单的问题啊，不就是2嘛。”( -‘`-; )，其他克隆体也是这么想的。那么，这个结果可以说明：人类的思维具有唯一性，即，一模一样的人，想法也一模一样。</p><p>2、他们的答案<strong>不完全</strong>一样，他们的思路也<strong>不完全</strong>一样。例如：小鱼想的是：“好简单的问题啊，不就是2嘛。”，而克隆体1号想的是：“这么简单的问题，该不会有诈吧，那我偏不答2，我的答案是114514。”其他克隆体有的也有自己的不同见解，有的跟小鱼一样，有的跟克隆体一号一样。那么，这个结果可以说明：人类的思维在一定程度上是平行的，即使是一模一样的人，也是各有各的想法，但也有想法一模一样的，即，人类的思维在一定程度上是发散的。</p><p>3、他们的答案一模一样，但他们的思路<strong>不完全</strong>一样。例如：小鱼想的是：“这么简单的问题，该不会有诈吧，但我也想不出还能是什么答案，算了算了，不想了，就答2得了。”而克隆体1号想的是：“好简单的问题啊，不就是2嘛。“其他克隆体各有各的思路，但都回答了2。那么，这个结果可以说明：人类的思维是平行的，但结果是唯一的，即，人类的思维会发散，但都会收束到同一点。</p><p>4、他们的答案<strong>完全</strong>不一样，但他们的思路也<strong>完全</strong>不一样。例如：小鱼回答的是2，克隆体1号回答的是3，克隆体4号回答的是114514，克隆体4号回答的是圆周率……他们的答案全都不一样。那么，这个结果可以说明：人类的思维是完全平行的，即使是一模一样的人，也是各有各的想法，即，人类的思维是完全发散的。</p><p>＼ 　　</p><p>  　 ￣￣∨￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣</p><p>　 ∧＿∧<br>　(　・∀・)　<br>　(　 つつヾ<br>　 | ｜ |　吧唧吧唧<br>　(＿_)＿)</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　　</p><p>　　</p><p>　</p><p>　</p><p>　☆ <em>　. 　☆<br>　   . ∧＿∧　∩　</em> ☆  </p><p>   ☆ ( ・∀・)/ .<br>　. ⊂　　 ノ<em> ☆<br>☆ </em> (つ ノ .☆<br>　　 (ノ</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>／￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣</p><p>诶，我有个idea，要是在未来，计算机技术飞速发展，那可不可以制作出这么一台超级计 算机，将已发现的所有数化生的相关公式公理等全都输进去，并模拟出一个宇宙（不完整的），再去观察它，如果观察到与现实不符的现象，是不是说明引发该现象的原理人们还不够了解或 还未发现，那我们就找到了新的研究方向，研究明白后再补充到这个模拟宇宙中，如此下来，等到这个宇宙与现实的宇宙一模一样的时候，人类对世界的了解也变得非常透彻。。。。。。                                                                                                   　</p><p>＼                                                                                                                                                                                                                                         　<br>　￣￣∨￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣<br>　    ∧＿∧<br>　(　・∀・)　<br>　(　 つつヾ<br>　 | ｜ |　吧唧吧唧<br>　(＿_)＿)</p><p> 　</p><p>　　</p><p>　　</p><p>　　　</p><p>　　　　</p><p>　　　　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　　　　</p><p>　</p><p>　　　　</p><p>　　　　</p><p>　　　　</p><p>　　　　</p><p>　　　　</p><p>　　　</p><p>　　</p><p>　　　</p><p>　　</p><p>　</p><p>　　　</p><p>　</p><p>　　</p><p>　</p><p>　　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">string word1 = &#123;“你该睡觉啦！&quot;&#125; ;</span><br><span class="line">string word2 = &#123;“你该起床啦！&quot;&#125; ；</span><br><span class="line">string word3 = &#123;“休息一下吧！&quot;&#125; ；</span><br><span class="line"></span><br><span class="line">if ( time == &quot;晚上&quot; )</span><br><span class="line">&#123;</span><br><span class="line">  cout &lt;&lt; word1 &lt;&lt; endl;</span><br><span class="line">  　                                  |　 碎觉觉啦！ |</span><br><span class="line">  　                                  ＼/</span><br><span class="line">  　                               　   ￣￣￣￣∨￣￣</span><br><span class="line">  　                                  。</span><br><span class="line">　　　                                   　∧ ∧　.・　</span><br><span class="line"> 　 cout &lt;&lt; &quot;you_should_to = &quot; ==　　|￣￣( ´Д｀)￣|        ;</span><br><span class="line">        　                           |＼⌒ ⌒ ⌒ ⌒ ⌒ ⌒ ⌒＼</span><br><span class="line">       　                            |　 ＼⌒ ⌒ ⌒ ⌒ ⌒ ⌒ ＼</span><br><span class="line">       　                             ＼　 |⌒ ⌒ ⌒ ⌒ ⌒ ⌒ ⌒|</span><br><span class="line">        　                         　    ＼|＿＿＿＿＿＿＿＿|</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else if ( time == &quot;早上&quot; )</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  cout &lt;&lt; word2 &lt;&lt; endl;</span><br><span class="line">            　 　                    　 ∩∩</span><br><span class="line">　          　                     　 （´･ω･）</span><br><span class="line">　 cout &lt;&lt; &quot;you_should_to = &quot; ==　　＿|　⊃／(＿＿_  ;</span><br><span class="line">          　                     　／ └-(＿＿＿_／</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">  cout &lt;&lt; word3 &lt;&lt; endl;</span><br><span class="line">                                 休息一下~休息一下~</span><br><span class="line">                                 ￣￣￣￣￣＼／￣￣￣￣ </span><br><span class="line">　　　                                 　∧＿∧　　　　 </span><br><span class="line">  cout &lt;&lt; &quot;you_should_to = &quot; == 　　;;（´・ω・） 　  ;</span><br><span class="line">　                                ＿旦_(っ(,,■)＿＿   </span><br><span class="line">                           　     |l￣l||￣しﾞしﾞ￣|i </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　</p><p>　</p><p>　　</p><p>　　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　后边啥也没有了</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　真没有了！！！　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>你这瓜娃子咋这么犟（＞д＜）</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>还翻呢(▼ヘ▼#)</p><p>　　　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　　</p><p>　</p><p>　　</p><p>　　</p><p>　　</p><p>　　</p><p>　　</p><p>　</p><p>　　</p><p>　　</p><p>　　</p><p>　　　</p><p>　　</p><p>　　</p><p>　</p><p>　　</p><p>　　</p><p>　　　</p><p>　　　</p><p>　</p><p>　　　</p><p>　</p><p>　　　</p><p>　　</p><p>　</p><p>　</p><p>　<del>哈哈哈，你被骗了</del>　看在你翻了这么久，我就给你张我收藏的可爱泥岩岩的GIF吧&lt;(ˉ^ˉ)&gt;</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p1.2.gif" alt=""></p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　</p><p>　　</p><p>　　</p><p>　　　　</p><p>　　</p><p>　</p><p>　</p><p>　　</p><p>　</p><p>　</p><p>　</p><p>　什么？！还不够！　Σ(｀д′*ノ)ノ</p><p>　好贪心的人类啊啊啊　Ｏ(≧口≦)Ｏ</p><p>　好叭，再给你一张，别不识好歹　(lll￢ω￢)</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p1.1.gif" alt=""></p><p>想要其他的表情包，那就在评论区留言吧，说出你想要什么类型的表情包，我会藏在下一篇blog哒（如果有的话</p><p><img src="https://cdn.jsdelivr.net/gh/huanmen/picgo/imgage/p1.3.jpg" title="" alt="" style="zoom:50%;"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="唠嗑" scheme="http://example.com/tags/%E5%94%A0%E5%97%91/"/>
    
  </entry>
  
</feed>
